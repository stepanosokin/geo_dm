# -*- coding: utf-8 -*-
"""
/***************************************************************************
 GeoDM
                                 A QGIS plugin
 This plugin provides geophysical data management tasks inside metadata database by stepanosokin
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2023-05-30
        git sha              : $Format:%H$
        copyright            : (C) 2023 by Stepan Osokin
        email                : stepanosokin@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication
# from PyQt5.QtWebEngineWidgets import QWebEngineView
from qgis.PyQt.QtCore import Qt, QDate
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction, QTableWidgetItem, QTableWidget, QPushButton, QAbstractItemView
from qgis.core import \
    Qgis, \
    QgsProject, \
    QgsLayerTreeUtils, \
    QgsVectorLayerSelectedFeatureSource, \
    QgsCoordinateReferenceSystem, \
    QgsMapLayer, \
    QgsMapLayerType, \
    QgsCoordinateTransform
import psycopg2
from psycopg2.extras import *
from datetime import datetime, date


# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .geo_dm_dialogs import *
import os.path


class GeoDM:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'GeoDM_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&Geophysical Data Management')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None
        cwd = os.getcwd()
        with open('C:/Users/saosokin/AppData/Roaming/QGIS/QGIS3/profiles/default/python/plugins/geo_dm/.pgdsn', encoding='utf-8') as dsnf:
            self.dsn = dsnf.read().replace('\n', '')
        # self.pgconn = psycopg2.connect(dsn)

        self.proc_list = []

        self.null_value = 'NULL'

        self.processings = 'dm.processings'
        self.processings_view = 'dm.processings_view'
        self.processing_types = 'dm.processing_types'
        self.projects = 'dm.projects'
        self.companies = 'dm.companies'
        self.contracts = 'dm.contracts'
        self.contracts_view = 'dm.contracts_view'
        self.reports = 'dm.reports'
        self.reports_view = 'dm.reports_view'
        self.projects = 'dm.projects'
        self.companies = 'dm.companies'
        self.contract_types = 'dm.contract_types'
        self.report_types = 'dm.report_types'
        self.conf = 'dm.conf'
        self.seismic_lines_processed_2d = 'dm.seismic_lines_processed_2d'
        self.seismic_pols_processed_3d = 'dm.seismic_pols_processed_3d'
        self.surveys_view = 'dm.surveys_view'
        self.surveys = 'dm.surveys'
        self.survey_id_seq = 'dm.surveys_survey_id_seq'
        self.proc_geom_to_surveys = 'dm.proc_geom_to_surveys'
        self.survey_types = 'dm.survey_types'
        self.location_types = 'dm.location_types'
        self.reports_to_surveys = 'dm.reports_to_surveys'
        self.seismic_lines_field_2d = 'dm.seismic_lines_field_2d'
        self.seismic_pols_field_3d = 'dm.seismic_pols_field_3d'
        self.seismic_datasets_view = 'dm.seismic_datasets_view'
        self.seismic_datasets = 'dm.seismic_datasets'
        self.seismic_datasets_dataset_id_seq = 'dm.seismic_datasets_dataset_id_seq'
        self.datasets_to_geometries = 'dm.datasets_to_geometries'
        self.seismic_datasets_to_transmittals = 'dm.seismic_datasets_to_transmittals'
        self.datasource_types = 'dm.datasource_types'
        self.seismic_types = 'dm.seismic_types'
        self.formats = 'dm.formats'
        self.data_quality = 'dm.data_quality'
        self.drives = 'dm.drives'
        self.drives_view = 'dm.drives_view'
        self.drives_to_datasets = 'dm.drives_to_datasets'
        self.links = 'dm.links'
        self.links_to_datasets = 'dm.links_to_datasets'
        self.transmittals = 'dm.transmittals'
        self.transmittals_view = 'dm.transmittals_view'
        self.drive_types = 'dm.drive_types'
        self.transmittal_types = 'dm.transmittal_types'
        self.wells = 'dm.wells'
        self.wells_view = 'dm.wells_view'
        self.well_attributes = 'dm.well_attributes'
        self.well_attributes_view = 'dm.well_attributes_view'
        self.well_attribute_names = 'dm.well_attribute_names'
        self.well_types = 'dm.well_types'
        self.nda = 'dm.nda'
        self.nda_view = 'dm.nda_view'

        self.datasets_to_geometries_list = None
        self.seismic_datasets_view_list = None
        self.wells_view_list = None
        self.well_attributes_view_list = None
        self.well_attributes_names_list = None
        self.aux_docs_dict = {}
        self.doc_types = None

        self.survey_id_filter = None
        self.proc_id_filter = None
        self.dataset_id_filter = None
        self.well_id_filter = None
        self.well_attr_id_filter = None

        self.selectedProcLayer = None
        self.selectedFieldLayer = None

        self.selectedProcFeaturesList = None
        self.selectedFieldFeaturesList = None
        self.selectedWellFeaturesList = None

        self.sql = ''

        self.show_datasets_for_selected_proc = True
        self.show_datasets_for_selected_surveys = True

        self.mode = None
        self.wind = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('GeoDM', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/geo_dm/icon.png'
        self.add_action(
            ':/plugins/geo_dm/procseis.png',
            text=self.tr(u'Manage Processed Seismic'),
            callback=self.run_mps,
            parent=self.iface.mainWindow())

        self.add_action(
            ':/plugins/geo_dm/fieldseis.png',
            text=self.tr(u'Manage Field Seismic'),
            callback=self.run_mfs,
            parent=self.iface.mainWindow())

        self.add_action(
            ':/plugins/geo_dm/oil-rig.png',
            text=self.tr(u'Manage Wells'),
            callback=self.run_mwd,
            parent=self.iface.mainWindow())

        self.add_action(
            ':/plugins/geo_dm/document.png',
            text=self.tr(u'Manage Auxiliary Documents'),
            callback=self.run_aux,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&Geophysical Data Management'),
                action)
            self.iface.removeToolBarIcon(action)


    def get_wells_from_postgres(self):
        sql = f"select * from {self.wells_view}"
        filter_str = self.wind.wellsFilterLineEdit.text().lower().strip().replace("'", "''")
        if filter_str:
            sql += f" where (" \
                   f"LOWER(name_ru) like '%{filter_str}%'" \
                   f" or LOWER(name_en) like '%{filter_str}%'" \
                   f" or LOWER(well_type) like '%{filter_str}%'" \
                   f" or LOWER(area_name_ru) like '%{filter_str}%'" \
                   f" or LOWER(area_name_en) like '%{filter_str}%'" \
                   f" or LOWER(well_uwi::text) like '%{filter_str}%'" \
                   f")"
        if self.well_id_filter:
            if filter_str:
                sql += ' and'
            else:
                sql += ' where'
            sql += f" well_id in ({', '.join([str(x) for x in self.well_id_filter])})"
        sql += ' order by name_ru'
        try:
            with psycopg2.connect(self.dsn, cursor_factory=DictCursor) as pgconn:
                if pgconn:
                    with pgconn.cursor() as cur:
                        cur.execute(sql)
                        self.wells_view_list = list(cur.fetchall())
                        return True
                else:
                    self.iface.messageBar().pushMessage('Ошибка', 'Не удалось загрузить данные о скважинах из базы', level=Qgis.Critical, duration=5)
                    return False
        except:
            self.iface.messageBar().pushMessage('Ошибка', 'Не удалось загрузить данные о скважинах из базы ' + sql,
                                                level=Qgis.Critical, duration=5)
            return False
                        

    def get_surveys_from_postgres(self):
        sql = f"select * from {self.surveys_view}"

        # filter_str = self.dockwind.surveyFilterLineEdit.text().lower().strip()
        filter_str = self.wind.surveyFilterLineEdit.text().lower().strip()
        if filter_str:
            sql += f" where (LOWER(name) like '%{filter_str}%' or LOWER(survey_type) like '%{filter_str}%' or year::text = '{filter_str}' " \
                   f"or LOWER(acquisition_company) like '%{filter_str}%' or LOWER(acquisition_company_shortname) like '%{filter_str}%' " \
                   f"or LOWER(acquisition_contract_number) like '%{filter_str}%' or LOWER(acquisition_contract_name) like '%{filter_str}%' " \
                   f"or LOWER(location_type) like '%{filter_str}%')"
        if self.survey_id_filter:
            if filter_str:
                sql += ' and'
            else:
                sql += ' where'
            sql += f" survey_id in ({', '.join([str(x) for x in self.survey_id_filter])})"
        sql += ' order by name'
        try:
            with psycopg2.connect(self.dsn, cursor_factory=DictCursor) as pgconn:
                if pgconn:
                    with pgconn.cursor() as cur:
                        cur.execute(sql)
                        self.surveys_view_list = list(cur.fetchall())
                        sql = f"select processed_geom_id, survey_id from {self.proc_geom_to_surveys}"
                        cur.execute(sql)
                        self.proc_geom_to_surveys_list = list(cur.fetchall())
                        return True
                else:
                    self.iface.messageBar().pushMessage('Ошибка', 'Не удалось загрузить данные о съемках из базы',
                                                    level=Qgis.Critical, duration=5)
                    return False
        except:
            self.iface.messageBar().pushMessage('Ошибка', 'Не удалось загрузить данные о съемках из базы ' + sql,
                                                level=Qgis.Critical, duration=5)
            return False


    def refresh_wells(self):
        self.wind.wellsTableWidget.clear()
        self.wind.wellsTableWidget.setRowCount(0)
        self.wind.wellsTableWidget.setColumnCount(3)
        self.wind.wellsTableWidget.setHorizontalHeaderLabels(['Название', 'Name', 'Тип'])
        header = self.wind.wellsTableWidget.horizontalHeader()
        header.resizeSection(0, 125)
        header.resizeSection(1, 125)
        header.resizeSection(2, 75)
        if self.get_wells_from_postgres():
            for i, well_row in enumerate(self.wells_view_list):
                self.wind.wellsTableWidget.insertRow(i)
                citem = QTableWidgetItem(well_row['name_ru'])
                citem.setToolTip(str(well_row['name_ru']))
                citem.setFlags(Qt.ItemIsSelectable | Qt.ItemIsEnabled)
                self.wind.wellsTableWidget.setItem(i, 0, citem)
                citem = QTableWidgetItem(well_row['name_en'])
                citem.setToolTip(str(well_row['name_en']))
                citem.setFlags(Qt.ItemIsSelectable | Qt.ItemIsEnabled)
                self.wind.wellsTableWidget.setItem(i, 1, citem)
                citem = QTableWidgetItem(well_row['well_type'])
                citem.setToolTip(str(well_row['well_type']))
                citem.setFlags(Qt.ItemIsSelectable | Qt.ItemIsEnabled)
                self.wind.wellsTableWidget.setItem(i, 2, citem)


    def refresh_surveys(self):
        # self.dockwind.surveyTableWidget.clear()
        # self.dockwind.surveyTableWidget.setRowCount(0)
        # self.dockwind.surveyTableWidget.setColumnCount(4)
        # self.dockwind.surveyTableWidget.setHorizontalHeaderLabels(['Название', 'Тип', 'Исполнитель', 'Год'])
        # header = self.dockwind.surveyTableWidget.horizontalHeader()
        self.wind.surveyTableWidget.clear()
        self.wind.surveyTableWidget.setRowCount(0)
        self.wind.surveyTableWidget.setColumnCount(4)
        self.wind.surveyTableWidget.setHorizontalHeaderLabels(['Название', 'Тип', 'Исполнитель', 'Год'])
        header = self.wind.surveyTableWidget.horizontalHeader()

        header.resizeSection(0, 100)
        header.resizeSection(1, 5)
        header.resizeSection(2, 100)
        header.resizeSection(3, 20)
        if self.get_surveys_from_postgres():
            for i, survey_row in enumerate(self.surveys_view_list):
                self.wind.surveyTableWidget.insertRow(i)
                citem = QTableWidgetItem(survey_row['name'])
                citem.setToolTip(str(survey_row['name']))
                citem.setFlags(Qt.ItemIsSelectable | Qt.ItemIsEnabled)
                self.wind.surveyTableWidget.setItem(i, 0, citem)
                citem = QTableWidgetItem(survey_row['survey_type'])
                citem.setToolTip(str(survey_row['survey_type']))
                citem.setFlags(Qt.ItemIsSelectable | Qt.ItemIsEnabled)
                self.wind.surveyTableWidget.setItem(i, 1, citem)
                citem = QTableWidgetItem(survey_row['acquisition_company_shortname'])
                citem.setToolTip(str(survey_row['acquisition_company']))
                citem.setFlags(Qt.ItemIsSelectable | Qt.ItemIsEnabled)
                self.wind.surveyTableWidget.setItem(i, 2, citem)
                citem = QTableWidgetItem(str(survey_row['year']))
                citem.setFlags(Qt.ItemIsSelectable | Qt.ItemIsEnabled)
                self.wind.surveyTableWidget.setItem(i, 3, citem)


    def select_wells_by_geometry(self):
        if all([self.mode == 'wells', self.selectedWellsLayer, self.selectedWellFeaturesList]):
            if 'well_id' in [f.name() for f in self.selectedWellsLayer.fields()]:
                selected_features_well_ids_list = list(set([f.attribute('well_id') for f in self.selectedWellFeaturesList]))
            else:
                selected_features_well_ids_list = []
        else:
            self.iface.messageBar().pushMessage('Ошибка', f"Нужно выбрать слой и объекты в нем",
                                            level=Qgis.Warning,
                                            duration=5)
            selected_features_well_ids_list = []
        [x.setSelected(False) for x in self.wind.wellsTableWidget.selectedItems()]
        self.wind.wellsTableWidget.clear()
        self.wind.wellsTableWidget.setHorizontalHeaderLabels(['Название', 'Name', 'Тип'])
        self.wind.wellsTableWidget.setRowCount(0)

        if selected_features_well_ids_list:
            self.well_id_filter = selected_features_well_ids_list
        else:
            self.well_id_filter = [-1]
        self.refresh_wells()
        self.well_id_filter = None


    def select_surveys_by_geometry(self):
        if all([self.mode == 'proc', self.selectedProcLayer, self.selectedProcFeaturesList]):
            # if self.selectedProcLayer != None and len(self.selectedProcFeaturesList) > 0:
            if 'proc_id' in [f.name() for f in self.selectedProcLayer.fields()]:
                if 'pol_id' in [f.name() for f in self.selectedProcLayer.fields()]:
                    selected_features_ids_list = list(set([f.attribute('pol_id') for f in self.selectedProcFeaturesList]))
                elif 'line_id' in [f.name() for f in self.selectedProcLayer.fields()]:
                    selected_features_ids_list = list(set([f.attribute('line_id') for f in self.selectedProcFeaturesList]))
                else:
                    selected_features_ids_list = []
                selected_features_survey_ids = [y[1] for y in self.proc_geom_to_surveys_list if y[0] in selected_features_ids_list]
            # else:
            #     selected_features_survey_ids = []
            else:
                selected_features_survey_ids = []
        elif all([self.mode == 'field', self.selectedFieldLayer, self.selectedFieldFeaturesList]):
            if 'survey_id' in [f.name() for f in self.selectedFieldLayer.fields()]:
                selected_features_survey_ids = list(set([f.attribute('survey_id') for f in self.selectedFieldFeaturesList]))
            else:
                selected_features_survey_ids = []
        else:
            self.iface.messageBar().pushMessage('Ошибка', f"Нужно выбрать слой и объекты в нем",
                                            level=Qgis.Warning,
                                            duration=5)
            selected_features_survey_ids = []

        # if selected_features_survey_ids:
        [x.setSelected(False) for x in self.wind.surveyTableWidget.selectedItems()]
        self.wind.surveyTableWidget.clear()
        self.wind.surveyTableWidget.setHorizontalHeaderLabels(['Название', 'Тип', 'Исполнитель', 'Год'])
        self.wind.surveyTableWidget.setRowCount(0)

        if selected_features_survey_ids:
            self.survey_id_filter = selected_features_survey_ids
        else:
            self.survey_id_filter = [-1]
        self.refresh_surveys()
        self.survey_id_filter = None
        # self.refresh_surveys(selected_survey_indexes)
        # else:
        #     self.iface.messageBar().pushMessage('Ошибка', f"Нужно выбрать слой и объекты в нем",
        #                                     level=Qgis.Warning,
        #                                     duration=5)


    def select_geometry_by_wells(self):
        if self.mode == 'wells':
            selected_well_rows = list(set([x.row() for x in self.wind.wellsTableWidget.selectedItems()]))
            geom_lyr = self.selectedWellsLayer
        else:
            selected_well_rows = None
            geom_lyr = None
        if selected_well_rows and geom_lyr:
            selected_well_ids = [self.wells_view_list[i]['well_id'] for i in selected_well_rows]
            if all([self.mode == 'wells',
                    selected_well_ids,
                    geom_lyr,
                    'well_id' in [f.name() for f in geom_lyr.fields()]]):
                geom_str = ', '.join([str(x) for x in selected_well_ids])
                query = f'"well_id" in ({geom_str})'
            else:
                query = None
            geom_lyr.removeSelection()
            # self.iface.messageBar().pushMessage('query', query, level=Qgis.Success, duration=5)
            if query:
                geom_lyr.selectByExpression(query)
                if geom_lyr.selectedFeatures():
                    project_crs = QgsCoordinateReferenceSystem(QgsProject.instance().crs())
                    layer_crs = geom_lyr.crs()
                    lyr2proj = QgsCoordinateTransform(layer_crs, project_crs, QgsProject.instance())
                    box = lyr2proj.transformBoundingBox(geom_lyr.boundingBoxOfSelected())
                    self.iface.mapCanvas().setExtent(box)
                    self.iface.mapCanvas().refresh()
            else:
                self.iface.messageBar().pushMessage('Ошибка', f"Нужно выбрать скважины и слой с геометрией",
                                                    level=Qgis.Warning, duration=5)


    def select_geometry_by_surveys(self):
        # selected_survey_rows = list(set([x.row() for x in self.dockwind.surveyTableWidget.selectedItems()]))
        if self.mode in ('proc', 'field'):
            selected_survey_rows = list(set([x.row() for x in self.wind.surveyTableWidget.selectedItems()]))
        else:
            selected_survey_rows = None
        if self.mode == 'proc':
            geom_lyr = self.selectedProcLayer
        elif self.mode == 'field':
            geom_lyr = self.selectedFieldLayer
        else:
            geom_lyr = None
        # self.iface.messageBar().pushMessage('selected_survey_rows', ', '.join([str(x) for x in selected_survey_rows]), level=Qgis.Success, duration=5)
        if selected_survey_rows and geom_lyr:
            selected_survey_ids = [self.surveys_view_list[i]['survey_id'] for i in selected_survey_rows]
            # self.iface.messageBar().pushMessage('selected_survey_ids', ', '.join([str(x) for x in selected_survey_ids]), level=Qgis.Success, duration=5)

            if self.mode == 'proc' and selected_survey_ids and geom_lyr and \
                    any(['line_id' in [f.name() for f in geom_lyr.fields()],
                         'pol_id' in [f.name() for f in geom_lyr.fields()]]):
                geom_string = ', '.join([str(x['processed_geom_id']) for x in self.proc_geom_to_surveys_list if x['survey_id'] in selected_survey_ids])

                if 'line_id' in [f.name() for f in self.selectedProcLayer.fields()]:
                    gfield = 'line_id'
                else:
                    gfield = 'pol_id'
                query = f'"{gfield}" in ({geom_string})'
            elif all([self.mode == 'field', selected_survey_ids, geom_lyr, 'survey_id' in [f.name() for f in geom_lyr.fields()]]):
                geom_string = ', '.join([str(x['survey_id']) for x in self.surveys_view_list if x['survey_id'] in selected_survey_ids])
                query = f'"survey_id" in ({geom_string})'
            else:
                query = None
            geom_lyr.removeSelection()
            # self.iface.messageBar().pushMessage('query', query, level=Qgis.Success, duration=5)
            if query:
                geom_lyr.selectByExpression(query)
                if geom_lyr.selectedFeatures():
                    project_crs = QgsCoordinateReferenceSystem(QgsProject.instance().crs())
                    layer_crs = geom_lyr.crs()
                    lyr2proj = QgsCoordinateTransform(layer_crs, project_crs, QgsProject.instance())
                    box = lyr2proj.transformBoundingBox(geom_lyr.boundingBoxOfSelected())
                    self.iface.mapCanvas().setExtent(box)
                    self.iface.mapCanvas().refresh()
            else:
                self.iface.messageBar().pushMessage('Ошибка', f"Нужно выбрать съемку(и) и слой с геометрией", level=Qgis.Warning, duration=5)


    def link_selected_surveys_to_geometry(self):
        # selected_cells = self.dockwind.surveyTableWidget.selectedItems()
        if self.mode in ('proc', 'field'):
            selected_cells = self.wind.surveyTableWidget.selectedItems()
            selected_rows = list(set([x.row() for x in selected_cells]))
        else:
            selected_cells = None
            selected_rows = None
        if not selected_rows:
            self.iface.messageBar().pushMessage('Ошибка', 'Нужно выбрать одну или несколько съемок', level=Qgis.Warning, duration=3)
        else:
            survey_ids = [self.surveys_view_list[i]['survey_id'] for i in selected_rows]
            sql = None
            geom_ids = None
            if all([self.mode == 'proc', self.selectedProcLayer, self.selectedProcFeaturesList]):
                if any(['line_id' in [f.name() for f in self.selectedProcLayer.fields()],
                        'pol_id' in [f.name() for f in self.selectedProcLayer.fields()]]):
                    # if self.selectedProcLayer != None and len(self.selectedProcFeaturesList) > 0 and \
                    #         any(['line_id' in [f.name() for f in self.selectedProcLayer.fields()],
                    #              'pol_id' in [f.name() for f in self.selectedProcLayer.fields()]]):
                    if 'line_id' in [f.name() for f in self.selectedProcLayer.fields()]:
                        gfield = 'line_id'
                        table = self.seismic_lines_processed_2d
                    else:
                        gfield = 'pol_id'
                        table = self.seismic_pols_processed_3d
                    geom_ids = [x[gfield] for x in self.selectedProcFeaturesList]
                    sql = f"insert into {self.proc_geom_to_surveys}(processed_geom_id, survey_id) values"
                    # sql += ', '.join['(' + str(g) + ', ' + str(s) + ')' for g, s in geom_ids, survey_ids]
                    values_to_insert = []
                    for geom_id in geom_ids:
                        for survey_id in survey_ids:
                            values_to_insert.append(f"({str(geom_id)}, {str(survey_id)})")
                    sql += ', '.join(values_to_insert)
                    self.sql = sql
                    # self.iface.messageBar().pushMessage('sql', sql, level=Qgis.Success, duration=5)
            elif all([len(survey_ids) == 1, self.mode == 'field', self.selectedFieldLayer, self.selectedFieldFeaturesList]):
                if any(['field_line_id' in [f.name() for f in self.selectedFieldLayer.fields()],
                         'pol_id' in [f.name() for f in self.selectedFieldLayer.fields()]]):
                    if 'field_line_id' in [f.name() for f in self.selectedFieldLayer.fields()]:
                        gfield = 'field_line_id'
                        table = self.seismic_lines_field_2d
                    else:
                        gfield = 'pol_id'
                        table = self.seismic_pols_field_3d
                    geom_ids = [x[gfield] for x in self.selectedFieldFeaturesList]
                    sql = f"update {table} set survey_id = {str(survey_ids[0])} where {gfield} in ({', '.join([str(x) for x in geom_ids])});"
                    # self.iface.messageBar().pushMessage('sql', sql, level=Qgis.Success, duration=3)
                    self.sql = sql
            elif all([len(survey_ids) > 1, self.mode == 'field']):
                self.iface.messageBar().pushMessage('Ошибка', 'Для присвоения съемки полевой геометрии ужно выбрать одну съемку и хотя бы одну геометрию',
                                                    level=Qgis.Warning, duration=3)
            else:
                if self.mode == 'proc':
                    self.iface.messageBar().pushMessage('Ошибка',
                                                        'Для присвоения съемки обработанной геометрии ужно выбрать хотя бы одну съемку и хотя бы одну геометрию',
                                                        level=Qgis.Warning, duration=3)
                elif self.mode == 'field':
                    self.iface.messageBar().pushMessage('Ошибка',
                                                    'Для присвоения съемки полевой геометрии ужно выбрать одну съемку и хотя бы одну геометрию',
                                                    level=Qgis.Warning, duration=3)
                else:
                    self.iface.messageBar().pushMessage('Ошибка',
                                                        'Для связывания съемки и геометрии ужно выбрать хотя бы одну съемку и хотя бы одну геометрию',
                                                        level=Qgis.Warning, duration=3)
            if sql:
                mwidget = self.iface.messageBar().createMessage(f"Связать {str(len(survey_ids))} съемок с {str(len(geom_ids))} объектами в активном слое?")
                mbutton = QPushButton(mwidget)
                mbutton.setText('Подтвердить')
                mbutton.pressed.connect(self.execute_sql)
                mwidget.layout().addWidget(mbutton)
                self.iface.messageBar().pushWidget(mwidget, Qgis.Warning, duration=5)


    def unlink_selected_surveys_from_geometry(self):
        if self.mode in ('proc', 'field'):
            selected_cells = self.wind.surveyTableWidget.selectedItems()
            selected_rows = list(set([x.row() for x in selected_cells]))
        else:
            selected_cells = None
            selected_rows = None
        if not selected_rows:
            self.iface.messageBar().pushMessage('Ошибка', 'Нужно выбрать одну или несколько съемок', level=Qgis.Warning, duration=3)
        else:
            survey_ids = [self.surveys_view_list[i]['survey_id'] for i in selected_rows]
            sql = None

            if all([self.mode == 'proc', self.selectedProcLayer, self.selectedProcFeaturesList]):
                if any(['line_id' in [f.name() for f in self.selectedProcLayer.fields()],
                         'pol_id' in [f.name() for f in self.selectedProcLayer.fields()]]):
                    if 'line_id' in [f.name() for f in self.selectedProcLayer.fields()]:
                        gfield = 'line_id'
                        table = self.seismic_lines_processed_2d
                    else:
                        gfield = 'pol_id'
                        table = self.seismic_pols_processed_3d
                    geom_ids = [x[gfield] for x in self.selectedProcFeaturesList]
                    sql = f"delete from {self.proc_geom_to_surveys} where "
                    # sql += ', '.join['(' + str(g) + ', ' + str(s) + ')' for g, s in geom_ids, survey_ids]
                    values_to_delete = []
                    for geom_id in geom_ids:
                        for survey_id in survey_ids:
                            values_to_delete.append(f"(processed_geom_id = {str(geom_id)} and survey_id = {str(survey_id)})")
                    sql += ' or '.join(values_to_delete)
                    self.sql = sql
                    # self.iface.messageBar().pushMessage('sql', sql, level=Qgis.Success, duration=5)
                    mwidget = self.iface.messageBar().createMessage(f"Удалить связь {str(len(survey_ids))} съемок и {str(len(geom_ids))} объектов в активном слое?")
                    mbutton = QPushButton(mwidget)
                    mbutton.setText('Подтвердить')
                    mbutton.pressed.connect(self.execute_sql)
                    mwidget.layout().addWidget(mbutton)
                    self.iface.messageBar().pushWidget(mwidget, Qgis.Warning, duration=5)
            elif all([self.mode == 'field', self.selectedFieldLayer, self.selectedFieldFeaturesList]):
                if any(['field_line_id' in [f.name() for f in self.selectedFieldLayer.fields()],
                        'pol_id' in [f.name() for f in self.selectedFieldLayer.fields()]]):
                    if 'field_line_id' in [f.name() for f in self.selectedFieldLayer.fields()]:
                        gfield = 'field_line_id'
                        table = self.seismic_lines_field_2d
                    else:
                        gfield = 'pol_id'
                        table = self.seismic_pols_field_3d
                    geom_ids = [x[gfield] for x in self.selectedFieldFeaturesList]
                    sql = f"update {table} set survey_id = NULL where {gfield} in ({', '.join([str(x) for x in geom_ids])}) and survey_id in ({', '.join([str(y) for y in survey_ids])});"
                    self.sql = sql
                    mwidget = self.iface.messageBar().createMessage(
                        f"Удалить связь {str(len(survey_ids))} съемок и {str(len(geom_ids))} объектов в активном слое?")
                    mbutton = QPushButton(mwidget)
                    mbutton.setText('Подтвердить')
                    mbutton.pressed.connect(self.execute_sql)
                    mwidget.layout().addWidget(mbutton)
                    self.iface.messageBar().pushWidget(mwidget, Qgis.Warning, duration=5)
            else:
                self.iface.messageBar().pushMessage('Ошибка', 'Нужно выбрать хотя бы одну геометрию',
                                                    level=Qgis.Warning,
                                                    duration=3)


    def get_proc_from_postgres(self):
        try:
            sql = f"select * from {self.processings_view}"
            filter_str = self.dockwind.procFilterLineEdit.text().lower().strip()
            if filter_str:
                sql += f" where (LOWER(name) like '%{filter_str}%' or LOWER(proc_type) like '%{filter_str}%' or year::text = '{filter_str}' " \
                       f"or LOWER(company_name) like '%{filter_str}%' or LOWER(company_shortname) like '%{filter_str}%' " \
                       f"or LOWER(contract_number) like '%{filter_str}%' or LOWER(contract_name) like '%{filter_str}%' " \
                       f"or LOWER(report_name) like '%{filter_str}%' or LOWER(project_name) like '%{filter_str}%')"
            if self.proc_id_filter:
                if filter_str:
                    sql += ' and'
                else:
                    sql += ' where'
                sql += f" proc_id in ({', '.join([str(x) for x in self.proc_id_filter])})"
            sql += ' order by name'
            with psycopg2.connect(self.dsn, cursor_factory=DictCursor) as pgconn:
                if pgconn:
                    # with self.pgconn.cursor() as cur:
                    with pgconn.cursor() as cur:
                        # cur = pgconn.cursor()
                        # cur.execute(f"select * from {self.processings_view} order by name")
                        cur.execute(sql)
                        # processings = cur.fetchall()
                        self.proc_list = list(cur.fetchall())
                        # cur.close()
                        # dsnf.close()
                        return True
                else:
                    self.iface.messageBar().pushMessage('Ошибка', 'Не удалось загрузить данные об обработках из базы',
                                                        level=Qgis.Critical, duration=5)
                    return False
        except:
            self.iface.messageBar().pushMessage('Ошибка', 'Не удалось загрузить данные об обработках из базы',
                                                level=Qgis.Critical, duration=5)
            return False
        pass


    def refresh_processings(self):
        self.dockwind.procTableWidget.clear()
        self.dockwind.procTableWidget.setRowCount(0)
        self.dockwind.procTableWidget.setColumnCount(3)
        self.dockwind.procTableWidget.setHorizontalHeaderLabels(['Название', 'Автор', 'Год'])
        header = self.dockwind.procTableWidget.horizontalHeader()
        header.resizeSection(0, 200)
        header.resizeSection(1, 100)
        header.resizeSection(2, 20)
        # processings = self.get_proc_from_postgres()
        if self.get_proc_from_postgres():
        # if processings[0]:
        #     for i, proc_row in enumerate(processings[1]):
        #     self.iface.messageBar().pushMessage('Список обработок', ' '.join([str(x) for x in self.proc_list[0]]), level=Qgis.Success, duration=5)
            for i, proc_row in enumerate(self.proc_list):
                self.dockwind.procTableWidget.insertRow(i)
                citem = QTableWidgetItem(proc_row['name'])
                citem.setToolTip(str(proc_row['name']))
                citem.setFlags(Qt.ItemIsSelectable | Qt.ItemIsEnabled)

                self.dockwind.procTableWidget.setItem(i, 0, citem)
                citem = QTableWidgetItem(proc_row['company_shortname'])
                citem.setToolTip(str(proc_row['company_name']))
                citem.setFlags(Qt.ItemIsSelectable | Qt.ItemIsEnabled)
                self.dockwind.procTableWidget.setItem(i, 1, citem)
                citem = QTableWidgetItem(str(proc_row['year']))
                # citem.setToolTip(str(proc_row[6]))
                citem.setFlags(Qt.ItemIsSelectable | Qt.ItemIsEnabled)
                self.dockwind.procTableWidget.setItem(i, 2, citem)


    def execute_sql(self):
        try:

            # with open('.pgdsn', encoding='utf-8') as dsnf:
            #     dsn = dsnf.read().replace('\n', '')
            with psycopg2.connect(self.dsn, cursor_factory=DictCursor) as pgconn:

                # with self.pgconn.cursor() as cur:
                with pgconn.cursor() as cur:
                    cur.execute(self.sql)
                    # self.pgconn.commit()
                    pgconn.commit()

                    # Это чтобы обновить атрибуты выбранных объектов
                    if self.mode == 'proc':
                        self.set_selected_proc_features_list()
                        self.refresh_processings()
                        self.refresh_surveys()
                        self.refresh_datasets()
                    elif self.mode == 'field':
                        self.set_selected_field_features_list()
                        self.refresh_surveys()
                        self.refresh_datasets()
                    elif self.mode == 'wells':
                        self.refresh_wells()
                        self.refresh_well_attrs()

                    # Это чтобы убрать лишние уведомления
                    [self.iface.messageBar().popWidget(x) for x in self.iface.messageBar().items()]

                    self.iface.messageBar().pushMessage('Запрос выполнен', self.sql,
                                                        level=Qgis.Success, duration=3)
                    # [self.iface.messageBar().popWidget(x) for x in self.iface.messageBar().items()]
        except:
            self.iface.messageBar().pushMessage('Запрос', f"{self.sql} не выполнен",
                                                level=Qgis.Critical, duration=5)

        self.sql = ''
        if self.mode == 'proc':
            self.refresh_processings()
            self.refresh_datasets()
            self.refresh_surveys()
        elif self.mode == 'field':
            self.refresh_surveys()


    def update_proc_for_selected_features(self):
        selected_cells = self.dockwind.procTableWidget.selectedItems()
        selected_rows = list(set([x.row() for x in selected_cells]))
        if len(selected_rows) != 1:
            self.iface.messageBar().pushMessage('Ошибка', 'Нужно выбрать один проект по обработке', level=Qgis.Warning, duration=3)
        else:
            proc_id = self.proc_list[selected_rows[0]]['proc_id']
            # self.iface.messageBar().pushMessage('Информация', f"Выбрана обработка {str(proc_id)}", level=Qgis.Success, duration=5)
            if self.selectedProcLayer != None and len(self.selectedProcFeaturesList) > 0:
                if 'line_id' in [f.name() for f in self.selectedProcLayer.fields()]:
                    # self.iface.messageBar().pushMessage('Информация', f"Выбран слой с сейсмикой 2D",
                    #                                     level=Qgis.Success, duration=5)
                    if len(self.selectedProcFeaturesList) > 0:
                        line_id_list = [x['line_id'] for x in self.selectedProcFeaturesList]
                        sql = f"update {self.seismic_lines_processed_2d} set proc_id = {str(proc_id)} where line_id in ({', '.join([str(y) for y in line_id_list])});"
                        self.sql = sql

                        # self.iface.messageBar().pushMessage('Запрос', sql,
                        #                                     level=Qgis.Success, duration=5)
                        mwidget = self.iface.messageBar().createMessage(f"Изменить обработку для {len(line_id_list)} объектов?")
                        mbutton = QPushButton(mwidget)
                        mbutton.setText('Подтвердить')
                        mbutton.pressed.connect(self.execute_sql)
                        mwidget.layout().addWidget(mbutton)
                        self.iface.messageBar().pushWidget(mwidget, Qgis.Warning, duration=3)

                elif 'pol_id' in [f.name() for f in self.selectedProcLayer.fields()]:
                    # self.iface.messageBar().pushMessage('Информация', f"Выбран слой с сейсмикой 3D",
                    #                                     level=Qgis.Success, duration=5)
                    if len(self.selectedProcFeaturesList) > 0:
                        pol_id_list = [x['pol_id'] for x in self.selectedProcFeaturesList]
                        sql = f"update {self.seismic_pols_processed_3d} set proc_id = {str(proc_id)} where pol_id in ({', '.join([str(y) for y in pol_id_list])});"
                        self.sql = sql

                        # self.iface.messageBar().pushMessage('Запрос', sql,
                        #                                     level=Qgis.Success, duration=5)
                        mwidget = self.iface.messageBar().createMessage(
                            f"Изменить обработку для {len(pol_id_list)} объектов?")
                        mbutton = QPushButton(mwidget)
                        mbutton.setText('Подтвердить')
                        mbutton.pressed.connect(self.execute_sql)
                        mwidget.layout().addWidget(mbutton)
                        self.iface.messageBar().pushWidget(mwidget, Qgis.Warning, duration=3)
            else:
                self.iface.messageBar().pushMessage('Ошибка', f"Нужно выбрать слой и объекты в нем", level=Qgis.Warning, duration=5)


    def clear_proc_for_selected_geometry(self):
        # selected_cells = self.dockwind.procTableWidget.selectedItems()
        # selected_rows = list(set(x.row() for x in selected_cells))
        # if selected_rows:
        #     proc_ids = [self.proc_list[i]['proc_id'] for i in selected_rows]
        if self.selectedProcLayer and self.selectedProcFeaturesList and \
            any(['line_id' in [f.name() for f in self.selectedProcLayer.fields()],
                 'pol_id' in [f.name() for f in self.selectedProcLayer.fields()]]):
            if 'line_id' in [f.name() for f in self.selectedProcLayer.fields()]:
                glayer = self.seismic_lines_processed_2d
                gfield = 'line_id'
                table = self.seismic_lines_processed_2d
            else:
                glayer = self.seismic_pols_processed_3d
                gfield = 'pol_id'
                table = self.seismic_pols_processed_3d
            geom_ids = [x[gfield] for x in self.selectedProcFeaturesList]
            self.sql = f"update {glayer} set proc_id = NULL where {gfield} in ({', '.join([str(x) for x in geom_ids])});"
            mwidget = self.iface.messageBar().createMessage(
                f"Отвязать от обработки {str(len(geom_ids))} объектов в активном слое? Это приведет к обнулению поля 'Обработка' у этих объектов. "
                f"В дальнейшем Вы сможене привязать геометрию к другой обработке.")
            mbutton = QPushButton(mwidget)
            mbutton.setText('Подтвердить')
            mbutton.pressed.connect(self.execute_sql)
            mwidget.layout().addWidget(mbutton)
            self.iface.messageBar().pushWidget(mwidget, Qgis.Warning, duration=5)
        else:
            self.iface.messageBar().pushMessage('Ошибка', 'Нужно выбрать хотя бы одну геометрию', level=Qgis.Warning, duration=5)
        # else:
        #     self.iface.messageBar().pushMessage('Ошибка', 'Нужно выбрать хотя бы одну обработку и хотя бы одну геометрию', level=Qgis.Warning,
        #


    def display_selected_geometry_count(self):
        if self.selectedProcFeaturesList:
            self.dockwind.selectedGeometryLabel.setText(f"Выбрано объектов: {len(self.selectedProcFeaturesList)}")


    def display_selected_field_geometry_count(self):
        if self.selectedFieldFeaturesList:
            self.dockwindfield.selectedGeometryLabel.setText(f"Выбрано объектов: {len(self.selectedFieldFeaturesList)}")


    def display_selected_wells_geometry_count(self):
        if self.selectedWellFeaturesList:
            self.dockwindwells.selectedGeometryLabel.setText(f"Выбрано объектов: {len(self.selectedWellFeaturesList)}")


    def set_selected_field_features_list(self):
        selectedLayer = self.iface.layerTreeView().currentLayer()
        if selectedLayer:
            if selectedLayer.type() == QgsMapLayerType.VectorLayer:
                if all(['survey_id' in [f.name() for f in selectedLayer.fields()], selectedLayer.isSpatial()]):
                    self.selectedFieldLayer = selectedLayer
                    self.dockwindfield.selectedLayerLabel.setText(selectedLayer.name())
                    self.selectedFieldFeaturesList = self.selectedFieldLayer.selectedFeatures()
                    self.display_selected_field_geometry_count()
                else:
                    self.selectedFieldLayer = None
                    self.selectedFieldFeaturesList = []
                    self.dockwindfield.selectedLayerLabel.setText('Нужно выбрать векторный слой!')
            else:
                self.selectedFieldLayer = None
                self.selectedFieldFeaturesList = []
                self.dockwindfield.selectedLayerLabel.setText('Нужно выбрать векторный слой!')
                # self.iface.messageBar().pushMessage('Ошибка', 'Необходимо выбрать один слой в таблице содержания, содержащий геометрию обработанной сейсмики',
                #                                     level=Qgis.Warning, duration=3)
                self.display_selected_field_geometry_count()


    def set_selected_well_features_list(self):
        selectedLayer = self.iface.layerTreeView().currentLayer()
        if selectedLayer:
            if selectedLayer.type() == QgsMapLayerType.VectorLayer:
                if all(['well_id' in [f.name() for f in selectedLayer.fields()], selectedLayer.isSpatial()]):
                    self.selectedWellsLayer = selectedLayer
                    self.dockwindwells.selectedLayerLabel.setText(selectedLayer.name())
                    self.selectedWellFeaturesList = self.selectedWellsLayer.selectedFeatures()
                    self.display_selected_wells_geometry_count()
                else:
                    self.selectedWellsLayer = None
                    self.selectedWellFeaturesList = []
                    self.dockwindwells.selectedLayerLabel.setText('Нужно выбрать векторный слой!')
            else:
                self.selectedWellsLayer = None
                self.selectedWellFeaturesList = []
                self.dockwindwells.selectedLayerLabel.setText('Нужно выбрать векторный слой!')
                # self.iface.messageBar().pushMessage('Ошибка', 'Необходимо выбрать один слой в таблице содержания, содержащий геометрию обработанной сейсмики',
                #                                     level=Qgis.Warning, duration=3)
                self.display_selected_wells_geometry_count()


    def set_selected_proc_features_list(self):
        selectedLayer = self.iface.layerTreeView().currentLayer()
        if selectedLayer:
            if selectedLayer.type() == QgsMapLayerType.VectorLayer:
                if all(['proc_id' in [f.name() for f in selectedLayer.fields()], selectedLayer.isSpatial()]):
                    self.selectedProcLayer = selectedLayer
                    self.dockwind.selectedLayerLabel.setText(selectedLayer.name())
                    self.selectedProcFeaturesList = self.selectedProcLayer.selectedFeatures()
                    self.display_selected_geometry_count()
                else:
                    self.selectedProcLayer = None
                    self.selectedProcFeaturesList = []
                    self.dockwind.selectedLayerLabel.setText('Нужно выбрать векторный слой!')
            else:
                self.selectedProcLayer = None
                self.selectedProcFeaturesList = []
                self.dockwind.selectedLayerLabel.setText('Нужно выбрать векторный слой!')
                # self.iface.messageBar().pushMessage('Ошибка', 'Необходимо выбрать один слой в таблице содержания, содержащий геометрию обработанной сейсмики',
                #                                     level=Qgis.Warning, duration=3)
                self.display_selected_geometry_count()


    def update_company(self):
        self.updatecompdlg = AddCompDialog()
        self.updatecompdlg.selected_company = None

        def get_selected_company():
            selected_company_rows = list(set([x.row() for x in self.wind.auxDocsTableWidget.selectedItems()]))
            if selected_company_rows:
                if len(selected_company_rows) == 1:
                    self.updatecompdlg.selected_company = self.aux_docs_dict['docs_list'][selected_company_rows[0]]
                else:
                    self.iface.messageBar().pushMessage('Ошибка', 'Нужно выбрать одну компанию', level=Qgis.Warning,
                                                        duration=3)
            else:
                self.iface.messageBar().pushMessage('Ошибка', 'Нужно выбрать одну компанию', level=Qgis.Warning,
                                                    duration=3)

        def reload_company_data():
            self.updatecompdlg.companyFullNameInput.setText(self.updatecompdlg.selected_company['name'])
            self.updatecompdlg.companyShortNameInput.setText(self.updatecompdlg.selected_company['shortname'])

        def generate_and_execute_sql():
            new_company_name = self.updatecompdlg.companyFullNameInput.text().strip().replace("'", "''")
            new_company_shortname = self.updatecompdlg.companyShortNameInput.text().strip().replace("'", "''")
            sql = f"update {self.companies} set name = '{new_company_name}', shortname = '{new_company_shortname}' where company_id = {str(self.updatecompdlg.selected_company['company_id'])}"
            self.sql = sql
            mwidget = self.iface.messageBar().createMessage(
                f"Изменить компанию {self.updatecompdlg.selected_company['name']}?")
            mbutton = QPushButton(mwidget)
            mbutton.setText('Подтвердить')
            mbutton.pressed.connect(self.execute_sql)
            self.updatecompdlg.accept()
            mwidget.layout().addWidget(mbutton)
            self.iface.messageBar().pushWidget(mwidget, Qgis.Warning, duration=5)

        get_selected_company()
        if self.updatecompdlg.selected_company:
            reload_company_data()
            self.updatecompdlg.setWindowTitle('Изменить Организацию')
            self.updatecompdlg.insertCompanyButton.setText('Изменить Организацию')
            self.updatecompdlg.insertCompanyButton.clicked.connect(generate_and_execute_sql)
            self.updatecompdlg.show()


    def update_contract(self):
        self.updatecontractdlg = AddContractDialog()
        self.updatecontractdlg.contractCustomerRefreshButton.setIcon(QIcon(':/plugins/geo_dm/refresh.png'))
        self.updatecontractdlg.contractContractorRefreshButton.setIcon(QIcon(':/plugins/geo_dm/refresh.png'))
        self.updatecontractdlg.selected_contract = None
        self.updatecontractdlg.contract_types = None
        self.updatecontractdlg.customer_companies = None
        self.updatecontractdlg.contractor_companies = None
        self.updatecontractdlg.contracts = None

        def get_selected_contract():
            selected_contract_rows = list(set([x.row() for x in self.wind.auxDocsTableWidget.selectedItems()]))
            if selected_contract_rows:
                if len(selected_contract_rows) == 1:
                    self.updatecontractdlg.selected_contract = self.aux_docs_dict['docs_list'][selected_contract_rows[0]]

                else:
                    self.iface.messageBar().pushMessage('Ошибка', 'Нужно выбрать один договор', level=Qgis.Warning,
                                                        duration=3)
            else:
                self.iface.messageBar().pushMessage('Ошибка', 'Нужно выбрать один договор', level=Qgis.Warning,
                                                    duration=3)

        def reload_contract_number():
            if self.updatecontractdlg.selected_contract['number']:
                self.updatecontractdlg.contractNumberInput.setText(self.updatecontractdlg.selected_contract['number'])

        def reload_contract_name():
            if self.updatecontractdlg.selected_contract['name']:
                self.updatecontractdlg.contractNameInput.setText(self.updatecontractdlg.selected_contract['name'])

        def reload_contract_types():
            self.updatecontractdlg.contractTypeInput.clear()
            sql = f"select * from {self.contract_types};"
            try:
                with psycopg2.connect(self.dsn, cursor_factory=DictCursor) as pgconn:
                    with pgconn.cursor() as cur:
                        cur.execute(sql)
                        self.updatecontractdlg.contract_types = list(cur.fetchall())
                self.updatecontractdlg.contractTypeInput.addItems([row['name'] for row in self.updatecontractdlg.contract_types])
                # if self.updatecontractdlg.selected_contract['contract_type_id']:
                #     self.updatecontractdlg.contractTypeInput.setCurrentText(self.updatecontractdlg.selected_contract['contract_type'])
            except:
                self.iface.messageBar().pushMessage('Ошибка', 'Не удалось загрузить список типов договоров из базы', level=Qgis.Critical, duration=3)

        def reload_contract_date():
            contract_date = self.updatecontractdlg.selected_contract['date']
            if contract_date:
                self.updatecontractdlg.contractDateInput.setDate(QDate(contract_date.year, contract_date.month, contract_date.day))

        def reload_customers():
            self.updatecontractdlg.contractCustomerInput.clear()
            sql = f"select * from {self.companies}"
            filter_str = self.updatecontractdlg.contractCustomerFilterLineEdit.text().lower().strip().replace("'", "''")
            if filter_str:
                sql += f" where LOWER(name) like '%{filter_str}%'" \
                       f" or LOWER(shortname) like '%{filter_str}%'"
            sql += ' order by name;'
            try:
                with psycopg2.connect(self.dsn, cursor_factory=DictCursor) as pgconn:
                    with pgconn.cursor() as cur:
                        cur.execute(sql)
                        self.updatecontractdlg.customer_companies = list(cur.fetchall())
                self.updatecontractdlg.contractCustomerInput.addItem('')
                self.updatecontractdlg.contractCustomerInput.addItems([row['name'] for row in self.updatecontractdlg.customer_companies])
                # if self.updatecontractdlg.selected_contract['customer_id']:
                #     self.updatecontractdlg.contractCustomerInput.setCurrentText(self.updatecontractdlg.selected_contract['customer'])
            except:
                self.iface.messageBar().pushMessage('Ошибка', 'Не удалось загрузить список организаций из базы',
                                                    level=Qgis.Critical, duration=3)

        def reload_contractors():
            self.updatecontractdlg.contractContractorInput.clear()
            sql = f"select * from {self.companies}"
            filter_str = self.updatecontractdlg.contractContractorFilterLineEdit.text().lower().strip().replace("'", "''")
            if filter_str:
                sql += f" where LOWER(name) like '%{filter_str}%'" \
                       f" or LOWER(shortname) like '%{filter_str}%'"
            sql += ' order by name;'
            try:
                with psycopg2.connect(self.dsn, cursor_factory=DictCursor) as pgconn:
                    with pgconn.cursor() as cur:
                        cur.execute(sql)
                        self.updatecontractdlg.contractor_companies = list(cur.fetchall())
                self.updatecontractdlg.contractContractorInput.addItem('')
                self.updatecontractdlg.contractContractorInput.addItems([row['name'] for row in self.updatecontractdlg.contractor_companies])
                # if self.updatecontractdlg.selected_contract['contractor_id']:
                #     self.updatecontractdlg.contractContractorInput.setCurrentText(self.updatecontractdlg.selected_contract['contractor'])
            except:
                self.iface.messageBar().pushMessage('Ошибка', 'Не удалось загрузить список организаций из базы',
                                                    level=Qgis.Critical, duration=3)

        def reload_link():
            if self.updatecontractdlg.selected_contract['link']:
                self.updatecontractdlg.contractLinkInput.setText(self.updatecontractdlg.selected_contract['link'])

        def reload_parent_contracts():
            self.updatecontractdlg.contractParentContractInput.clear()
            sql = f"select * from {self.contracts_view}"
            filter_str = self.updatecontractdlg.contractParentContractFilterLineEdit.text().lower().strip().replace("'", "''")
            if filter_str:
                sql += f" where LOWER(number) like '%{filter_str}%'" \
                       f" or date::text like '%{filter_str}%'" \
                       f" or LOWER(name) like '%{filter_str}%'" \
                       f" or LOWER(customer) like '%{filter_str}%'" \
                       f" or LOWER(customer_short) like '%{filter_str}%'" \
                       f" or LOWER(contractor) like '%{filter_str}%'" \
                       f" or LOWER(contractor_short) like '%{filter_str}%'"
            sql += ' order by date DESC;'
            try:
                with psycopg2.connect(self.dsn, cursor_factory=DictCursor) as pgconn:
                    with pgconn.cursor() as cur:
                        cur.execute(sql)
                        self.updatecontractdlg.contracts = list(cur.fetchall())
                self.updatecontractdlg.contractParentContractInput.addItem('')
                self.updatecontractdlg.contractParentContractInput.addItems([row['number'] + ' от ' + str(row['date']) for row in self.updatecontractdlg.contracts])
                # sc = self.updatecontractdlg.selected_contract['parent_contract_id']
                # if sc:
                #     self.updatecontractdlg.contractParentContractInput.setCurrentText(sc['number'] + ' от ' + str(sc['date']))
            except:
                self.iface.messageBar().pushMessage('Ошибка', 'Не удалось загрузить список договоров из базы',
                                                    level=Qgis.Critical, duration=3)

        def fill_with_selected_contract():
            if self.updatecontractdlg.selected_contract['number']:
                self.updatecontractdlg.contractNumberInput.setText(self.updatecontractdlg.selected_contract['number'])
            if self.updatecontractdlg.selected_contract['name']:
                self.updatecontractdlg.contractNameInput.setText(self.updatecontractdlg.selected_contract['name'])
            if self.updatecontractdlg.selected_contract['contract_type_id']:
                self.updatecontractdlg.contractTypeInput.setCurrentText(self.updatecontractdlg.selected_contract['contract_type'])
            contract_date = self.updatecontractdlg.selected_contract['date']
            if contract_date:
                self.updatecontractdlg.contractDateInput.setDate(QDate(contract_date.year, contract_date.month, contract_date.day))
            if self.updatecontractdlg.selected_contract['customer_id']:
                self.updatecontractdlg.contractCustomerInput.setCurrentText(self.updatecontractdlg.selected_contract['customer'])
            if self.updatecontractdlg.selected_contract['contractor_id']:
                self.updatecontractdlg.contractContractorInput.setCurrentText(self.updatecontractdlg.selected_contract['contractor'])
            if self.updatecontractdlg.selected_contract['link']:
                self.updatecontractdlg.contractLinkInput.setText(self.updatecontractdlg.selected_contract['link'])
            sc = self.updatecontractdlg.selected_contract['parent_contract_id']
            if sc:
                self.updatecontractdlg.contractParentContractInput.setCurrentText(
                    sc['number'] + ' от ' + str(sc['date']))

        def generate_and_execute_sql():
            selected_contract_id = self.updatecontractdlg.selected_contract['contract_id']
            new_contract_number = self.updatecontractdlg.contractNumberInput.text().replace("'", "''")
            new_contract_name = self.updatecontractdlg.contractNameInput.text().replace("'", "''")
            selected_contract_type_index = self.updatecontractdlg.contractTypeInput.currentIndex()
            selected_contract_type_id = self.updatecontractdlg.contract_types[selected_contract_type_index]['contract_type_id']
            selected_contract_date = self.updatecontractdlg.contractDateInput.dateTime()
            selected_customer_index = self.updatecontractdlg.contractCustomerInput.currentIndex() - 1
            selected_contractor_index = self.updatecontractdlg.contractContractorInput.currentIndex() - 1
            new_contract_link = self.updatecontractdlg.contractLinkInput.text().replace("'", "''")
            selected_parent_contract_index = self.updatecontractdlg.contractParentContractInput.currentIndex() - 1
            if all([new_contract_number, new_contract_name, selected_contract_type_id, selected_contract_date]):
                fields_to_update = ['number', 'name', 'contract_type_id', 'date']
                values_to_insert = [f"'{new_contract_number}'", f"'{new_contract_name}'", str(selected_contract_type_id), f"'{selected_contract_date.toString('yyyy-MM-dd')}'"]
                if selected_customer_index >= 0:
                    fields_to_update.append('customer_id')
                    selected_customer_id = self.updatecontractdlg.customer_companies[selected_customer_index]['company_id']
                    values_to_insert.append(str(selected_customer_id))
                if selected_contractor_index >= 0:
                    fields_to_update.append('contractor_id')
                    selected_contractor_id = self.updatecontractdlg.contractor_companies[selected_contractor_index]['company_id']
                    values_to_insert.append(str(selected_contractor_id))
                if new_contract_link:
                    fields_to_update.append('link')
                    values_to_insert.append(f"'{new_contract_link}'")
                if selected_parent_contract_index >= 0:
                    fields_to_update.append('parent_contract_id')
                    selected_parent_contract_id = self.updatecontractdlg.contracts[selected_parent_contract_index]['contract_id']
                    values_to_insert.append(str(selected_parent_contract_id))
                sql = f"update {self.contracts} set {', '.join([x[0] + ' = ' + x[1] for x in zip(fields_to_update, values_to_insert)])} where contract_id = {str(selected_contract_id)};"
                self.sql = sql
                mwidget = self.iface.messageBar().createMessage(f"Изменить договор {new_contract_number}?")
                mbutton = QPushButton(mwidget)
                mbutton.setText('Подтвердить')
                mbutton.pressed.connect(self.execute_sql)
                mwidget.layout().addWidget(mbutton)
                self.iface.messageBar().pushWidget(mwidget, Qgis.Warning, duration=3)
                self.updatecontractdlg.accept()
            else:
                self.iface.messageBar().pushMessage('Ошибка', 'Нужно указать номер, название, тип и дату договора',
                                                    level=Qgis.Warning, duration=3)

        get_selected_contract()
        if self.updatecontractdlg.selected_contract:
            reload_contract_number()
            reload_contract_name()
            reload_contract_types()
            reload_contract_date()
            reload_customers()
            reload_contractors()
            reload_link()
            reload_parent_contracts()
            fill_with_selected_contract()
            self.updatecontractdlg.contractCustomerFilterLineEdit.textEdited.connect(reload_customers)
            self.updatecontractdlg.contractCustomerRefreshButton.clicked.connect(reload_customers)
            self.updatecontractdlg.contractCustomerAddCompanyButton.clicked.connect(self.add_company)
            self.updatecontractdlg.contractContractorFilterLineEdit.textEdited.connect(reload_contractors)
            self.updatecontractdlg.contractContractorRefreshButton.clicked.connect(reload_contractors)
            self.updatecontractdlg.contractContractorAddCompanyButton.clicked.connect(self.add_company)
            self.updatecontractdlg.contractParentContractFilterLineEdit.textEdited.connect(reload_parent_contracts)
            self.updatecontractdlg.insertContractButton.clicked.connect(generate_and_execute_sql)
            self.updatecontractdlg.show()
        else:
            self.iface.messageBar().pushMessage('Ошибка', 'Нужно выбрать договор', level=Qgis.Warning, duration=3)



    def add_company(self):
        self.addcompdlg = AddCompDialog()

        def generate_sql():
            new_comp_name_full = self.addcompdlg.companyFullNameInput.text().replace("'", "''")
            new_comp_name_short = self.addcompdlg.companyShortNameInput.text().replace("'", "''")
            if len(new_comp_name_full.strip()) > 0 and len(new_comp_name_short.strip()) > 0:
                fields_to_update = 'name, shortname'
                values_to_insert = f"'{new_comp_name_full}', '{new_comp_name_short}'"
                self.sql = f"insert into {self.companies}({fields_to_update}) values({values_to_insert})"

        def insert_new_comp():
            new_comp_name_full = self.addcompdlg.companyFullNameInput.text()
            new_comp_name_short = self.addcompdlg.companyShortNameInput.text()
            if len(new_comp_name_full.strip()) > 0 and len(new_comp_name_short.strip()) > 0:
                mwidget = self.iface.messageBar().createMessage(f"Добавить в базу новую организацию {new_comp_name_full}?")
                mbutton = QPushButton(mwidget)
                mbutton.setText('Подтвердить')
                mbutton.pressed.connect(self.execute_sql)
                # mbutton.pressed.connect(self.refresh_processings)
                mwidget.layout().addWidget(mbutton)
                self.iface.messageBar().pushWidget(mwidget, Qgis.Warning, duration=3)
                self.addcompdlg.accept()
            else:
                self.iface.messageBar().pushMessage('Ошибка', 'Укажите название и короткое название новой организации!',
                                                    level=Qgis.Warning,
                                                    duration=3)

        generate_sql()
        self.addcompdlg.companyFullNameInput.editingFinished.connect(generate_sql)
        self.addcompdlg.companyShortNameInput.editingFinished.connect(generate_sql)

        self.addcompdlg.insertCompanyButton.clicked.connect(insert_new_comp)

        self.addcompdlg.show()


    def add_project(self):
        self.addprojdlg = AddProjDialog()
        new_proj_name_ru = self.addprojdlg.projNameRuInput.text()
        new_proj_name_en = self.addprojdlg.projNameEnInput.text()

        def generate_sql():
            new_proj_name_ru = self.addprojdlg.projNameRuInput.text().replace("'", "''")
            new_proj_name_en = self.addprojdlg.projNameEnInput.text().replace("'", "''")
            if new_proj_name_ru and new_proj_name_en:
                fields_to_update = 'name_ru, name_en'
                values_to_insert = f"'{new_proj_name_ru}', '{new_proj_name_en}'"
                self.sql = f"insert into {self.projects}({fields_to_update}) values({values_to_insert})"
                # self.iface.messageBar().pushMessage('sql:', self.sql, level=Qgis.Success, duration=5)

        def insert_new_proj():
            new_proj_name_ru = self.addprojdlg.projNameRuInput.text()
            new_proj_name_en = self.addprojdlg.projNameEnInput.text()
            if new_proj_name_ru and new_proj_name_en:
                mwidget = self.iface.messageBar().createMessage(f"Добавить в базу новый проект {new_proj_name_ru}?")
                mbutton = QPushButton(mwidget)
                mbutton.setText('Подтвердить')
                mbutton.pressed.connect(self.execute_sql)
                mwidget.layout().addWidget(mbutton)
                self.iface.messageBar().pushWidget(mwidget, Qgis.Warning, duration=3)
                self.addprojdlg.accept()
            else:
                self.iface.messageBar().pushMessage('Ошибка', 'Укажите название нового проекта на всех языках', level=Qgis.Warning,
                                                    duration=3)

        generate_sql()
        self.addprojdlg.projNameRuInput.editingFinished.connect(generate_sql)
        self.addprojdlg.projNameEnInput.editingFinished.connect(generate_sql)

        self.addprojdlg.insertProjButton.clicked.connect(insert_new_proj)

        self.addprojdlg.show()


    def add_report(self):
        self.addreportdlg = AddReportDialog()
        self.addreportdlg.reportAuthorRefreshButton.setIcon(QIcon(':/plugins/geo_dm/refresh.png'))
        self.addreportdlg.reportContractRefreshButton.setIcon(QIcon(':/plugins/geo_dm/refresh.png'))

        def reload_report_data():
            self.addreportdlg.reportTypeInput.clear()
            self.addreportdlg.reportAuthorInput.clear()
            self.addreportdlg.reportConfInput.clear()
            self.addreportdlg.reportContractInput.clear()

            with psycopg2.connect(self.dsn, cursor_factory=DictCursor) as pgconn:
                # with self.pgconn.cursor() as cur:
                with pgconn.cursor() as cur:
                    sql = f"select * from {self.report_types}"
                    cur.execute(sql)
                    self.addreportdlg.report_types = list(cur.fetchall())
                    self.addreportdlg.reportTypeInput.addItems([row['name'] for row in self.addreportdlg.report_types])
                    sql = f"select * from {self.companies} order by name"
                    cur.execute(sql)
                    self.addreportdlg.companies = list(cur.fetchall())
                    self.addreportdlg.reportAuthorInput.addItem('')
                    self.addreportdlg.reportAuthorInput.addItems([row['name'] for row in self.addreportdlg.companies])
                    sql = f"select * from {self.contracts_view} order by name"
                    cur.execute(sql)
                    self.addreportdlg.contracts = list(cur.fetchall())
                    self.addreportdlg.reportContractInput.addItem('')
                    self.addreportdlg.reportContractInput.addItems([row['number'] + ' от ' + str(row['date']) for row in self.addreportdlg.contracts])
                    sql = f"select * from {self.conf}"
                    cur.execute(sql)
                    self.addreportdlg.conf = list(cur.fetchall())
                    self.addreportdlg.reportConfInput.addItem('')
                    self.addreportdlg.reportConfInput.addItems([row['conf_name'] for row in self.addreportdlg.conf])

        reload_report_data()

        def generate_sql():
            new_report_name = self.addreportdlg.reportNameInput.text().replace("'", "''")
            new_report_shortname = self.addreportdlg.reportShortNameInput.text().replace("'", "''")
            selected_report_type_index = self.addreportdlg.reportTypeInput.currentIndex()
            selected_report_type_id = self.addreportdlg.report_types[selected_report_type_index][1]
            selected_report_author_index = self.addreportdlg.reportAuthorInput.currentIndex() - 1
            new_report_year = str(self.addreportdlg.reportYearInput.value())
            selected_report_contract_index = self.addreportdlg.reportContractInput.currentIndex() - 1
            new_report_link = self.addreportdlg.reportLinkInput.text().replace("'", "''")
            selected_report_conf_index = self.addreportdlg.reportConfInput.currentIndex() - 1
            new_report_conf_limit = self.addreportdlg.reportConfLimitInput.text().replace("'", "''")
            fields_to_update = 'name, shortname, report_type_id, year'
            values_to_insert = f"'{new_report_name}', '{new_report_shortname}', {str(selected_report_type_id)}, {new_report_year}"
            if selected_report_author_index >= 0:
                fields_to_update += ', company_id'
                selected_report_author_id = self.addreportdlg.companies[selected_report_author_index][0]
                values_to_insert += f", {str(selected_report_author_id)}"
            if selected_report_contract_index >= 0:
                fields_to_update += ', contract_id'
                selected_report_contract_id = self.addreportdlg.contracts[selected_report_contract_index][1]
                values_to_insert += f", {str(selected_report_contract_id)}"
            if len(new_report_link.strip()) > 0:
                fields_to_update += ', link'
                values_to_insert += f", '{new_report_link}'"
            if selected_report_conf_index >= 0:
                fields_to_update += ', conf_id'
                selected_report_conf_id = self.addreportdlg.conf[selected_report_conf_index][1]
                values_to_insert += f", {str(selected_report_conf_id)}"
            if len(new_report_conf_limit.strip()) > 0:
                fields_to_update += ', conf_limit'
                values_to_insert += f", '{new_report_conf_limit}'"
            self.sql = f"insert into {self.reports}({fields_to_update}) values({values_to_insert})"

        def insert_new_report():
            new_report_name = self.addreportdlg.reportNameInput.text()
            new_report_shortname = self.addreportdlg.reportShortNameInput.text()
            if all([new_report_name.strip() != '', new_report_shortname.strip() != '']):
                mwidget = self.iface.messageBar().createMessage(f"Добавить в базу новый отчет {new_report_shortname}?")
                mbutton = QPushButton(mwidget)
                mbutton.setText('Подтвердить')
                mbutton.pressed.connect(self.execute_sql)
                mwidget.layout().addWidget(mbutton)
                self.iface.messageBar().pushWidget(mwidget, Qgis.Warning, duration=3)
                self.addreportdlg.accept()
            else:
                self.iface.messageBar().pushMessage('Ошибка', 'Укажите название и сокращенное название нового отчета', level=Qgis.Warning,
                                                    duration=3)

        generate_sql()

        self.addreportdlg.reportNameInput.editingFinished.connect(generate_sql)
        self.addreportdlg.reportShortNameInput.editingFinished.connect(generate_sql)
        self.addreportdlg.reportTypeInput.activated.connect(generate_sql)
        self.addreportdlg.reportAuthorInput.activated.connect(generate_sql)
        self.addreportdlg.reportAuthorRefreshButton.clicked.connect(reload_report_data)
        self.addreportdlg.reportAddAuthorButton.clicked.connect(self.add_company)
        self.addreportdlg.reportYearInput.valueChanged.connect(generate_sql)
        self.addreportdlg.reportYearInput.textChanged.connect(generate_sql)
        self.addreportdlg.reportContractInput.activated.connect(generate_sql)
        self.addreportdlg.reportContractRefreshButton.clicked.connect(reload_report_data)
        self.addreportdlg.reportAddContractButton.clicked.connect(self.add_contract)
        self.addreportdlg.reportLinkInput.editingFinished.connect(generate_sql)
        self.addreportdlg.reportConfInput.activated.connect(generate_sql)
        self.addreportdlg.reportConfLimitInput.editingFinished.connect(generate_sql)

        self.addreportdlg.insertReportButton.clicked.connect(insert_new_report)

        self.addreportdlg.show()


    def add_contract(self):
        self.addcontractdlg = AddContractDialog()
        self.addcontractdlg.contractCustomerRefreshButton.setIcon(QIcon(':/plugins/geo_dm/refresh.png'))
        self.addcontractdlg.contractContractorRefreshButton.setIcon(QIcon(':/plugins/geo_dm/refresh.png'))

        def reload_contract_data():
            # self.addcontractdlg.contractNumberInput.clear()
            # self.addcontractdlg.contractNameInput.clear()
            self.addcontractdlg.contractTypeInput.clear()
            self.addcontractdlg.contractCustomerInput.clear()
            self.addcontractdlg.contractContractorInput.clear()
            self.addcontractdlg.contractParentContractInput.clear()

            # with open('.pgdsn', encoding='utf-8') as dsnf:
            #     dsn = dsnf.read().replace('\n', '')
            with psycopg2.connect(self.dsn, cursor_factory=DictCursor) as pgconn:

                # with self.pgconn.cursor() as cur:
                with pgconn.cursor() as cur:
                    sql = f"select * from {self.contract_types};"
                    cur.execute(sql)
                    self.addcontractdlg.contract_types = list(cur.fetchall())
                    self.addcontractdlg.contractTypeInput.addItems([row['name'] for row in self.addcontractdlg.contract_types])
                    sql = f"select * from {self.companies}"
                    filter_str = self.addcontractdlg.contractCustomerFilterLineEdit.text().lower().strip().replace("'", "''")
                    if filter_str:
                        sql += f" where LOWER(name) like '%{filter_str}%'" \
                               f" or LOWER(shortname) like '%{filter_str}%'"
                    sql += ' order by name;'
                    cur.execute(sql)
                    self.addcontractdlg.customer_companies = list(cur.fetchall())
                    self.addcontractdlg.contractCustomerInput.addItem('')
                    self.addcontractdlg.contractCustomerInput.addItems([row['name'] for row in self.addcontractdlg.customer_companies])
                    sql = f"select * from {self.companies}"
                    filter_str = self.addcontractdlg.contractContractorFilterLineEdit.text().lower().strip().replace("'", "''")
                    if filter_str:
                        sql += f" where LOWER(name) like '%{filter_str}%'" \
                               f" or LOWER(shortname) like '%{filter_str}%'"
                    sql += ' order by name;'
                    cur.execute(sql)
                    self.addcontractdlg.contractor_companies = list(cur.fetchall())
                    self.addcontractdlg.contractContractorInput.addItem('')
                    self.addcontractdlg.contractContractorInput.addItems([row['name'] for row in self.addcontractdlg.contractor_companies])
                    sql = f"select * from {self.contracts_view}"
                    filter_str = self.addcontractdlg.contractParentContractFilterLineEdit.text().lower().strip().replace("'", "''")
                    if filter_str:
                        sql += f" where LOWER(number) like '%{filter_str}%'" \
                               f" or date::text like '%{filter_str}%'" \
                               f" or LOWER(name) like '%{filter_str}%'" \
                               f" or LOWER(customer) like '%{filter_str}%'" \
                               f" or LOWER(customer_short) like '%{filter_str}%'" \
                               f" or LOWER(contractor) like '%{filter_str}%'" \
                               f" or LOWER(contractor_short) like '%{filter_str}%'"
                    sql += ' order by date DESC;'
                    cur.execute(sql)
                    self.addcontractdlg.contracts = list(cur.fetchall())
                    self.addcontractdlg.contractParentContractInput.addItem('')
                    self.addcontractdlg.contractParentContractInput.addItems([row['number'] + ' от ' + str(row['date']) for row in self.addcontractdlg.contracts])

        reload_contract_data()

        def generate_sql():
            new_contract_number = self.addcontractdlg.contractNumberInput.text().replace("'", "''")
            new_contract_name = self.addcontractdlg.contractNameInput.text().replace("'", "''")
            selected_contract_type_index = self.addcontractdlg.contractTypeInput.currentIndex()
            selected_contract_type_id = self.addcontractdlg.contract_types[selected_contract_type_index][1]
            selected_contract_date = self.addcontractdlg.contractDateInput.dateTime()
            selected_customer_index = self.addcontractdlg.contractCustomerInput.currentIndex() - 1
            selected_contractor_index = self.addcontractdlg.contractContractorInput.currentIndex() - 1
            new_contract_link = self.addcontractdlg.contractLinkInput.text().replace("'", "''")
            selected_parent_contract_index = self.addcontractdlg.contractParentContractInput.currentIndex() - 1
            fields_to_update = 'number, name, contract_type_id, date'
            values_to_insert = f"'{new_contract_number}', '{new_contract_name}', '{selected_contract_type_id}', '{selected_contract_date.toString('yyyy-MM-dd')}'"
            if selected_customer_index >= 0:
                fields_to_update += ', customer_id'
                selected_customer_id = self.addcontractdlg.companies[selected_customer_index]['company_id']
                values_to_insert += f", {str(selected_customer_id)}"
            if selected_contractor_index >= 0:
                fields_to_update += ', contractor_id'
                selected_contractor_id = self.addcontractdlg.companies[selected_contractor_index]['company_id']
                values_to_insert += f", {str(selected_contractor_id)}"
            if len(new_contract_link) > 0:
                fields_to_update += ', link'
                values_to_insert += f", '{new_contract_link}'"
            if selected_parent_contract_index >= 0:
                fields_to_update += ', parent_contract_id'
                selected_parent_contract_id = self.addcontractdlg.contracts[selected_parent_contract_index]['contract_id']
                values_to_insert += f", {str(selected_parent_contract_id)}"
            self.sql = f"insert into {self.contracts}({fields_to_update}) values({values_to_insert})"
            # self.iface.messageBar().pushMessage('sql', self.sql, level=Qgis.Success, duration=5)

        def insert_new_contract():
            new_contract_number = self.addcontractdlg.contractNumberInput.text()
            new_contract_name = self.addcontractdlg.contractNameInput.text()
            selected_contract_type_index = self.addcontractdlg.contractTypeInput.currentIndex()
            selected_contract_type_id = self.addcontractdlg.contract_types[selected_contract_type_index][1]
            selected_contract_date = self.addcontractdlg.contractDateInput.dateTime()
            if all([
                len(new_contract_number.strip()) > 0,
                len(new_contract_name.strip()) > 0,
                selected_contract_type_id >= 0,
                selected_contract_date
            ]):
                mwidget = self.iface.messageBar().createMessage(f"Добавить в базу новый договор {new_contract_number}?")
                mbutton = QPushButton(mwidget)
                mbutton.setText('Подтвердить')
                mbutton.pressed.connect(self.execute_sql)
                mwidget.layout().addWidget(mbutton)
                self.iface.messageBar().pushWidget(mwidget, Qgis.Warning, duration=3)
                self.addcontractdlg.accept()
            else:
                self.iface.messageBar().pushMessage('Ошибка', 'Укажите номер, название, тип и дату нового договора',
                                                    level=Qgis.Warning, duration=3)

        generate_sql()
        self.addcontractdlg.contractNumberInput.editingFinished.connect(generate_sql)
        self.addcontractdlg.contractNameInput.editingFinished.connect(generate_sql)
        self.addcontractdlg.contractTypeInput.activated.connect(generate_sql)
        self.addcontractdlg.contractDateInput.dateTimeChanged.connect(generate_sql)
        self.addcontractdlg.contractCustomerInput.activated.connect(generate_sql)
        self.addcontractdlg.contractCustomerRefreshButton.clicked.connect(reload_contract_data)
        self.addcontractdlg.contractCustomerFilterLineEdit.textEdited.connect(reload_contract_data)
        self.addcontractdlg.contractContractorFilterLineEdit.textEdited.connect(reload_contract_data)
        self.addcontractdlg.contractParentContractFilterLineEdit.textEdited.connect(reload_contract_data)

        self.addcontractdlg.contractCustomerAddCompanyButton.clicked.connect(self.add_company)
        self.addcontractdlg.contractContractorInput.activated.connect(generate_sql)
        self.addcontractdlg.contractContractorRefreshButton.clicked.connect(reload_contract_data)
        self.addcontractdlg.contractContractorAddCompanyButton.clicked.connect(self.add_company)
        self.addcontractdlg.contractLinkInput.editingFinished.connect(generate_sql)
        self.addcontractdlg.contractParentContractInput.activated.connect(generate_sql)

        self.addcontractdlg.insertContractButton.clicked.connect(insert_new_contract)

        self.addcontractdlg.show()


    def add_proc(self):
        self.addprocdlg = AddProcDialog()
        self.addprocdlg.refreshProjButton.setIcon(QIcon(':/plugins/geo_dm/refresh.png'))
        self.addprocdlg.refreshAuthorsButton.setIcon(QIcon(':/plugins/geo_dm/refresh.png'))
        self.addprocdlg.refreshContractsButton.setIcon(QIcon(':/plugins/geo_dm/refresh.png'))
        self.addprocdlg.refreshReportsButton.setIcon(QIcon(':/plugins/geo_dm/refresh.png'))

        try:
            def reload_proc_data():
                self.addprocdlg.procTypeInput.clear()
                self.addprocdlg.projectInput.clear()
                self.addprocdlg.procAuthorInput.clear()
                self.addprocdlg.procContractInput.clear()
                self.addprocdlg.procReportInput.clear()

                # with open('.pgdsn', encoding='utf-8') as dsnf:
                #     dsn = dsnf.read().replace('\n', '')
                with psycopg2.connect(self.dsn, cursor_factory=DictCursor) as pgconn:

                    # with self.pgconn.cursor() as cur:
                    with pgconn.cursor() as cur:
                        sql = f"select * from {self.processing_types} order by id"
                        cur.execute(sql)
                        self.addprocdlg.proc_types = list(cur.fetchall())
                        self.addprocdlg.procTypeInput.addItems([row['name'] for row in self.addprocdlg.proc_types])
                        sql = f"select * from {self.projects}"
                        cur.execute(sql)
                        self.addprocdlg.projects = list(cur.fetchall())
                        self.addprocdlg.projectInput.addItems([row['name_ru'] for row in self.addprocdlg.projects])
                        filter_str = self.addprocdlg.authorFilterInput.text().strip().lower().replace("'", "''")
                        sql = f"select * from {self.companies}"
                        if filter_str:
                            sql += f" where LOWER(name) like '%{filter_str}%' " \
                                   f"or LOWER(shortname) like '%{filter_str}%'"
                        sql += f" order by name;"
                        cur.execute(sql)
                        self.addprocdlg.companies = list(cur.fetchall())
                        self.addprocdlg.procAuthorInput.addItem('')
                        self.addprocdlg.procAuthorInput.addItems([row['name'] for row in self.addprocdlg.companies])
                        filter_str = self.addprocdlg.contractFilterInput.text().strip().lower().replace("'", "''")
                        sql = f"select * from {self.contracts_view}"
                        if filter_str:
                            sql += f" where LOWER(number) like '%{filter_str}%' " \
                                   f"or LOWER(name) like '%{filter_str}%' " \
                                   f"or date::text like '%{filter_str}%' " \
                                   f"or LOWER(customer) like '%{filter_str}%' " \
                                   f"or LOWER(customer_short) like '%{filter_str}%' " \
                                   f"or LOWER(contractor) like '%{filter_str}%' " \
                                   f"or LOWER(contractor_short) like '%{filter_str}%'"
                        sql += f" order by date DESC"
                        cur.execute(sql)
                        self.addprocdlg.contracts = cur.fetchall()
                        self.addprocdlg.procContractInput.addItem('')
                        self.addprocdlg.procContractInput.addItems([row['number'] + ' от ' + str(row['date']) + ' ' + row['customer_short'] + '-' + row['contractor_short'] for row in self.addprocdlg.contracts])
                        filter_string = self.addprocdlg.reportFilterInput.text().strip().lower().replace("'", "''")
                        sql = f"select * from {self.reports_view}"
                        if filter_string:
                            sql += f" where LOWER(name) like '%{filter_string}%' " \
                                   f"or LOWER(shortname) like '%{filter_string}%' " \
                                   f"or LOWER(company_name) like '%{filter_string}%' " \
                                   f"or LOWER(company_shortname) like '%{filter_string}%' " \
                                   f"or LOWER(contract_number) like '%{filter_string}%' " \
                                   f"or LOWER(contract_name) like '%{filter_string}%' " \
                                   f"or year::text like '%{filter_string}%' " \
                                   f"or LOWER(conf) like '%{filter_string}%' " \
                                   f"or LOWER(conf_shortname) like '%{filter_string}%' " \
                                   f"or LOWER(conf_limit) like '%{filter_string}%' " \
                                   f"or LOWER(report_type) like '%{filter_string}%'"
                        sql += ' order by shortname DESC'
                        cur.execute(sql)
                        self.addprocdlg.reports = cur.fetchall()
                        self.addprocdlg.procReportInput.addItem('')
                        self.addprocdlg.procReportInput.addItems([row['shortname'] for row in self.addprocdlg.reports])

            reload_proc_data()

            def generate_sql():
                new_proc_name = self.addprocdlg.procNameInput.text().replace("'", "''")
                new_proc_year = str(self.addprocdlg.procYearInput.value())
                selected_proc_type_index = self.addprocdlg.procTypeInput.currentIndex()
                selected_proc_type_id = self.addprocdlg.proc_types[selected_proc_type_index]['proc_type_id']
                selected_project_index = self.addprocdlg.projectInput.currentIndex()
                selected_project_id = self.addprocdlg.projects[selected_project_index]['id']
                selected_author_index = self.addprocdlg.procAuthorInput.currentIndex() - 1
                selected_contract_index = self.addprocdlg.procContractInput.currentIndex() - 1
                selected_report_index = self.addprocdlg.procReportInput.currentIndex() - 1
                fields_to_update = 'name, proc_type_id, year, project_id'
                values_to_insert = f"'{new_proc_name}', {str(selected_proc_type_id)}, {str(new_proc_year)}, {str(selected_project_id)}"
                if selected_author_index >= 0:
                    fields_to_update += ', author_id'
                    selected_author_id = self.addprocdlg.companies[selected_author_index]['company_id']
                    values_to_insert += f", {str(selected_author_id)}"
                if selected_contract_index >= 0:
                    fields_to_update += ', contract_id'
                    selected_contract_id = self.addprocdlg.contracts[selected_contract_index]['contract_id']
                    values_to_insert += f", {str(selected_contract_id)}"
                if selected_report_index >= 0:
                    fields_to_update += ', report_id'
                    selected_report_id = self.addprocdlg.reports[selected_report_index]['report_id']
                    values_to_insert += f", {str(selected_report_id)}"
                self.sql = f"insert into {self.processings}({fields_to_update}) values({values_to_insert})"
                # self.iface.messageBar().pushMessage('sql:', self.sql, level=Qgis.Success, duration=5)

            def insert_new_proc():
                new_proc_name = self.addprocdlg.procNameInput.text()
                if new_proc_name.strip() != '':
                    mwidget = self.iface.messageBar().createMessage(f"Добавить в базу новую обработку {new_proc_name}?")
                    mbutton = QPushButton(mwidget)
                    mbutton.setText('Подтвердить')
                    mbutton.pressed.connect(self.execute_sql)
                    mbutton.pressed.connect(self.refresh_processings)
                    mwidget.layout().addWidget(mbutton)
                    self.iface.messageBar().pushWidget(mwidget, Qgis.Warning, duration=3)
                    self.addprocdlg.accept()
                else:
                    self.iface.messageBar().pushMessage('Ошибка', 'Укажите название новой обработки', level=Qgis.Warning, duration=3)

            generate_sql()
            self.addprocdlg.procNameInput.editingFinished.connect(generate_sql)
            self.addprocdlg.procTypeInput.activated.connect(generate_sql)
            self.addprocdlg.projectInput.activated.connect(generate_sql)
            self.addprocdlg.procYearInput.valueChanged.connect(generate_sql)
            self.addprocdlg.procYearInput.textChanged.connect(generate_sql)
            self.addprocdlg.procAuthorInput.activated.connect(generate_sql)
            self.addprocdlg.procContractInput.activated.connect(generate_sql)
            self.addprocdlg.procReportInput.activated.connect(generate_sql)
            self.addprocdlg.addProjectButton.clicked.connect(self.add_project)
            self.addprocdlg.addCompanyButton.clicked.connect(self.add_company)
            self.addprocdlg.refreshProjButton.clicked.connect(reload_proc_data)
            self.addprocdlg.refreshAuthorsButton.clicked.connect(reload_proc_data)
            self.addprocdlg.refreshContractsButton.clicked.connect(reload_proc_data)
            self.addprocdlg.refreshReportsButton.clicked.connect(reload_proc_data)
            self.addprocdlg.authorFilterInput.textEdited.connect(reload_proc_data)
            self.addprocdlg.contractFilterInput.textEdited.connect(reload_proc_data)
            self.addprocdlg.reportFilterInput.textEdited.connect(reload_proc_data)
            self.addprocdlg.addContractButton.clicked.connect(self.add_contract)
            self.addprocdlg.addReportButton.clicked.connect(self.add_report)

            # self.addprocdlg.insertProcButton.clicked.connect(self.addprocdlg.done())
            self.addprocdlg.insertProcButton.clicked.connect(insert_new_proc)

        except:
            self.iface.messageBar().pushMessage('Ошибка', 'Не удалось загрузить данные', level=Qgis.Warning, duration=3)

        self.addprocdlg.show()


    def delete_proc(self):
        selected_cells = self.dockwind.procTableWidget.selectedItems()
        selected_rows = list(set([x.row() for x in selected_cells]))
        if len(selected_rows) > 0:
            selected_proc_ids_list = [self.proc_list[i]['proc_id'] for i in selected_rows]
            self.sql = f"delete from {self.processings} where proc_id in ({', '.join([str(x) for x in selected_proc_ids_list])}); " \
                       f"update {self.seismic_lines_processed_2d} set proc_id = NULL where proc_id in ({', '.join([str(x) for x in selected_proc_ids_list])}); " \
                       f"update {self.seismic_pols_processed_3d} set proc_id = NULL where proc_id in ({', '.join([str(x) for x in selected_proc_ids_list])});"
            mwidget = self.iface.messageBar().createMessage(f"Удалить из базы обработки [{'], ['.join([self.proc_list[i]['name'] for i in selected_rows])}]? "
                                                            f"Это приведет к удалению ссылки на эту обработку "
                                                            f"из всех линий профилей 2D и полигонов площадок 3D")
            mbutton = QPushButton(mwidget)
            mbutton.setText('Подтвердить')
            mbutton.pressed.connect(self.execute_sql)
            mbutton.pressed.connect(self.refresh_processings)
            mwidget.layout().addWidget(mbutton)
            self.iface.messageBar().pushWidget(mwidget, Qgis.Warning, duration=10)
            # self.iface.messageBar().pushMessage('sql', self.sql, level=Qgis.Success, duration=3)
        else:
            self.iface.messageBar().pushMessage('Ошибка', 'Нужно выбрать обработки для удаления', level=Qgis.Warning, duration=3)


    def update_proc(self):
        self.updateprocdlg = AddProcDialog()
        self.updateprocdlg.refreshProjButton.setIcon(QIcon(':/plugins/geo_dm/refresh.png'))
        self.updateprocdlg.refreshAuthorsButton.setIcon(QIcon(':/plugins/geo_dm/refresh.png'))
        self.updateprocdlg.refreshContractsButton.setIcon(QIcon(':/plugins/geo_dm/refresh.png'))
        self.updateprocdlg.refreshReportsButton.setIcon(QIcon(':/plugins/geo_dm/refresh.png'))

        def reload_proc_types():
            self.updateprocdlg.procTypeInput.clear()
            with psycopg2.connect(self.dsn, cursor_factory=DictCursor) as pgconn:
                with pgconn.cursor() as cur:
                    sql = f"select * from {self.processing_types} order by id"
                    cur.execute(sql)
                    self.updateprocdlg.proc_types = list(cur.fetchall())
                    self.updateprocdlg.procTypeInput.addItems([row[2] for row in self.updateprocdlg.proc_types])
                selected_proc_type = self.proc_list[self.updateprocdlg.selected_proc_row]['proc_type']
            if selected_proc_type:
                self.updateprocdlg.procTypeInput.setCurrentText(selected_proc_type)


        def reload_projects():
            self.updateprocdlg.projectInput.clear()
            with psycopg2.connect(self.dsn, cursor_factory=DictCursor) as pgconn:
                with pgconn.cursor() as cur:
                    sql = f"select * from {self.projects}"
                    cur.execute(sql)
                    self.updateprocdlg.projects = list(cur.fetchall())
                    self.updateprocdlg.projectInput.addItems([row[1] for row in self.updateprocdlg.projects])
                selected_project_id = self.proc_list[self.updateprocdlg.selected_proc_row]['project_id']
                if selected_project_id:
                    selected_project_name = [x for x in self.updateprocdlg.projects if x[0] == selected_project_id][0][1]
                    if selected_project_name:
                        self.updateprocdlg.projectInput.setCurrentText(selected_project_name)

        def reload_companies():
            self.updateprocdlg.procAuthorInput.clear()
            with psycopg2.connect(self.dsn, cursor_factory=DictCursor) as pgconn:
                sql = f"select * from {self.companies} order by name"
                with pgconn.cursor() as cur:
                    cur.execute(sql)
                    self.updateprocdlg.companies = list(cur.fetchall())
                    self.updateprocdlg.procAuthorInput.addItem('')
                    self.updateprocdlg.procAuthorInput.addItems([row[1] for row in self.updateprocdlg.companies])
                selected_author = self.proc_list[self.updateprocdlg.selected_proc_row]['company_name']
                if selected_author:
                    self.updateprocdlg.procAuthorInput.setCurrentText(selected_author)

        def reload_contracts():
            self.updateprocdlg.procContractInput.clear()
            with psycopg2.connect(self.dsn, cursor_factory=DictCursor) as pgconn:
                with pgconn.cursor() as cur:
                    sql = f"select * from {self.contracts_view} order by date DESC"
                    cur.execute(sql)
                    self.updateprocdlg.contracts = cur.fetchall()
                    self.updateprocdlg.procContractInput.addItem('')
                    self.updateprocdlg.procContractInput.addItems(
                        [row['number'] + ' от ' + str(row['date']) + ' ' + row['customer_short'] + '-' + row['contractor_short'] for row in
                         self.updateprocdlg.contracts])
                selected_contract_id = self.proc_list[self.updateprocdlg.selected_proc_row]['contract_id']
                if selected_contract_id:
                    selected_contract = [x for x in self.updateprocdlg.contracts if x['contract_id'] == selected_contract_id][0]
                    self.updateprocdlg.procContractInput.setCurrentText(
                        f"{selected_contract['number']} от {str(selected_contract['date'])} {selected_contract['customer_short']}-{selected_contract['contractor_short']}")

        def reload_reports():
            self.updateprocdlg.procReportInput.clear()
            with psycopg2.connect(self.dsn, cursor_factory=DictCursor) as pgconn:
                with pgconn.cursor() as cur:
                    sql = f"select * from {self.reports_view} order by shortname DESC"
                    cur.execute(sql)
                    self.updateprocdlg.reports = cur.fetchall()
                    self.updateprocdlg.procReportInput.addItem('')
                    self.updateprocdlg.procReportInput.addItems([row[3] for row in self.updateprocdlg.reports])
                selected_report = self.proc_list[self.updateprocdlg.selected_proc_row]['report_shortname']
                if selected_report:
                    self.updateprocdlg.procReportInput.setCurrentText(selected_report)


        def reload_proc_data():
            self.updateprocdlg.procTypeInput.clear()
            self.updateprocdlg.projectInput.clear()
            self.updateprocdlg.procAuthorInput.clear()
            self.updateprocdlg.procContractInput.clear()
            self.updateprocdlg.procReportInput.clear()

            # with open('.pgdsn', encoding='utf-8') as dsnf:
            #     dsn = dsnf.read().replace('\n', '')
            with psycopg2.connect(self.dsn, cursor_factory=DictCursor) as pgconn:

                # with self.pgconn.cursor() as cur:
                with pgconn.cursor() as cur:
                    sql = f"select * from {self.processing_types} order by id"
                    cur.execute(sql)
                    self.updateprocdlg.proc_types = list(cur.fetchall())
                    self.updateprocdlg.procTypeInput.addItems([row['name'] for row in self.updateprocdlg.proc_types])
                    sql = f"select * from {self.projects}"
                    cur.execute(sql)
                    self.updateprocdlg.projects = list(cur.fetchall())
                    self.updateprocdlg.projectInput.addItems([row['name_ru'] for row in self.updateprocdlg.projects])
                    sql = f"select * from {self.companies} order by name"
                    cur.execute(sql)
                    self.updateprocdlg.companies = list(cur.fetchall())
                    self.updateprocdlg.procAuthorInput.addItem('')
                    self.updateprocdlg.procAuthorInput.addItems([row['name'] for row in self.updateprocdlg.companies])
                    sql = f"select * from {self.contracts_view} order by date DESC"
                    cur.execute(sql)
                    self.updateprocdlg.contracts = cur.fetchall()
                    self.updateprocdlg.procContractInput.addItem('')
                    self.updateprocdlg.procContractInput.addItems(
                        [row['number'] + ' от ' + str(row['date']) + ' ' + row['customer_short'] + '-' + row['contractor_short'] for row in self.updateprocdlg.contracts])
                    sql = f"select * from {self.reports_view} order by shortname DESC"
                    cur.execute(sql)
                    self.updateprocdlg.reports = cur.fetchall()
                    self.updateprocdlg.procReportInput.addItem('')
                    self.updateprocdlg.procReportInput.addItems([row['shortname'] for row in self.updateprocdlg.reports])

        reload_proc_data()

        def fill_with_selected_proc():
            selected_proc_name = self.proc_list[self.updateprocdlg.selected_proc_row]['name']
            if selected_proc_name:
                self.updateprocdlg.procNameInput.setText(self.proc_list[self.updateprocdlg.selected_proc_row]['name'])

            selected_proc_type = self.proc_list[self.updateprocdlg.selected_proc_row]['proc_type']
            if selected_proc_type:
                self.updateprocdlg.procTypeInput.setCurrentText(selected_proc_type)

            selected_project_id = self.proc_list[self.updateprocdlg.selected_proc_row]['project_id']
            if selected_project_id:
                selected_project_name = [x for x in self.updateprocdlg.projects if x['id'] == selected_project_id][0]['name_ru']
                if selected_project_name:
                    self.updateprocdlg.projectInput.setCurrentText(selected_project_name)

            selected_proc_year = self.proc_list[self.updateprocdlg.selected_proc_row]['year']
            if selected_proc_year:
                self.updateprocdlg.procYearInput.setValue(selected_proc_year)

            selected_author = self.proc_list[self.updateprocdlg.selected_proc_row]['company_name']
            if selected_author:
                self.updateprocdlg.procAuthorInput.setCurrentText(selected_author)

            selected_contract_id =  self.proc_list[self.updateprocdlg.selected_proc_row]['contract_id']
            if selected_contract_id:
                selected_contract = [x for x in self.updateprocdlg.contracts if x['contract_id'] == selected_contract_id][0]
                self.updateprocdlg.procContractInput.setCurrentText(f"{selected_contract['number']} от {str(selected_contract['date'])} {selected_contract['customer_id']}-{selected_contract['contractor_id']}")

            selected_report = self.proc_list[self.updateprocdlg.selected_proc_row]['report_shortname']
            if selected_report:
                self.updateprocdlg.procReportInput.setCurrentText(selected_report)


        def generate_sql():
            selected_proc_id = self.proc_list[self.updateprocdlg.selected_proc_row]['proc_id']
            new_proc_name = self.updateprocdlg.procNameInput.text().replace("'", "''")
            new_proc_year = str(self.updateprocdlg.procYearInput.value())
            selected_proc_type_index = self.updateprocdlg.procTypeInput.currentIndex()
            selected_proc_type_id = self.updateprocdlg.proc_types[selected_proc_type_index]['proc_type_id']
            selected_project_index = self.updateprocdlg.projectInput.currentIndex()
            selected_project_id = self.updateprocdlg.projects[selected_project_index]['id']
            selected_author_index = self.updateprocdlg.procAuthorInput.currentIndex() - 1
            selected_contract_index = self.updateprocdlg.procContractInput.currentIndex() - 1
            selected_report_index = self.updateprocdlg.procReportInput.currentIndex() - 1
            fields_to_update = ['name', 'proc_type_id', 'year', 'project_id']
            values_to_update = [f"\'{new_proc_name}\'", str(selected_proc_type_id), str(new_proc_year), str(selected_project_id)]
            dict_to_update = dict(zip(fields_to_update, values_to_update))
            if selected_author_index >= 0:
                selected_author_id = self.updateprocdlg.companies[selected_author_index]['company_id']
                dict_to_update['author_id'] = str(selected_author_id)
            elif selected_author_index == -1:
                dict_to_update['author_id'] = self.null_value
            if selected_contract_index >= 0:
                selected_contract_id = self.updateprocdlg.contracts[selected_contract_index]['contract_id']
                dict_to_update['contract_id'] = str(selected_contract_id)
            elif selected_contract_index == -1:
                dict_to_update['contract_id'] = self.null_value
            if selected_report_index >= 0:
                selected_report_id = self.updateprocdlg.reports[selected_report_index]['report_id']
                dict_to_update['report_id'] = str(selected_report_id)
            elif selected_report_index == -1:
                dict_to_update['report_id'] = self.null_value
            self.sql = f"update {self.processings} set "
            self.sql += ', '.join([field + ' = ' + value for field, value in dict_to_update.items()])
            self.sql += f" where proc_id = {str(selected_proc_id)}"

        def update_the_proc():
            new_proc_name = self.updateprocdlg.procNameInput.text()
            if new_proc_name.strip() != '':
                mwidget = self.iface.messageBar().createMessage(f"Изменить обработку {new_proc_name}?")
                mbutton = QPushButton(mwidget)
                mbutton.setText('Подтвердить')
                mbutton.pressed.connect(self.execute_sql)
                mbutton.pressed.connect(self.refresh_processings)
                mwidget.layout().addWidget(mbutton)
                self.iface.messageBar().pushWidget(mwidget, Qgis.Warning, duration=3)
                self.updateprocdlg.accept()
            else:
                self.iface.messageBar().pushMessage('Ошибка', 'Укажите название обработки', level=Qgis.Warning,
                                                    duration=3)

        selected_proc_rows = list(set([x.row() for x in self.dockwind.procTableWidget.selectedItems()]))
        if len(selected_proc_rows) == 1:
            self.updateprocdlg.selected_proc_row = selected_proc_rows[0]
            self.updateprocdlg.setWindowTitle('Изменить обработку')
            self.updateprocdlg.insertProcButton.setText('Изменить обработку')
            fill_with_selected_proc()
            generate_sql()
            self.updateprocdlg.procNameInput.editingFinished.connect(generate_sql)
            self.updateprocdlg.procTypeInput.activated.connect(generate_sql)
            self.updateprocdlg.projectInput.activated.connect(generate_sql)
            self.updateprocdlg.procYearInput.valueChanged.connect(generate_sql)
            self.updateprocdlg.procYearInput.textChanged.connect(generate_sql)
            self.updateprocdlg.procAuthorInput.activated.connect(generate_sql)
            self.updateprocdlg.procContractInput.activated.connect(generate_sql)
            self.updateprocdlg.procReportInput.activated.connect(generate_sql)
            self.updateprocdlg.addProjectButton.clicked.connect(self.add_project)
            self.updateprocdlg.addCompanyButton.clicked.connect(self.add_company)
            self.updateprocdlg.refreshProjButton.clicked.connect(reload_projects)
            self.updateprocdlg.refreshAuthorsButton.clicked.connect(reload_companies)
            self.updateprocdlg.refreshContractsButton.clicked.connect(reload_contracts)
            self.updateprocdlg.refreshReportsButton.clicked.connect(reload_reports)
            self.updateprocdlg.addContractButton.clicked.connect(self.add_contract)
            self.updateprocdlg.addReportButton.clicked.connect(self.add_report)

            self.updateprocdlg.insertProcButton.clicked.connect(update_the_proc)

            self.updateprocdlg.show()
        else:
            self.iface.messageBar().pushMessage('Ошибка', 'Нужно выбрать одну обработку', level=Qgis.Warning, duration=3)





    def select_proc_by_geometry(self):
        if self.selectedProcLayer != None and len(self.selectedProcFeaturesList) > 0:
            if 'proc_id' in [f.name() for f in self.selectedProcLayer.fields()]:
                selected_features_proc_ids_list = list(set([f.attribute('proc_id') for f in self.selectedProcFeaturesList]))
                selected_proc_indexes = [x[0] for x in enumerate(self.proc_list) if x[1]['proc_id'] in selected_features_proc_ids_list]
                [x.setSelected(False) for x in self.dockwind.procTableWidget.selectedItems()]
                # self.dockwind.procTableWidget.setSelectionMode(QAbstractItemView.MultiSelection)
                # [self.dockwind.procTableWidget.selectRow(i) for i in selected_proc_indexes]
                # self.dockwind.procTableWidget.setSelectionMode(QAbstractItemView.ContiguousSelection)
                if len(selected_features_proc_ids_list) > 0:
                    self.proc_id_filter = selected_features_proc_ids_list
                else:
                    self.proc_id_filter = [-1]
                self.refresh_processings()
                self.proc_id_filter = None
        else:
            self.iface.messageBar().pushMessage('Ошибка', f"Нужно выбрать слой и объекты в нем", level=Qgis.Warning,
                                                duration=5)

    def select_geometry_by_proc(self):
        selected_proc_rows = list(set([x.row() for x in self.dockwind.procTableWidget.selectedItems()]))
        selected_proc_ids = [str(self.proc_list[i]['proc_id']) for i in selected_proc_rows]
        if len(selected_proc_ids) > 0 and self.selectedProcLayer != None and 'proc_id' in [f.name() for f in self.selectedProcLayer.fields()]:
            proc_ids_string = ', '.join(selected_proc_ids)
            self.selectedProcLayer.removeSelection()
            self.selectedProcLayer.selectByExpression(f'"proc_id" in ({proc_ids_string})')
            if len(self.selectedProcLayer.selectedFeatures()) > 0:
                project_crs = QgsCoordinateReferenceSystem(QgsProject.instance().crs())
                layer_crs = self.selectedProcLayer.crs()
                lyr2proj = QgsCoordinateTransform(layer_crs, project_crs, QgsProject.instance())
                box = lyr2proj.transformBoundingBox(self.selectedProcLayer.boundingBoxOfSelected())
                self.iface.mapCanvas().setExtent(box)
                self.iface.mapCanvas().refresh()
        else:
            self.iface.messageBar().pushMessage('Ошибка', f"Нужно выбрать обработку(и) и слой с геометрией", level=Qgis.Warning, duration=5)


    def update_well(self):
        selected_well_rows = list(set([x.row() for x in self.wind.wellsTableWidget.selectedItems()]))

        if len(selected_well_rows) == 1:
            self.updatewelldlg = UpdateWellDialog()
            self.updatewelldlg.selected_well_row = None
            self.updatewelldlg.well_types_list = None
            self.updatewelldlg.data_quality_list = None

            self.updatewelldlg.selected_well_row = selected_well_rows[0]

            def reload_well_name_ru():
                self.updatewelldlg.wellNameRuLineEdit.clear()
                self.updatewelldlg.wellNameRuLineEdit.setText(
                    self.wells_view_list[self.updatewelldlg.selected_well_row]['name_ru'])

            def reload_well_name_en():
                self.updatewelldlg.wellNameEnLineEdit.clear()
                self.updatewelldlg.wellNameEnLineEdit.setText(
                    self.wells_view_list[self.updatewelldlg.selected_well_row]['name_en'])

            def reload_well_types():
                self.updatewelldlg.wellTypeComboBox.clear()
                with psycopg2.connect(self.dsn, cursor_factory=DictCursor) as pgconn:
                    with pgconn.cursor() as cur:
                        sql = f"select * from {self.well_types};"
                        cur.execute(sql)
                        self.updatewelldlg.well_types_list = cur.fetchall()
                        self.updatewelldlg.wellTypeComboBox.addItem('')
                        self.updatewelldlg.wellTypeComboBox.addItems([row['well_type_name_ru'] for row in self.updatewelldlg.well_types_list])
                selected_well_type = self.wells_view_list[self.updatewelldlg.selected_well_row]['well_type']
                if selected_well_type:
                    self.updatewelldlg.wellTypeComboBox.setCurrentText(selected_well_type)

            def reload_well_number():
                self.updatewelldlg.wellNumberLineEdit.clear()
                self.updatewelldlg.wellNumberLineEdit.setText(
                    self.wells_view_list[self.updatewelldlg.selected_well_row]['well_number'])

            def reload_well_uwi():
                self.updatewelldlg.wellUWILineEdit.clear()
                self.updatewelldlg.wellUWILineEdit.setText(
                    self.wells_view_list[self.updatewelldlg.selected_well_row]['well_uwi'])

            def reload_well_area_ru():
                self.updatewelldlg.wellAreaRuLineEdit.clear()
                self.updatewelldlg.wellAreaRuLineEdit.setText(
                    self.wells_view_list[self.updatewelldlg.selected_well_row]['area_name_ru'])

            def reload_well_area_en():
                self.updatewelldlg.wellAreaEnLineEdit.clear()
                self.updatewelldlg.wellAreaEnLineEdit.setText(
                    self.wells_view_list[self.updatewelldlg.selected_well_row]['area_name_en'])

            def reload_well_source():
                self.updatewelldlg.wellSourcePlainTextEdit.clear()
                self.updatewelldlg.wellSourcePlainTextEdit.setPlainText(
                    self.wells_view_list[self.updatewelldlg.selected_well_row]['source'])

            def reload_well_quality():
                self.updatewelldlg.wellQualityComboBox.clear()
                with psycopg2.connect(self.dsn, cursor_factory=DictCursor) as pgconn:
                    with pgconn.cursor() as cur:
                        sql = f"select * from {self.data_quality};"
                        cur.execute(sql)
                        self.updatewelldlg.data_quality_list = cur.fetchall()
                        self.updatewelldlg.wellQualityComboBox.addItem('')
                        self.updatewelldlg.wellQualityComboBox.addItems([row['name_ru'] for row in self.updatewelldlg.data_quality_list])
                selected_quality_type = self.wells_view_list[self.updatewelldlg.selected_well_row]['data_quality']
                if selected_quality_type:
                    self.updatewelldlg.wellQualityComboBox.setCurrentText(selected_quality_type)

            def reload_well_datestamp():
                selected_well_datestamp = self.wells_view_list[self.updatewelldlg.selected_well_row]['datestamp']
                if selected_well_datestamp:
                    self.updatewelldlg.wellDatestampCalendarWidget.setSelectedDate(QDate(selected_well_datestamp.year, selected_well_datestamp.month, selected_well_datestamp.day))
                else:
                    self.updatewelldlg.wellDatestampCalendarWidget.setSelectedDate(QDate(1970, 1, 1))

            def reload_well_geotransf():
                self.updatewelldlg.wellGeotransfPlainTextEdit.clear()
                self.updatewelldlg.wellGeotransfPlainTextEdit.setPlainText(
                    self.wells_view_list[self.updatewelldlg.selected_well_row]['geo_transf_applied'])

            def reload_well_data():
                reload_well_name_ru()
                reload_well_name_en()
                reload_well_types()
                reload_well_number()
                reload_well_uwi()
                reload_well_area_ru()
                reload_well_area_en()
                reload_well_source()
                reload_well_quality()
                reload_well_datestamp()
                reload_well_geotransf()

            reload_well_data()

            def generate_and_execute_sql():
                selected_well_id = self.wells_view_list[self.updatewelldlg.selected_well_row]['well_id']
                new_well_name_ru = self.updatewelldlg.wellNameRuLineEdit.text().replace("'", "''")
                new_well_name_en = self.updatewelldlg.wellNameEnLineEdit.text().replace("'", "''")
                selected_well_type_index = self.updatewelldlg.wellTypeComboBox.currentIndex() - 1
                new_well_number = self.updatewelldlg.wellNumberLineEdit.text().replace("'", "''")
                new_well_uwi = self.updatewelldlg.wellUWILineEdit.text().replace("'", "''")
                new_well_area_ru = self.updatewelldlg.wellAreaRuLineEdit.text().replace("'", "''")
                new_well_area_en = self.updatewelldlg.wellAreaEnLineEdit.text().replace("'", "''")
                new_well_source = self.updatewelldlg.wellSourcePlainTextEdit.toPlainText().replace("'", "''")
                selected_well_quality_index = self.updatewelldlg.wellQualityComboBox.currentIndex() - 1
                new_well_datestamp = self.updatewelldlg.wellDatestampCalendarWidget.selectedDate()
                new_well_geotransf = self.updatewelldlg.wellGeotransfPlainTextEdit.toPlainText().replace("'", "''")
                fields_to_update = []
                values_to_insert = []
                if new_well_name_ru:
                    fields_to_update.append('name_ru')
                    values_to_insert.append(f"'{new_well_name_ru}'")
                if new_well_name_en:
                    fields_to_update.append('name_en')
                    values_to_insert.append(f"'{new_well_name_en}'")
                if selected_well_type_index >= 0:
                    fields_to_update.append('type_id')
                    selected_well_type_id = self.updatewelldlg.well_types_list[selected_well_type_index]['well_type_id']
                    values_to_insert.append(str(selected_well_type_id))
                if new_well_number:
                    fields_to_update.append('well_number')
                    values_to_insert.append(f"'{new_well_number}'")
                if new_well_uwi:
                    fields_to_update.append('well_uwi')
                    values_to_insert.append(f"'{new_well_uwi}'")
                if new_well_area_ru:
                    fields_to_update.append('area_name_ru')
                    values_to_insert.append(f"'{new_well_area_ru}'")
                if new_well_area_en:
                    fields_to_update.append('area_name_en')
                    values_to_insert.append(f"'{new_well_area_en}'")
                if new_well_source:
                    fields_to_update.append('source')
                    values_to_insert.append(f"'{new_well_source}'")
                if selected_well_quality_index >= 0:
                    fields_to_update.append('data_quality_id')
                    selected_data_quality_id = self.updatewelldlg.data_quality_list[selected_well_quality_index]['data_quality_id']
                    values_to_insert.append(str(selected_data_quality_id))
                if new_well_datestamp:
                    if new_well_datestamp != QDate(1970, 1, 1):
                        fields_to_update.append('datestamp')
                        values_to_insert.append(f"'{new_well_datestamp.toString('yyyy-MM-dd')}'")
                if new_well_geotransf:
                    fields_to_update.append('geo_transf_applied')
                    values_to_insert.append(f"'{new_well_geotransf}'")
                if all([fields_to_update, values_to_insert]):
                    fields_values = ', '.join([a[0] + ' = ' + a[1] for a in zip(fields_to_update, values_to_insert)])
                    self.sql = f"update {self.wells} set {fields_values} where well_id = {str(selected_well_id)}"
                    mwidget = self.iface.messageBar().createMessage(
                        f"Изменить данные скважины {new_well_name_ru or new_well_name_en or new_well_number or new_well_uwi or str(selected_well_id)}?")
                    mbutton = QPushButton(mwidget)
                    mbutton.setText('Подтвердить')
                    mbutton.pressed.connect(self.execute_sql)
                    mbutton.pressed.connect(self.refresh_wells)
                    mwidget.layout().addWidget(mbutton)
                    self.iface.messageBar().pushWidget(mwidget, Qgis.Warning, duration=5)
                    self.updatewelldlg.close()
                else:
                    self.iface.messageBar().pushMessage('Ошибка', 'Введите данные скважины', level=Qgis.Warning,
                                                        duration=3)
            self.updatewelldlg.updateWellButton.clicked.connect(generate_and_execute_sql)
            self.updatewelldlg.show()
        else:
            self.iface.messageBar().pushMessage('Ошибка', 'Нужно выбрать одну скважину', level=Qgis.Warning, duration=3)


    def update_survey(self):
        selected_survey_rows = list(set([x.row() for x in self.wind.surveyTableWidget.selectedItems()]))
        if len(selected_survey_rows) == 1:
            self.updatesurveydlg = AddSurveyDialog()
            self.updatesurveydlg.refreshProjButton.setIcon(QIcon(':/plugins/geo_dm/refresh.png'))
            self.updatesurveydlg.refreshAuthorsButton.setIcon(QIcon(':/plugins/geo_dm/refresh.png'))
            self.updatesurveydlg.refreshContractsButton.setIcon(QIcon(':/plugins/geo_dm/refresh.png'))
            self.updatesurveydlg.refreshReportsButton.setIcon(QIcon(':/plugins/geo_dm/refresh.png'))
            self.updatesurveydlg.selected_survey_row = selected_survey_rows[0]
            self.updatesurveydlg.setWindowTitle('Изменить съемку')
            self.updatesurveydlg.insertSurveyButton.setText('Изменить съемку')
            self.updatesurveydlg.reports_to_link = []

            def reload_survey_name():
                self.updatesurveydlg.surveyNameInput.clear()
                self.updatesurveydlg.surveyNameInput.setText(self.surveys_view_list[self.updatesurveydlg.selected_survey_row]['name'])

            def reload_loc_types():
                self.updatesurveydlg.surveyLocTypeInput.clear()
                with psycopg2.connect(self.dsn, cursor_factory=DictCursor) as pgconn:
                    with pgconn.cursor() as cur:
                        sql = f"select * from {self.location_types}"
                        cur.execute(sql)
                        self.updatesurveydlg.location_types_list = cur.fetchall()
                        self.updatesurveydlg.surveyLocTypeInput.addItems([row['name'] for row in self.updatesurveydlg.location_types_list])
                    selected_loc_type = self.surveys_view_list[self.updatesurveydlg.selected_survey_row]['location_type']
                if selected_loc_type:
                    self.updatesurveydlg.surveyLocTypeInput.setCurrentText(selected_loc_type)

            def reload_survey_types():
                self.updatesurveydlg.surveyTypeInput.clear()
                with psycopg2.connect(self.dsn, cursor_factory=DictCursor) as pgconn:
                    with pgconn.cursor() as cur:
                        sql = f"select * from {self.survey_types}"
                        cur.execute(sql)
                        self.updatesurveydlg.survey_types_list = cur.fetchall()
                        self.updatesurveydlg.surveyTypeInput.addItems(
                            [row['name'] for row in self.updatesurveydlg.survey_types_list])
                    selected_survey_type = self.surveys_view_list[self.updatesurveydlg.selected_survey_row]['survey_type']
                if selected_survey_type:
                    self.updatesurveydlg.surveyTypeInput.setCurrentText(selected_survey_type)

            def reload_projects():
                self.updatesurveydlg.projectInput.clear()
                with psycopg2.connect(self.dsn, cursor_factory=DictCursor) as pgconn:
                    with pgconn.cursor() as cur:
                        sql = f"select * from {self.projects}"
                        cur.execute(sql)
                        self.updatesurveydlg.projects_list = cur.fetchall()
                        self.updatesurveydlg.projectInput.addItems(
                            [row['name_ru'] for row in self.updatesurveydlg.projects_list])
                        selected_survey_id = self.surveys_view_list[self.updatesurveydlg.selected_survey_row]['survey_id']
                        if selected_survey_id:
                            sql = f"select project_id from {self.surveys} where survey_id = {str(selected_survey_id)}"
                            cur.execute(sql)
                            selected_project_id = cur.fetchall()[0][0]
                            if selected_project_id:
                                selected_project_name = [x for x in self.updatesurveydlg.projects_list if x[0] == selected_project_id][0]['name_ru']
                                if selected_project_name:
                                    self.updatesurveydlg.projectInput.setCurrentText(selected_project_name)

            def reload_survey_year():
                year = self.surveys_view_list[self.updatesurveydlg.selected_survey_row]['year']
                if year:
                    self.updatesurveydlg.surveyYearInput.setValue(year)

            def reload_companies():
                filter_string = self.updatesurveydlg.authorFilterInput.text().strip().lower().replace("'", "''")
                self.updatesurveydlg.surveyAuthorInput.clear()
                with psycopg2.connect(self.dsn, cursor_factory=DictCursor) as pgconn:
                    with pgconn.cursor() as cur:
                        sql = f"select * from {self.companies}"
                        if filter_string:
                            sql += f" where LOWER(name) like '%{filter_string}%' " \
                                   f"or LOWER(shortname) like '%{filter_string}%'"
                        sql += " order by name"
                        cur.execute(sql)
                        self.updatesurveydlg.companies_list = list(cur.fetchall())
                        self.updatesurveydlg.surveyAuthorInput.addItem('')
                        self.updatesurveydlg.surveyAuthorInput.addItems([row['name'] for row in self.updatesurveydlg.companies_list])
                    selected_survey_author = self.surveys_view_list[self.updatesurveydlg.selected_survey_row]['acquisition_company']
                if selected_survey_author:
                    self.updatesurveydlg.surveyAuthorInput.setCurrentText(selected_survey_author)

            def reload_contracts():
                filter_string = self.updatesurveydlg.contractFilterInput.text().strip().lower().replace("'", "''")
                self.updatesurveydlg.surveyContractInput.clear()
                with psycopg2.connect(self.dsn, cursor_factory=DictCursor) as pgconn:
                    with pgconn.cursor() as cur:
                        sql = f"select * from {self.contracts_view}"
                        # f"or LOWER(name) like '%{filter_string}%' " \
                        if filter_string:
                            sql += f" where LOWER(number) like '%{filter_string}%' " \
                                   f"or LOWER(name) like '%{filter_string}%' " \
                                   f"or date::text like '%{filter_string}%' " \
                                   f"or LOWER(customer) like '%{filter_string}%' " \
                                   f"or LOWER(customer_short) like '%{filter_string}%' " \
                                   f"or LOWER(contractor) like '%{filter_string}%' " \
                                   f"or LOWER(contractor_short) like '%{filter_string}%'"
                        sql += " order by date DESC"
                        cur.execute(sql)
                        self.updatesurveydlg.contracts_list = cur.fetchall()
                        self.updatesurveydlg.surveyContractInput.addItem('')
                        self.updatesurveydlg.surveyContractInput.addItems([row['number'] + ' от ' + str(row['date']) + ' ' +
                                                                        row['customer_short'] + '-' + row[
                                                                            'contractor_short'] for row in
                                                                        self.updatesurveydlg.contracts_list])
                    selected_survey_contract_id = self.surveys_view_list[self.updatesurveydlg.selected_survey_row]['acquisition_contract_id']
                    if selected_survey_contract_id:
                        selected_survey_contracts = [x for x in self.updatesurveydlg.contracts_list if x['contract_id'] == selected_survey_contract_id]
                        if selected_survey_contracts:
                            selected_survey_contract = selected_survey_contracts[0]
                            self.updatesurveydlg.surveyAuthorInput.setCurrentText(f"{selected_survey_contract['number']} от "
                                                                                  f"{str(selected_survey_contract['date'])} "
                                                                                  f"{selected_survey_contract['customer_short']}-"
                                                                                  f"{selected_survey_contract['contractor_short']}")

            def reload_linked_reports():
                self.updatesurveydlg.surveyReportsTableWidget.clear()
                self.updatesurveydlg.surveyReportsTableWidget.setRowCount(0)
                self.updatesurveydlg.surveyReportsTableWidget.setColumnCount(2)
                self.updatesurveydlg.surveyReportsTableWidget.setHorizontalHeaderLabels(['Тип', 'Название'])
                header = self.updatesurveydlg.surveyReportsTableWidget.horizontalHeader()
                header.resizeSection(0, 100)
                header.resizeSection(1, 255)
                if self.updatesurveydlg.reports_to_link:
                    for i, report in enumerate(self.updatesurveydlg.reports_to_link):
                        self.updatesurveydlg.surveyReportsTableWidget.insertRow(i)
                        citem = QTableWidgetItem(report['report_type'])
                        citem.setToolTip(report['report_type'])
                        citem.setFlags(Qt.ItemIsSelectable | Qt.ItemIsEnabled)
                        self.updatesurveydlg.surveyReportsTableWidget.setItem(i, 0, citem)
                        citem = QTableWidgetItem(report['shortname'])
                        citem.setToolTip(report['name'])
                        citem.setFlags(Qt.ItemIsSelectable | Qt.ItemIsEnabled)
                        self.updatesurveydlg.surveyReportsTableWidget.setItem(i, 1, citem)

            def reload_reports():
                filter_string = self.updatesurveydlg.reportFilterInput.text().strip().lower().replace("'", "''")
                self.updatesurveydlg.surveyReportsInput.clear()
                self.updatesurveydlg.surveyReportsTableWidget.clearContents()
                sql = f"select * from {self.reports_view}"
                if filter_string:
                    sql += f" where LOWER(name) like '%{filter_string}%' " \
                           f"or LOWER(shortname) like '%{filter_string}%' " \
                           f"or LOWER(company_name) like '%{filter_string}%' " \
                           f"or LOWER(company_shortname) like '%{filter_string}%' " \
                           f"or LOWER(contract_number) like '%{filter_string}%' " \
                           f"or LOWER(contract_name) like '%{filter_string}%' " \
                           f"or year::text like '%{filter_string}%' " \
                           f"or LOWER(conf) like '%{filter_string}%' " \
                           f"or LOWER(conf_shortname) like '%{filter_string}%' " \
                           f"or LOWER(conf_limit) like '%{filter_string}%' " \
                           f"or LOWER(report_type) like '%{filter_string}%'"
                sql += " order by shortname DESC"
                with psycopg2.connect(self.dsn, cursor_factory=DictCursor) as pgconn:
                    with pgconn.cursor() as cur:
                        cur.execute(sql)
                        self.updatesurveydlg.all_reports_list = cur.fetchall()
                        self.updatesurveydlg.surveyReportsInput.addItem('Выберите отчет для привязки')
                        self.updatesurveydlg.surveyReportsInput.addItems(
                            [row['shortname'] for row in self.updatesurveydlg.all_reports_list])
                self.updatesurveydlg.surveyReportsTableWidget.setRowCount(0)
                self.updatesurveydlg.surveyReportsTableWidget.setColumnCount(2)
                self.updatesurveydlg.surveyReportsTableWidget.setHorizontalHeaderLabels(['Тип', 'Название'])
                header = self.updatesurveydlg.surveyReportsTableWidget.horizontalHeader()
                header.resizeSection(0, 100)
                header.resizeSection(1, 255)
                selected_survey_id = self.surveys_view_list[self.updatesurveydlg.selected_survey_row]['survey_id']
                if selected_survey_id:
                    sql = f"select report_id from {self.reports_to_surveys} where survey_id = {str(selected_survey_id)}"
                    with psycopg2.connect(self.dsn, cursor_factory=DictCursor) as pgconn:
                        with pgconn.cursor() as cur:
                            cur.execute(sql)
                            selected_report_ids = [x[0] for x in cur.fetchall()]
                            [self.updatesurveydlg.reports_to_link.append(x) for x in self.updatesurveydlg.all_reports_list if x['report_id'] in selected_report_ids and x not in self.updatesurveydlg.reports_to_link]
                            reload_linked_reports()

            def reload_survey_data():
                reload_survey_name()
                reload_loc_types()
                reload_survey_types()
                reload_projects()
                reload_survey_year()
                reload_companies()
                reload_contracts()
                reload_reports()

            reload_survey_data()

            def link_existing_report():
                selected_report_index = self.updatesurveydlg.surveyReportsInput.currentIndex() - 1
                if selected_report_index >= 0 and self.updatesurveydlg.all_reports_list[selected_report_index]['report_id'] not in \
                        [x['report_id'] for x in self.updatesurveydlg.reports_to_link]:
                    self.updatesurveydlg.reports_to_link.append(self.updatesurveydlg.all_reports_list[selected_report_index])
                    reload_linked_reports()
                self.updatesurveydlg.surveyReportsInput.setCurrentIndex(0)

            def unlink_existing_report():
                selected_reports_rows = list(set([x.row() for x in self.updatesurveydlg.surveyReportsTableWidget.selectedItems()]))
                if selected_reports_rows:
                    self.updatesurveydlg.reports_to_link = [x for x in self.updatesurveydlg.reports_to_link if
                                                               self.updatesurveydlg.reports_to_link.index(
                                                                   x) not in selected_reports_rows]
                    reload_linked_reports()

            def generate_and_execute_sql():
                selected_survey_id = self.surveys_view_list[self.updatesurveydlg.selected_survey_row]['survey_id']
                new_survey_name = self.updatesurveydlg.surveyNameInput.text().replace("'", "''")
                selected_loc_type_index = self.updatesurveydlg.surveyLocTypeInput.currentIndex()
                selected_loc_type_id = self.updatesurveydlg.location_types_list[selected_loc_type_index]['location_type_id']
                selected_survey_type_index = self.updatesurveydlg.surveyTypeInput.currentIndex()
                selected_survey_type_id = self.updatesurveydlg.survey_types_list[selected_survey_type_index]['survey_type_id']
                selected_project_index = self.updatesurveydlg.projectInput.currentIndex()
                selected_project_id = self.updatesurveydlg.projects_list[selected_project_index]['id']
                new_survey_year = str(self.updatesurveydlg.surveyYearInput.value())
                selected_author_index = self.updatesurveydlg.surveyAuthorInput.currentIndex() - 1
                selected_contract_index = self.updatesurveydlg.surveyContractInput.currentIndex() - 1
                fields_to_update = ['name', 'location_type_id', 'type_id', 'project_id', 'year']
                values_to_update = [f"'{new_survey_name}'", str(selected_loc_type_id), str(selected_survey_type_id), str(selected_project_id), str(new_survey_year)]
                if selected_author_index >= 0:
                    fields_to_update.append('acquisition_company_id')
                    selected_author_id = self.updatesurveydlg.companies_list[selected_author_index]['company_id']
                    values_to_update.append(str(selected_author_id))
                if selected_contract_index >= 0:
                    fields_to_update.append('acquisition_contract_id')
                    selected_contract_id = self.updatesurveydlg.contracts_list[selected_contract_index]['contract_id']
                    values_to_update.append(str(selected_contract_id))
                fields_values = ', '.join([a[0] + ' = ' + a[1] for a in zip(fields_to_update, values_to_update)])
                self.sql = f"update {self.surveys} set {fields_values} where survey_id = {selected_survey_id};"
                self.sql += f" delete from {self.reports_to_surveys} where survey_id = {selected_survey_id};"
                if self.updatesurveydlg.reports_to_link:
                    # self.sql += f" delete from {self.reports_to_surveys} where survey_id = {selected_survey_id};"
                    self.sql += f" insert into {self.reports_to_surveys}(report_id, survey_id) " \
                                f"values{', '.join(['(' + str(x['report_id']) + ', ' + str(selected_survey_id) + ')' for x in self.updatesurveydlg.reports_to_link])};"
                # self.iface.messageBar().pushMessage('sql', self.sql, level=Qgis.Success, duration=5)
                mwidget = self.iface.messageBar().createMessage(
                    f"Изменить данные съемки {new_survey_name}?")
                mbutton = QPushButton(mwidget)
                mbutton.setText('Подтвердить')
                mbutton.pressed.connect(self.execute_sql)
                mbutton.pressed.connect(self.refresh_surveys)
                mwidget.layout().addWidget(mbutton)
                self.iface.messageBar().pushWidget(mwidget, Qgis.Warning, duration=5)
                self.updatesurveydlg.accept()

            self.updatesurveydlg.addProjectButton.clicked.connect(self.add_project)
            self.updatesurveydlg.refreshProjButton.clicked.connect(reload_projects)
            self.updatesurveydlg.addCompanyButton.clicked.connect(self.add_company)
            self.updatesurveydlg.authorFilterInput.textEdited.connect(reload_companies)
            self.updatesurveydlg.refreshAuthorsButton.clicked.connect(reload_companies)
            self.updatesurveydlg.addContractButton.clicked.connect(self.add_contract)
            self.updatesurveydlg.contractFilterInput.textEdited.connect(reload_contracts)
            self.updatesurveydlg.refreshContractsButton.clicked.connect(reload_contracts)
            self.updatesurveydlg.addReportButton.clicked.connect(self.add_report)
            self.updatesurveydlg.reportFilterInput.textEdited.connect(reload_reports)
            self.updatesurveydlg.refreshReportsButton.clicked.connect(reload_reports)
            self.updatesurveydlg.surveyReportsInput.activated.connect(link_existing_report)
            self.updatesurveydlg.unlinkSelectedReportButton.clicked.connect(unlink_existing_report)
            self.updatesurveydlg.insertSurveyButton.clicked.connect(generate_and_execute_sql)
            self.updatesurveydlg.show()

        else:
            self.iface.messageBar().pushMessage('Ошибка', 'Нужно выбрать одну съемку', level=Qgis.Warning, duration=3)


    def add_survey(self):
        self.addsurveydlg = AddSurveyDialog()
        self.addsurveydlg.refreshProjButton.setIcon(QIcon(':/plugins/geo_dm/refresh.png'))
        self.addsurveydlg.refreshAuthorsButton.setIcon(QIcon(':/plugins/geo_dm/refresh.png'))
        self.addsurveydlg.refreshContractsButton.setIcon(QIcon(':/plugins/geo_dm/refresh.png'))
        self.addsurveydlg.refreshReportsButton.setIcon(QIcon(':/plugins/geo_dm/refresh.png'))

        self.addsurveydlg.reports_to_link = []

        def reload_survey_data():
            self.addsurveydlg.surveyTypeInput.clear()
            self.addsurveydlg.projectInput.clear()
            self.addsurveydlg.surveyAuthorInput.clear()
            self.addsurveydlg.surveyContractInput.clear()
            self.addsurveydlg.surveyLocTypeInput.clear()
            self.addsurveydlg.surveyReportsTableWidget.clear()
            self.addsurveydlg.surveyReportsInput.clear()

            with psycopg2.connect(self.dsn, cursor_factory=DictCursor) as pgconn:
                with pgconn.cursor() as cur:
                    sql = f"select * from {self.location_types}"
                    cur.execute(sql)
                    self.addsurveydlg.location_types_list = cur.fetchall()
                    self.addsurveydlg.surveyLocTypeInput.addItems([row['name'] for row in self.addsurveydlg.location_types_list])

                    sql = f"select * from {self.survey_types} order by survey_type_id"
                    cur.execute(sql)
                    self.addsurveydlg.survey_types_list = list(cur.fetchall())
                    self.addsurveydlg.surveyTypeInput.addItems([row['name'] for row in self.addsurveydlg.survey_types_list])

                    sql = f"select * from {self.projects}"
                    cur.execute(sql)
                    self.addsurveydlg.projects_list = list(cur.fetchall())
                    self.addsurveydlg.projectInput.addItems([row['name_ru'] for row in self.addsurveydlg.projects_list])

                    sql = f"select * from {self.companies} order by name"
                    cur.execute(sql)
                    self.addsurveydlg.companies_list = list(cur.fetchall())
                    self.addsurveydlg.surveyAuthorInput.addItem('')
                    self.addsurveydlg.surveyAuthorInput.addItems([row['name'] for row in self.addsurveydlg.companies_list])

                    sql = f"select * from {self.contracts_view} order by date DESC"
                    cur.execute(sql)
                    self.addsurveydlg.contracts_list = cur.fetchall()
                    self.addsurveydlg.surveyContractInput.addItem('')
                    self.addsurveydlg.surveyContractInput.addItems([row['number'] + ' от ' + str(row['date']) + ' ' + row['customer_short'] + '-' + row['contractor_short'] for row in self.addsurveydlg.contracts_list])

                    sql = f"select * from {self.reports_view} order by shortname DESC"
                    cur.execute(sql)
                    self.addsurveydlg.all_reports_list = cur.fetchall()
                    self.addsurveydlg.surveyReportsInput.addItem('Выберите отчет для привязки')
                    self.addsurveydlg.surveyReportsInput.addItems([row['shortname'] for row in self.addsurveydlg.all_reports_list])
                    self.addsurveydlg.surveyReportsTableWidget.clear()
                    self.addsurveydlg.surveyReportsTableWidget.setRowCount(0)
                    self.addsurveydlg.surveyReportsTableWidget.setColumnCount(2)
                    self.addsurveydlg.surveyReportsTableWidget.setHorizontalHeaderLabels(['Тип', 'Название'])
                    header = self.addsurveydlg.surveyReportsTableWidget.horizontalHeader()
                    header.resizeSection(0, 100)
                    header.resizeSection(1, 255)

        def reload_projects():
            self.addsurveydlg.projectInput.clear()
            with psycopg2.connect(self.dsn, cursor_factory=DictCursor) as pgconn:
                with pgconn.cursor() as cur:
                    sql = f"select * from {self.projects}"
                    cur.execute(sql)
                    self.addsurveydlg.projects_list = list(cur.fetchall())
                    self.addsurveydlg.projectInput.addItems([row['name_ru'] for row in self.addsurveydlg.projects_list])

        def reload_companies():
            filter_string = self.addsurveydlg.authorFilterInput.text().strip().lower().replace("'", "''")
            self.addsurveydlg.surveyAuthorInput.clear()
            with psycopg2.connect(self.dsn, cursor_factory=DictCursor) as pgconn:
                with pgconn.cursor() as cur:
                    sql = f"select * from {self.companies}"
                    if filter_string:
                        sql += f" where LOWER(name) like '%{filter_string}%' " \
                               f"or LOWER(shortname) like '%{filter_string}%'"
                    sql += " order by name"
                    cur.execute(sql)
                    self.addsurveydlg.companies_list = list(cur.fetchall())
                    self.addsurveydlg.surveyAuthorInput.addItem('')
                    self.addsurveydlg.surveyAuthorInput.addItems([row['name'] for row in self.addsurveydlg.companies_list])

        def reload_contracts():
            filter_string = self.addsurveydlg.contractFilterInput.text().strip().lower().replace("'", "''")
            self.addsurveydlg.surveyContractInput.clear()
            with psycopg2.connect(self.dsn, cursor_factory=DictCursor) as pgconn:
                with pgconn.cursor() as cur:
                    sql = f"select * from {self.contracts_view}"
                    # f"or LOWER(name) like '%{filter_string}%' " \
                    if filter_string:
                        sql += f" where LOWER(number) like '%{filter_string}%' " \
                               f"or LOWER(name) like '%{filter_string}%' " \
                               f"or date::text like '%{filter_string}%' " \
                               f"or LOWER(customer) like '%{filter_string}%' " \
                               f"or LOWER(customer_short) like '%{filter_string}%' " \
                               f"or LOWER(contractor) like '%{filter_string}%' " \
                               f"or LOWER(contractor_short) like '%{filter_string}%'"
                    sql += " order by date DESC"
                    cur.execute(sql)
                    self.addsurveydlg.contracts_list = cur.fetchall()
                    self.addsurveydlg.surveyContractInput.addItem('')
                    self.addsurveydlg.surveyContractInput.addItems([row['number'] + ' от ' + str(row['date']) + ' ' +
                                                                    row['customer_short'] + '-' + row[
                                                                        'contractor_short'] for row in
                                                                    self.addsurveydlg.contracts_list])

        def reload_reports():
            filter_string = self.addsurveydlg.reportFilterInput.text().strip().lower().replace("'", "''")
            self.addsurveydlg.surveyReportsInput.clear()
            sql = f"select * from {self.reports_view}"
            if filter_string:
                sql += f" where LOWER(name) like '%{filter_string}%' " \
                       f"or LOWER(shortname) like '%{filter_string}%' " \
                       f"or LOWER(company_name) like '%{filter_string}%' " \
                       f"or LOWER(company_shortname) like '%{filter_string}%' " \
                       f"or LOWER(contract_number) like '%{filter_string}%' " \
                       f"or LOWER(contract_name) like '%{filter_string}%' " \
                       f"or year::text like '%{filter_string}%' " \
                       f"or LOWER(conf) like '%{filter_string}%' " \
                       f"or LOWER(conf_shortname) like '%{filter_string}%' " \
                       f"or LOWER(conf_limit) like '%{filter_string}%' " \
                       f"or LOWER(report_type) like '%{filter_string}%'"
            sql += " order by shortname DESC"
            with psycopg2.connect(self.dsn, cursor_factory=DictCursor) as pgconn:
                with pgconn.cursor() as cur:
                    cur.execute(sql)
                    self.addsurveydlg.all_reports_list = cur.fetchall()
                    self.addsurveydlg.surveyReportsInput.addItem('Выберите отчет для привязки')
                    self.addsurveydlg.surveyReportsInput.addItems([row['shortname'] for row in self.addsurveydlg.all_reports_list])

        reload_survey_data()

        def link_existing_report():
            selected_report_index = self.addsurveydlg.surveyReportsInput.currentIndex() - 1
            if selected_report_index >= 0 and self.addsurveydlg.all_reports_list[selected_report_index]['report_id'] not in \
                    [x['report_id'] for x in self.addsurveydlg.reports_to_link]:
                self.addsurveydlg.reports_to_link.append(self.addsurveydlg.all_reports_list[selected_report_index])
                i = self.addsurveydlg.surveyReportsTableWidget.rowCount()
                self.addsurveydlg.surveyReportsTableWidget.insertRow(i)
                citem = QTableWidgetItem(self.addsurveydlg.all_reports_list[selected_report_index]['report_type'])
                citem.setToolTip(self.addsurveydlg.all_reports_list[selected_report_index]['report_type'])
                citem.setFlags(Qt.ItemIsSelectable | Qt.ItemIsEnabled)
                self.addsurveydlg.surveyReportsTableWidget.setItem(i, 0, citem)
                citem = QTableWidgetItem(self.addsurveydlg.all_reports_list[selected_report_index]['shortname'])
                citem.setToolTip(self.addsurveydlg.all_reports_list[selected_report_index]['name'])
                citem.setFlags(Qt.ItemIsSelectable | Qt.ItemIsEnabled)
                self.addsurveydlg.surveyReportsTableWidget.setItem(i, 1, citem)
            self.addsurveydlg.surveyReportsInput.setCurrentIndex(0)

        def unlink_existing_report():
            selected_reports_rows = list(set([x.row() for x in self.addsurveydlg.surveyReportsTableWidget.selectedItems()]))
            if selected_reports_rows:
                [self.addsurveydlg.reports_to_link.pop(x) for x in selected_reports_rows]
                [self.addsurveydlg.surveyReportsTableWidget.removeRow(x) for x in selected_reports_rows]

        def generate_and_execute_sql():
            with psycopg2.connect(self.dsn, cursor_factory=DictCursor) as pgconn:
                with pgconn.cursor() as cur:
                    sql = f"select * from nextval('{self.survey_id_seq}'::regclass)"
                    cur.execute(sql)
                    new_survey_id = cur.fetchall()[0][0]
            new_survey_name = self.addsurveydlg.surveyNameInput.text().replace("'", "''")
            selected_loc_type_index = self.addsurveydlg.surveyLocTypeInput.currentIndex()
            selected_loc_type_id = self.addsurveydlg.location_types_list[selected_loc_type_index]['location_type_id']
            selected_survey_type_index = self.addsurveydlg.surveyTypeInput.currentIndex()
            selected_survey_type_id = self.addsurveydlg.survey_types_list[selected_survey_type_index]['survey_type_id']
            selected_project_index = self.addsurveydlg.projectInput.currentIndex()
            selected_project_id = self.addsurveydlg.projects_list[selected_project_index]['id']
            new_survey_year = str(self.addsurveydlg.surveyYearInput.value())
            selected_author_index = self.addsurveydlg.surveyAuthorInput.currentIndex() - 1
            selected_contract_index = self.addsurveydlg.surveyContractInput.currentIndex() - 1
            fields_to_update = 'survey_id, name, location_type_id, type_id, project_id, year'
            values_to_insert = f"{str(new_survey_id)}, '{new_survey_name}', {str(selected_loc_type_id)}, {str(selected_survey_type_id)}, {str(selected_project_id)}, {str(new_survey_year)}"
            if selected_author_index >= 0:
                fields_to_update += ', acquisition_company_id'
                selected_author_id = self.addsurveydlg.companies_list[selected_author_index]['company_id']
                values_to_insert += f", {str(selected_author_id)}"
            if selected_contract_index >= 0:
                fields_to_update += ', acquisition_contract_id'
                selected_contract_id = self.addsurveydlg.contracts_list[selected_contract_index]['contract_id']
                values_to_insert += f", {str(selected_contract_id)}"
            self.sql = f"insert into {self.surveys}({fields_to_update}) values({values_to_insert})"
            for i, report in enumerate(self.addsurveydlg.reports_to_link):
                if i == 0:
                    self.sql += f"; insert into {self.reports_to_surveys}(report_id, survey_id) values({str(report['report_id'])}, {str(new_survey_id)})"
                elif i > 0:
                    self.sql += f", ({str(report['report_id'])}, {str(new_survey_id)})"
            self.sql += ';'
            # self.iface.messageBar().pushMessage('sql', self.sql, level=Qgis.Success, duration=5)
            mwidget = self.iface.messageBar().createMessage(
                f"Добавить в базу съемку {str(new_survey_name)}?")
            mbutton = QPushButton(mwidget)
            mbutton.setText('Подтвердить')
            mbutton.pressed.connect(self.execute_sql)
            mbutton.pressed.connect(self.refresh_surveys)
            mwidget.layout().addWidget(mbutton)
            self.iface.messageBar().pushWidget(mwidget, Qgis.Warning, duration=5)
            self.addsurveydlg.accept()
        self.addsurveydlg.addProjectButton.clicked.connect(self.add_project)
        self.addsurveydlg.refreshProjButton.clicked.connect(reload_projects)
        self.addsurveydlg.addCompanyButton.clicked.connect(self.add_company)
        self.addsurveydlg.authorFilterInput.textEdited.connect(reload_companies)
        self.addsurveydlg.refreshAuthorsButton.clicked.connect(reload_companies)
        self.addsurveydlg.addContractButton.clicked.connect(self.add_contract)
        self.addsurveydlg.contractFilterInput.textEdited.connect(reload_contracts)
        self.addsurveydlg.refreshContractsButton.clicked.connect(reload_contracts)
        self.addsurveydlg.addReportButton.clicked.connect(self.add_report)
        self.addsurveydlg.reportFilterInput.textEdited.connect(reload_reports)
        self.addsurveydlg.refreshReportsButton.clicked.connect(reload_reports)
        self.addsurveydlg.surveyReportsInput.activated.connect(link_existing_report)
        self.addsurveydlg.unlinkSelectedReportButton.clicked.connect(unlink_existing_report)
        self.addsurveydlg.insertSurveyButton.clicked.connect(generate_and_execute_sql)
        self.addsurveydlg.show()


    def delete_survey(self):
        selected_cells = self.wind.surveyTableWidget.selectedItems()
        selected_rows = list(set([x.row() for x in selected_cells]))
        if selected_rows:
            selected_survey_ids_list = [self.surveys_view_list[i]['survey_id'] for i in selected_rows]
            self.sql = f"delete from {self.surveys} where survey_id in ({', '.join([str(x) for x in selected_survey_ids_list])});" \
                       f" delete from {self.proc_geom_to_surveys} where survey_id in ({', '.join([str(x) for x in selected_survey_ids_list])});" \
                       f" delete from {self.reports_to_surveys} where survey_id in ({', '.join([str(x) for x in selected_survey_ids_list])});" \
                       f" update {self.seismic_lines_field_2d} set survey_id = NULL where survey_id in ({', '.join([str(x) for x in selected_survey_ids_list])});" \
                       f" update {self.seismic_pols_field_3d} set survey_id = NULL where survey_id in ({', '.join([str(x) for x in selected_survey_ids_list])});"
            mwidget = self.iface.messageBar().createMessage(f"Удалить из базы съемки {', '.join(['[' + x['name'] + ']' for x in [self.surveys_view_list[i] for i in selected_rows]])}? "
                                                            f"Это приведет к удалению их связей со всеми профилями, площадками, отчетами и другими связанными объектами.")
            mbutton = QPushButton(mwidget)
            mbutton.setText('Подтвердить')
            mbutton.pressed.connect(self.execute_sql)
            mbutton.pressed.connect(self.refresh_surveys)
            mwidget.layout().addWidget(mbutton)
            self.iface.messageBar().pushWidget(mwidget, Qgis.Warning, duration=5)


    def get_datasets_from_postgres(self):
        if self.mode == 'proc':
            selected_proc_rows = list(set([x.row() for x in self.wind.procTableWidget.selectedItems()]))
    
            # if selected_proc_rows:
            if selected_proc_rows:
                selected_proc_ids_string = ', '.join([str(self.proc_list[x]['proc_id']) for x in selected_proc_rows])
            sql = f"select * from {self.seismic_datasets_view}"
            if self.show_datasets_for_selected_proc:
                if selected_proc_rows:
                    sql += f" where dataset_id in " \
                           f"(select dataset_id from {self.datasets_to_geometries} " \
                            f"where geometry_id in (select line_id from {self.seismic_lines_processed_2d} where proc_id in ({selected_proc_ids_string})) " \
                            f" or geometry_id in (select pol_id from {self.seismic_pols_processed_3d} where proc_id in ({selected_proc_ids_string})))"
                else:
                    return False
            filter_str = self.wind.datasetFilterLineEdit.text().lower().strip().replace("'", "''")
            if filter_str:
                if self.show_datasets_for_selected_proc:
                    if selected_proc_rows:
                        sql += f" and (LOWER(datasource_type) like '%{filter_str}%'"
                    else:
                        return False
                else:
                    sql += f" where (LOWER(datasource_type) like '%{filter_str}%'"
                sql += f" or LOWER(shortname) like '%{filter_str}%'" \
                   f" or LOWER(name) like '%{filter_str}%'" \
                   f" or LOWER(seismic_type) like '%{filter_str}%'" \
                   f" or LOWER(format) like '%{filter_str}%'" \
                   f" or LOWER(data_quality) like '%{filter_str}%')"
            if self.dataset_id_filter:
                if self.show_datasets_for_selected_proc:
                    sql += f" and dataset_id in ({', '.join([str(x) for x in self.dataset_id_filter])})"
                else:
                    sql += f" where dataset_id in ({', '.join([str(x) for x in self.dataset_id_filter])})"
            if any([self.dataset_id_filter, filter_str, self.show_datasets_for_selected_proc]):
                sql += ' and'
            else:
                sql += ' where'
            sql += f" dataset_id in (select dataset_id from {self.datasets_to_geometries} where geometry_id in (select line_id from {self.seismic_lines_processed_2d}) or geometry_id in (select pol_id from {self.seismic_pols_processed_3d}))"
            sql += ' order by dataset_id;'
        elif self.mode == 'field':
            selected_survey_rows = list(set([x.row() for x in self.wind.surveyTableWidget.selectedItems()]))
            if selected_survey_rows:
                selected_survey_ids_string = ', '.join([str(self.surveys_view_list[x]['survey_id']) for x in selected_survey_rows])
            sql = f"select * from {self.seismic_datasets_view}"
            if self.show_datasets_for_selected_surveys:
                if selected_survey_rows:
                    sql += f" where dataset_id in " \
                           f"(select dataset_id from {self.datasets_to_geometries} " \
                           f"where geometry_id in (select field_line_id from {self.seismic_lines_field_2d} where survey_id in ({selected_survey_ids_string})) " \
                           f" or geometry_id in (select pol_id from {self.seismic_pols_field_3d} where survey_id in ({selected_survey_ids_string})))"
                else:
                    return False
            filter_str = self.wind.datasetFilterLineEdit.text().lower().strip()
            if filter_str:
                if self.show_datasets_for_selected_surveys:
                    if selected_survey_rows:
                        sql += f" and (LOWER(datasource_type) like '%{filter_str}%'"
                    else:
                        return False
                else:
                    sql += f" where (LOWER(datasource_type) like '%{filter_str}%'"
                sql += f" or LOWER(shortname) like '%{filter_str}%'" \
                       f" or LOWER(name) like '%{filter_str}%'" \
                       f" or LOWER(seismic_type) like '%{filter_str}%'" \
                       f" or LOWER(format) like '%{filter_str}%'" \
                       f" or LOWER(data_quality) like '%{filter_str}%')"
            if self.dataset_id_filter:
                if self.show_datasets_for_selected_surveys:
                    sql += f" and dataset_id in ({', '.join([str(x) for x in self.dataset_id_filter])})"
                else:
                    sql += f" where dataset_id in ({', '.join([str(x) for x in self.dataset_id_filter])})"
            if any([self.show_datasets_for_selected_surveys, filter_str, self.dataset_id_filter]):
                sql += ' and'
            else:
                sql += ' where'
            sql += f" dataset_id in (select dataset_id from {self.datasets_to_geometries} where geometry_id in (select field_line_id from {self.seismic_lines_field_2d}) or geometry_id in (select pol_id from {self.seismic_pols_field_3d}))"
            sql += ' order by dataset_id;'
        try:
            with psycopg2.connect(self.dsn, cursor_factory=DictCursor) as pgconn:
                if pgconn:
                    with pgconn.cursor() as cur:
                        cur.execute(sql)
                        self.seismic_datasets_view_list = list(cur.fetchall())
                        sql = f"select dataset_id, geometry_id from {self.datasets_to_geometries}"
                        cur.execute(sql)
                        self.datasets_to_geometries_list = list(cur.fetchall())
                        return True
                else:
                    self.iface.messageBar().pushMessage('Ошибка', 'Не удалось загрузить сведения о наборах данных из базы ' + sql,
                                                        level=Qgis.Critical, duration=5)
                    return False
        except:
            self.iface.messageBar().pushMessage('Ошибка', 'Не удалось загрузить сведения о наборах данных из базы ' + sql,
                                                level=Qgis.Critical, duration=5)
            return False


    def get_well_attrs_from_postgres(self):
        selected_well_rows = list(set([x.row() for x in self.wind.wellsTableWidget.selectedItems()]))
        if selected_well_rows:
            selected_well_ids_string = ', '.join([str(self.wells_view_list[x]['well_id']) for x in selected_well_rows])
            sql = f"select * from {self.well_attributes_view} where well_id in ({selected_well_ids_string})"
            filter_str = self.wind.wellAttrsFilterLineEdit.text().lower().strip().replace("'", "''")
            if filter_str:
                sql += f" and (LOWER(well_name_ru) like '%{filter_str}%'" \
                       f" or LOWER(well_name_en) like '%{filter_str}%'" \
                       f" or LOWER(well_attribute_name) like '%{filter_str}%'" \
                       f" or LOWER(well_attribute_value) like '%{filter_str}%'" \
                       f" or LOWER(source) like '%{filter_str}%'" \
                       f" or LOWER(comments) like '%{filter_str}%'" \
                       f" or LOWER(data_quality) like '%{filter_str}%'" \
                       f" or LOWER(link) like '%{filter_str}%'"\
                       f")"
            if self.well_attr_id_filter:
                sql += f" and well_attribute_id in ({', '.join([str(x) for x in self.well_attr_id_filter])})"
            sql += ';'
            try:
                with psycopg2.connect(self.dsn, cursor_factory=DictCursor) as pgconn:
                    if pgconn:
                        with pgconn.cursor() as cur:
                            cur.execute(sql)
                            self.well_attributes_view_list = list(cur.fetchall())
                            return True
                    else:
                        self.iface.messageBar().pushMessage('Ошибка',
                                                'Не удалось загрузить сведения об атрибутах скважин из базы ' + sql,
                                                level=Qgis.Critical, duration=5)
                        return False
            except:
                self.iface.messageBar().pushMessage('Ошибка',
                                                    'Не удалось загрузить сведения об атрибутах скважин из базы ' + sql,
                                                    level=Qgis.Critical, duration=5)
                return False


    def refresh_well_attrs(self):
        self.wind.wellAttrTableWidget.clear()
        self.wind.wellAttrTableWidget.setRowCount(0)
        self.wind.wellAttrTableWidget.setColumnCount(2)
        self.wind.wellAttrTableWidget.setHorizontalHeaderLabels(['Название', 'Значение'])
        header = self.wind.wellAttrTableWidget.horizontalHeader()
        header.resizeSection(0, 175)
        header.resizeSection(1, 175)
        if self.get_well_attrs_from_postgres():
            for i, well_attr in enumerate(self.well_attributes_view_list):
                self.wind.wellAttrTableWidget.insertRow(i)
                citem = QTableWidgetItem(well_attr['well_attribute_name'])
                citem.setToolTip(well_attr['well_attribute_name'])
                citem.setFlags(Qt.ItemIsSelectable | Qt.ItemIsEnabled)
                self.wind.wellAttrTableWidget.setItem(i, 0, citem)
                citem = QTableWidgetItem(well_attr['well_attribute_value'])
                citem.setToolTip(well_attr['well_attribute_value'])
                citem.setFlags(Qt.ItemIsSelectable | Qt.ItemIsEnabled)
                self.wind.wellAttrTableWidget.setItem(i, 1, citem)
        else:
            self.wind.wellAttrTableWidget.clear()


    def add_well_attr_name(self):
        self.addwellattrnamedlg = AddWellAttrNameDialog()
        def generate_and_execute_sql():
            new_attr_name_ru = self.addwellattrnamedlg.wellAttrNameRuLineEdit.text().strip().replace("'", "''")
            new_attr_name_en = self.addwellattrnamedlg.wellAttrNameEnLineEdit.text().strip().replace("'", "''")
            if new_attr_name_ru and new_attr_name_en:
                sql = f"insert into {self.well_attribute_names}(well_attribute_name_ru, well_attribute_name_en) values('{new_attr_name_ru}', '{new_attr_name_en}');"
                self.sql = sql
                mwidget = self.iface.messageBar().createMessage(f"Добавить в базу атрибут {new_attr_name_ru}?")
                mbutton = QPushButton(mwidget)
                mbutton.setText('Подтвердить')
                mbutton.pressed.connect(self.execute_sql)
                self.addwellattrnamedlg.accept()
                mwidget.layout().addWidget(mbutton)
                self.iface.messageBar().pushWidget(mwidget, Qgis.Warning, duration=5)
            else:
                self.iface.messageBar().pushMessage('Ошибка', 'Укажите название атрибута на русском и английском',
                                                    level=Qgis.Warning,
                                                    duration=5)
        self.addwellattrnamedlg.insertWellAttrNameButton.clicked.connect(generate_and_execute_sql)
        self.addwellattrnamedlg.show()


    def add_nda(self):
        self.addndadlg = AddNdaDialog()
        self.addndadlg.ndaRefreshCompaniesButton.setIcon(QIcon(':/plugins/geo_dm/refresh.png'))
        self.addndadlg.companies_a_list = None
        self.addndadlg.companies_b_list = None
        self.addndadlg.active_list = None
        self.addndadlg.conf_list = None

        def reload_companies_a():
            self.addndadlg.ndaCompanyAComboBox.clear()
            filter_str = self.addndadlg.ndaCompanyAFilterLineEdit.text().strip().lower().replace("'", "''")
            sql = f"select * from {self.companies}"
            if filter_str:
                sql += f" where (LOWER(name) like '%{filter_str}%'" \
                       f" or LOWER(shortname) like '%{filter_str}%'" \
                       f")"
            sql += ' order by name;'
            try:
                with psycopg2.connect(self.dsn, cursor_factory=DictCursor) as pgconn:
                    with pgconn.cursor() as cur:
                        cur.execute(sql)
                        self.addndadlg.companies_a_list = list(cur.fetchall())
                self.addndadlg.ndaCompanyAComboBox.addItem('--Выберите Компанию А--')
                self.addndadlg.ndaCompanyAComboBox.addItems([x['name'] for x in self.addndadlg.companies_a_list])
            except:
                self.iface.messageBar().pushMessage('Ошибка',
                                                    'Не удалось загрузить данные о компаниях из базы ' + sql,
                                                    level=Qgis.Critical,
                                                    duration=3)

        def reload_companies_b():
            self.addndadlg.ndaCompanyBComboBox.clear()
            filter_str = self.addndadlg.ndaCompanyBFilterLineEdit.text().strip().lower().replace("'", "''")
            sql = f"select * from {self.companies}"
            if filter_str:
                sql += f" where (LOWER(name) like '%{filter_str}%'" \
                       f" or LOWER(shortname) like '%{filter_str}%'" \
                       f")"
            sql += ' order by name;'
            try:
                with psycopg2.connect(self.dsn, cursor_factory=DictCursor) as pgconn:
                    with pgconn.cursor() as cur:
                        cur.execute(sql)
                        self.addndadlg.companies_b_list = list(cur.fetchall())
                self.addndadlg.ndaCompanyBComboBox.addItem('--Выберите Компанию B--')
                self.addndadlg.ndaCompanyBComboBox.addItems([x['name'] for x in self.addndadlg.companies_b_list])
            except:
                self.iface.messageBar().pushMessage('Ошибка',
                                                    'Не удалось загрузить данные о компаниях из базы ' + sql,
                                                    level=Qgis.Critical,
                                                    duration=3)

        def reload_active():
            self.addndadlg.ndaActiveComboBox.clear()
            self.addndadlg.active_list = ['YES', 'NO']
            self.addndadlg.ndaActiveComboBox.addItem('--Выберите акуальность--')
            self.addndadlg.ndaActiveComboBox.addItems(self.addndadlg.active_list)

        def reload_conf():
            self.addndadlg.ndaConfComboBox.clear()
            sql = f"select * from {self.conf};"
            try:
                with psycopg2.connect(self.dsn, cursor_factory=DictCursor) as pgconn:
                    with pgconn.cursor() as cur:
                        cur.execute(sql)
                        self.addndadlg.conf_list = list(cur.fetchall())
                self.addndadlg.ndaConfComboBox.addItem('--Выберите конфиденциальность--')
                self.addndadlg.ndaConfComboBox.addItems([x['conf_name'] for x in self.addndadlg.conf_list])
            except:
                self.iface.messageBar().pushMessage('Ошибка',
                                                    'Не удалось загрузить данные о конфиденциальности ' + sql,
                                                    level=Qgis.Critical,
                                                    duration=3)

        def generate_and_execute_sql():
            new_nda_name = self.addndadlg.ndaNameLineEdit.text().strip().replace("'", "''")
            selected_company_a_index = self.addndadlg.ndaCompanyAComboBox.currentIndex() - 1
            selected_company_b_index = self.addndadlg.ndaCompanyBComboBox.currentIndex() - 1
            new_subject = self.addndadlg.ndaSubjectPlainTextEdit.toPlainText().strip().replace("'", "''")
            new_nda_date = self.addndadlg.ndaDateSignedCalendarWidget.selectedDate()
            new_source = self.addndadlg.ndaSourcePlainTextEdit.toPlainText().strip().replace("'", "''")
            new_comments = self.addndadlg.ndaSourcePlainTextEdit.toPlainText().strip().replace("'", "''")
            selected_active_index = self.addndadlg.ndaActiveComboBox.currentIndex() - 1
            new_scan_link = self.addndadlg.ndaScalLinkPlainTextEdit.toPlainText().strip().replace("'", "''")
            selected_conf_index = self.addndadlg.ndaConfComboBox.currentIndex() - 1
            if all([new_nda_name, selected_company_a_index >= 0, selected_company_b_index >= 0]):
                selected_company_a_id = self.addndadlg.companies_a_list[selected_company_a_index]['company_id']
                selected_company_b_id = self.addndadlg.companies_b_list[selected_company_b_index]['company_id']
                fields_to_update = ['name', 'company_a_id', 'company_b_id']
                values_to_insert = [f"'{new_nda_name}'", str(selected_company_a_id), str(selected_company_b_id)]
                if new_subject:
                    fields_to_update.append('subject')
                    values_to_insert.append(f"'{new_subject}'")
                if new_nda_date:
                    fields_to_update.append('date_signed')
                    values_to_insert.append(f"'{new_nda_date.toString('yyyy-MM-dd')}'")
                if new_source:
                    fields_to_update.append('source')
                    values_to_insert.append(f"'{new_source}'")
                if new_comments:
                    fields_to_update.append('comments')
                    values_to_insert.append(f"'{new_comments}'")
                if selected_active_index >= 0:
                    fields_to_update.append('active')
                    values_to_insert.append(f"'{self.addndadlg.active_list[selected_active_index]}'")
                if new_scan_link:
                    fields_to_update.append('scan_link')
                    values_to_insert.append(f"'{new_scan_link}'")
                if selected_conf_index >= 0:
                    fields_to_update.append('conf_id')
                    values_to_insert.append(str(self.addndadlg.conf_list[selected_conf_index]['conf_id']))
                sql = f"insert into {self.nda}({', '.join(fields_to_update)}) values({', '.join(values_to_insert)});"
                self.sql = sql
                mwidget = self.iface.messageBar().createMessage(f"Добавить в базу NDA '{new_nda_name}'?")
                mbutton = QPushButton(mwidget)
                mbutton.setText('Подтвердить')
                mbutton.pressed.connect(self.execute_sql)
                self.addndadlg.accept()
                mwidget.layout().addWidget(mbutton)
                self.iface.messageBar().pushWidget(mwidget, Qgis.Warning, duration=5)
            else:
                self.iface.messageBar().pushMessage('Ошибка',
                                                    'Нужно ввести Название, выбрать Компанию А и Компанию B',
                                                    level=Qgis.Warning,
                                                    duration=5)
        reload_companies_a()
        reload_companies_b()
        reload_active()
        reload_conf()
        self.addndadlg.ndaCompanyAFilterLineEdit.textEdited.connect(reload_companies_a)
        self.addndadlg.ndaCompanyBFilterLineEdit.textEdited.connect(reload_companies_b)
        self.addndadlg.ndaRefreshCompaniesButton.clicked.connect(reload_companies_a)
        self.addndadlg.ndaRefreshCompaniesButton.clicked.connect(reload_companies_b)
        self.addndadlg.ndaAddCompanyButton.clicked.connect(self.add_company)
        self.addndadlg.insertNdaButton.clicked.connect(generate_and_execute_sql)
        self.addndadlg.show()


    def delete_well_attrs(self):
        selected_well_attr_rows = list(set([x.row() for x in self.wind.wellAttrTableWidget.selectedItems()]))
        if selected_well_attr_rows:
            selected_well_attr_ids = [y['well_attribute_id'] for y in [self.well_attributes_view_list[x] for x in selected_well_attr_rows]]
            sql = f"delete from {self.well_attributes} where well_attribute_id in ({', '.join([str(x) for x in selected_well_attr_ids])});"
            self.sql = sql
            mwidget = self.iface.messageBar().createMessage(f"Удалить {str(len(selected_well_attr_ids))} выбранных атрибутов?")
            mbutton = QPushButton(mwidget)
            mbutton.setText('Подтвердить')
            mbutton.pressed.connect(self.execute_sql)
            mwidget.layout().addWidget(mbutton)
            self.iface.messageBar().pushWidget(mwidget, Qgis.Warning, duration=5)
        else:
            self.iface.messageBar().pushMessage('Ошибка', 'Нужно выбрать хотя бы один атрибут скважин',
                                                level=Qgis.Warning,
                                                duration=3)


    def update_well_attr(self):
        selected_well_attr_rows = list(set([x.row() for x in self.wind.wellAttrTableWidget.selectedItems()]))
        if selected_well_attr_rows:
            self.updatewellattrdlg = AddWellAttrDialog()
            self.updatewellattrdlg.wellAttrRefreshAttrTypesButton.setIcon(QIcon(':/plugins/geo_dm/refresh.png'))
            self.updatewellattrdlg.wellAttrRefreshLinksButton.setIcon(QIcon(':/plugins/geo_dm/refresh.png'))
            self.updatewellattrdlg.wellAttrRefreshNdaButton.setIcon(QIcon(':/plugins/geo_dm/refresh.png'))
            self.updatewellattrdlg.setWindowTitle('Изменить атрибуты скважин')
            self.updatewellattrdlg.insertWellAttrButton.setText('Изменить атрибуты скважин')
            
            selected_well_attrs = [self.well_attributes_view_list[x] for x in selected_well_attr_rows]
            self.updatewellattrdlg.selected_well_attrs_ids = [x['well_attribute_id'] for x in selected_well_attrs]

            self.updatewellattrdlg.well_attr_types_list = None
            self.updatewellattrdlg.links_list = None
            self.updatewellattrdlg.data_quality_list = None
            self.updatewellattrdlg.nda_view_list = None
            
            def reload_well_attr_types():
                self.updatewellattrdlg.wellAttrTypeComboBox.clear()
                filter_str = self.updatewellattrdlg.wellAttrTypeFilterLineEdit.text().strip().lower().replace("'", "''")
                sql = f"select * from {self.well_attribute_names}"
                if filter_str:
                    sql += f" where (LOWER(well_attribute_name_ru) like '%{filter_str}%'" \
                           f" or LOWER(well_attribute_name_en) like '%{filter_str}%'" \
                           f")"
                sql += ';'
                try:
                    with psycopg2.connect(self.dsn, cursor_factory=DictCursor) as pgconn:
                        with pgconn.cursor() as cur:
                            cur.execute(sql)
                            self.updatewellattrdlg.well_attr_types_list = list(cur.fetchall())
                            self.updatewellattrdlg.wellAttrTypeComboBox.addItem('--Выберите тип--')
                            self.updatewellattrdlg.wellAttrTypeComboBox.addItems([x['well_attribute_name_ru'] for x in self.updatewellattrdlg.well_attr_types_list])
                            self.updatewellattrdlg.wellAttrTypeComboBox.setCurrentText(selected_well_attrs[0]['well_attribute_name'])
                except:
                    self.iface.messageBar().pushMessage('Ошибка',
                                                        'Не удалось загрузить данные о типах атрибутов скважин из базы ' + sql,
                                                        level=Qgis.Critical,
                                                        duration=3)

            def reload_well_attr_value():
                if selected_well_attrs[0]['well_attribute_value']:
                    self.updatewellattrdlg.wellAttrValuePlainTextEdit.setPlainText(selected_well_attrs[0]['well_attribute_value'])

            def reload_links():
                self.updatewellattrdlg.wellAttrLinkComboBox.clear()
                filter_str = self.updatewellattrdlg.wellAttrLinkLineEdit.text().strip().lower().replace("'", "''")
                sql = f"select * from {self.links}"
                if filter_str:
                    sql += f" where LOWER(link) like '%{filter_str}%'"
                sql += ';'
                try:
                    with psycopg2.connect(self.dsn, cursor_factory=DictCursor) as pgconn:
                        with pgconn.cursor() as cur:
                            cur.execute(sql)
                            self.updatewellattrdlg.links_list = list(cur.fetchall())
                            self.updatewellattrdlg.wellAttrLinkComboBox.addItem('--Выберите ссылку--')
                            self.updatewellattrdlg.wellAttrLinkComboBox.addItems([x['link'] for x in self.updatewellattrdlg.links_list])
                    if selected_well_attrs[0]['link']:
                        self.updatewellattrdlg.wellAttrLinkComboBox.setCurrentText(selected_well_attrs[0]['link'])
                except:
                    self.iface.messageBar().pushMessage('Ошибка',
                                                        'Не удалось загрузить данные о ссылках из базы ' + sql,
                                                        level=Qgis.Critical,
                                                        duration=3)

            def reload_well_attr_source():
                if selected_well_attrs[0]['source']:
                    self.updatewellattrdlg.wellAttrSourcePlainTextEdit.setPlainText(selected_well_attrs[0]['source'])

            def reload_well_attr_date():
                if selected_well_attrs[0]['datestamp']:
                    a_date = selected_well_attrs[0]['datestamp']
                    self.updatewellattrdlg.wellAttrDateCalendarWidget.setSelectedDate(QDate(a_date.year, a_date.month, a_date.day))
            
            def reload_data_quality():
                self.updatewellattrdlg.wellAttrDataQualityComboBox.clear()
                sql = f"select * from {self.data_quality} order by quality_range DESC"
                sql += ';'
                try:
                    with psycopg2.connect(self.dsn, cursor_factory=DictCursor) as pgconn:
                        with pgconn.cursor() as cur:
                            cur.execute(sql)
                            self.updatewellattrdlg.data_quality_list = list(cur.fetchall())
                            self.updatewellattrdlg.wellAttrDataQualityComboBox.addItem('--Выберите качество данных--')
                            self.updatewellattrdlg.wellAttrDataQualityComboBox.addItems([x['name_ru'] for x in self.updatewellattrdlg.data_quality_list])
                    if selected_well_attrs[0]['data_quality']:
                        self.updatewellattrdlg.wellAttrDataQualityComboBox.setCurrentText(selected_well_attrs[0]['data_quality'])
                except:
                    self.iface.messageBar().pushMessage('Ошибка',
                                                        'Не удалось загрузить данные о качестве данных из базы ' + sql,
                                                        level=Qgis.Critical,
                                                        duration=3)
            
            def reload_nda():
                self.updatewellattrdlg.wellAttrNdaComboBox.clear()
                sql = f"select * from {self.nda_view}"
                filter_str = self.updatewellattrdlg.wellAttrNdaFilterLineEdit.text().strip().lower().replace("'", "''")
                if filter_str:
                    sql += f" where (LOWER(name) like '%{filter_str}%'" \
                           f" or LOWER(number) like '%{filter_str}%'" \
                           f" or LOWER(company_a_name) like '%{filter_str}%'" \
                           f" or LOWER(company_a_shortname) like '%{filter_str}%'" \
                           f" or LOWER(company_b_name) like '%{filter_str}%'" \
                           f" or LOWER(company_b_shortname) like '%{filter_str}%'" \
                           f" or LOWER(date_signed::text) like '%{filter_str}%'" \
                           f")"
                sql += ' order by date_signed DESC;'
                try:
                    with psycopg2.connect(self.dsn, cursor_factory=DictCursor) as pgconn:
                        with pgconn.cursor() as cur:
                            cur.execute(sql)
                            self.updatewellattrdlg.nda_view_list = list(cur.fetchall())
                            self.updatewellattrdlg.wellAttrNdaComboBox.addItem('--Выберите NDA--')
                            nda_combo_values = []
                            for nda in self.updatewellattrdlg.nda_view_list:
                                nda_str = ''
                                if nda['company_a_shortname']:
                                    nda_str += nda['company_a_shortname']
                                if nda['company_b_shortname']:
                                    if nda['company_a_shortname']:
                                        nda_str += ' - '
                                    nda_str += nda['company_b_shortname']
                                if nda['date_signed']:
                                    nda_str += f" от {str(nda['date_signed'])}"
                                nda_combo_values.append(nda_str)
                            self.updatewellattrdlg.wellAttrNdaComboBox.addItems(nda_combo_values)
                    if selected_well_attrs[0]['nda_id']:
                        a_nda_id = selected_well_attrs[0]['nda_id']
                        a_nda = [x for x in self.updatewellattrdlg.nda_view_list if x['nda_id'] == a_nda_id][0]
                        self.updatewellattrdlg.wellAttrNdaComboBox.setCurrentIndex(self.updatewellattrdlg.nda_view_list.index(a_nda) + 1)
                except:
                    self.iface.messageBar().pushMessage('Ошибка',
                                                        'Не удалось загрузить данные о качестве данных из базы ' + sql,
                                                        level=Qgis.Critical,
                                                        duration=3)

            def reload_well_attr_comments():
                if selected_well_attrs[0]['comments']:
                    self.updatewellattrdlg.wellAttrCommentsPlainTextEdit.setPlainText(selected_well_attrs[0]['comments'])
            
            def generate_and_execute_sql():
                # selected_well_rows = list(set([x.row() for x in self.wind.wellsTableWidget.selectedItems()]))
                # selected_well_index = self.updatewellattrdlg.wellAttrWellComboBox.currentIndex()
                # selected_well_id = self.updatewellattrdlg.wells_view_list[selected_well_index]['well_id']
                # selected_well_ids = [str(self.wells_view_list[x]['well_id']) for x in selected_well_rows]
                selected_well_attr_name_index = self.updatewellattrdlg.wellAttrTypeComboBox.currentIndex() - 1
                new_well_attr_value = self.updatewellattrdlg.wellAttrValuePlainTextEdit.toPlainText().strip().replace("'", "''")
                selected_link_index = self.updatewellattrdlg.wellAttrLinkComboBox.currentIndex() - 1
                new_source = self.updatewellattrdlg.wellAttrSourcePlainTextEdit.toPlainText().strip().replace("'", "''")
                new_datestamp = self.updatewellattrdlg.wellAttrDateCalendarWidget.selectedDate().toString('yyyy-MM-dd')
                selected_data_quality_index = self.updatewellattrdlg.wellAttrDataQualityComboBox.currentIndex() - 1
                selected_nda_index = self.updatewellattrdlg.wellAttrNdaComboBox.currentIndex() - 1
                new_comments = self.updatewellattrdlg.wellAttrCommentsPlainTextEdit.toPlainText().strip().replace("'", "''")
                if selected_well_attr_name_index >= 0 and new_well_attr_value:
                    selected_well_attr_name_id = self.updatewellattrdlg.well_attr_types_list[selected_well_attr_name_index]['well_attribute_name_id']
                    # fields_to_update = ['well_id', 'well_attribute_name_id', 'well_attribute_value']
                    fields_to_update = ['well_attribute_name_id', 'well_attribute_value']
                    # values_to_insert = [str(selected_well_id), str(selected_well_attr_name_id), new_well_attr_value]
                    values_to_insert = [str(selected_well_attr_name_id), f"'{new_well_attr_value}'"]
                    if selected_link_index >= 0:
                        selected_link_id = self.updatewellattrdlg.links_list[selected_link_index]['link_id']
                    else:
                        selected_link_id = 'NULL'
                    fields_to_update.append('link_id')
                    values_to_insert.append(str(selected_link_id))
                    fields_to_update.append('source')
                    if new_source:
                        values_to_insert.append(f"'{new_source}'")
                    else:
                        values_to_insert.append('NULL')
                    fields_to_update.append('datestamp')
                    if new_datestamp != '1970-01-01':
                        values_to_insert.append(f"'{new_datestamp}'")
                    else:
                        values_to_insert.append('NULL')
                    fields_to_update.append('data_quality_id')
                    if selected_data_quality_index >= 0:
                        selected_data_quality_id = self.updatewellattrdlg.data_quality_list[selected_data_quality_index]['data_quality_id']
                    else:
                        selected_data_quality_id = 'NULL'
                    values_to_insert.append(str(selected_data_quality_id))
                    fields_to_update.append('nda_id')
                    if selected_nda_index >= 0:
                        selected_nda_id = self.updatewellattrdlg.nda_view_list[selected_nda_index]['nda_id']
                    else:
                        selected_nda_id = 'NULL'
                    values_to_insert.append(str(selected_nda_id))
                    fields_to_update.append('comments')
                    if new_comments:
                        values_to_insert.append(f"'{new_comments}'")
                    else:
                        values_to_insert.append('NULL')
                    # sql = f"insert into {self.well_attributes}({', '.join(fields_to_update)}) values({', '.join(values_to_insert)});"
                    # sql = f"insert into {self.well_attributes}(well_id, {', '.join(fields_to_update)}) values{', '.join(['(' + x + ', ' + ', '.join([y for y in values_to_insert]) + ')' for x in selected_well_ids])};"
                    sql = f"update {self.well_attributes} set {', '.join([x[0] + ' = ' + x[1] for x in zip(fields_to_update, values_to_insert)])}" \
                          f" where well_attribute_id in ({', '.join([str(x) for x in self.updatewellattrdlg.selected_well_attrs_ids])});"
                    self.sql = sql
                    # mwidget = self.iface.messageBar().createMessage(f"Добавить в базу атрибут "
                    #                                                 f"{self.updatewellattrdlg.well_attr_types_list[selected_well_attr_name_index]['well_attribute_name_ru']}"
                    #                                                 f" для скважины {self.updatewellattrdlg.wells_view_list[selected_well_index]['name_ru']}?")
                    mwidget = self.iface.messageBar().createMessage(f"Изменить {str(len(self.updatewellattrdlg.selected_well_attrs_ids))} выбранных атрибутов?"
                                                                    f" Внимание! указанные значение будут присвоены всем выбранным атрибутам!")
                    mbutton = QPushButton(mwidget)
                    mbutton.setText('Подтвердить')
                    mbutton.pressed.connect(self.execute_sql)
                    self.updatewellattrdlg.accept()
                    mwidget.layout().addWidget(mbutton)
                    self.iface.messageBar().pushWidget(mwidget, Qgis.Warning, duration=5)
                else:
                    self.iface.messageBar().pushMessage('Ошибка',
                                                        'Укажите тип и значение атрибута',
                                                        level=Qgis.Critical,
                                                        duration=3)

            reload_well_attr_types()
            reload_well_attr_value()
            reload_links()
            reload_well_attr_source()
            reload_well_attr_date()
            reload_data_quality()
            reload_nda()
            reload_well_attr_comments()

            self.updatewellattrdlg.wellAttrTypeFilterLineEdit.textEdited.connect(reload_well_attr_types)
            self.updatewellattrdlg.wellAttrRefreshAttrTypesButton.clicked.connect(reload_well_attr_types)
            self.updatewellattrdlg.wellAttrNewAttrTypeButton.clicked.connect(self.add_well_attr_name)
            self.updatewellattrdlg.wellAttrLinkLineEdit.textEdited.connect(reload_links)
            self.updatewellattrdlg.wellAttrRefreshLinksButton.clicked.connect(reload_links)
            self.updatewellattrdlg.wellAttrNewLinkButton.clicked.connect(self.add_link)
            self.updatewellattrdlg.wellAttrNdaFilterLineEdit.textEdited.connect(reload_nda)
            self.updatewellattrdlg.wellAttrRefreshNdaButton.clicked.connect(reload_nda)
            self.updatewellattrdlg.wellAttrNewNdaButton.clicked.connect(self.add_nda)
            self.updatewellattrdlg.insertWellAttrButton.clicked.connect(generate_and_execute_sql)

            self.updatewellattrdlg.show()
        else:
            self.iface.messageBar().pushMessage('Ошибка', 'Нужно выбрать хотя бы один набор данных скважин', level=Qgis.Warning,
                                                duration=3)


    def add_well_attr(self):
        selected_well_rows = list(set([x.row() for x in self.wind.wellsTableWidget.selectedItems()]))
        if selected_well_rows:

            self.addwellattrdlg = AddWellAttrDialog()
            self.addwellattrdlg.wellAttrRefreshAttrTypesButton.setIcon(QIcon(':/plugins/geo_dm/refresh.png'))
            self.addwellattrdlg.wellAttrRefreshLinksButton.setIcon(QIcon(':/plugins/geo_dm/refresh.png'))
            self.addwellattrdlg.wellAttrRefreshNdaButton.setIcon(QIcon(':/plugins/geo_dm/refresh.png'))

            self.addwellattrdlg.selected_well_row = selected_well_rows[0]
            self.addwellattrdlg.selected_well = self.wells_view_list[self.addwellattrdlg.selected_well_row]

            self.addwellattrdlg.wells_view_list = None
            self.addwellattrdlg.well_attr_types_list = None
            self.addwellattrdlg.links_list = None
            self.addwellattrdlg.data_quality_list = None
            self.addwellattrdlg.nda_view_list = None

            # def reload_wells():
            #     self.addwellattrdlg.wellAttrWellComboBox.clear()
            #     core_filter_str = self.wind.wellsFilterLineEdit.text()
            #     if core_filter_str:
            #         self.addwellattrdlg.wellAttrWellFilterLineEdit.setText(core_filter_str)
            #     filter_str = self.addwellattrdlg.wellAttrWellFilterLineEdit.text().strip().lower().replace("'", "''")
            #
            #     sql = f"select * from {self.wells_view}"
            #     if filter_str:
            #         sql += f" where (" \
            #                f"LOWER(name_ru) like '%{filter_str}%'" \
            #                f" or LOWER(name_en) like '%{filter_str}%'" \
            #                f" or LOWER(well_type) like '%{filter_str}%'" \
            #                f" or LOWER(area_name_ru) like '%{filter_str}%'" \
            #                f" or LOWER(area_name_en) like '%{filter_str}%'" \
            #                f" or LOWER(well_uwi::text) like '%{filter_str}%'" \
            #                f")"
            #     sql += ';'
            #     try:
            #         with psycopg2.connect(self.dsn, cursor_factory=DictCursor) as pgconn:
            #             with pgconn.cursor() as cur:
            #                 cur.execute(sql)
            #                 self.addwellattrdlg.wells_view_list = list(cur.fetchall())
            #                 self.addwellattrdlg.wellAttrWellComboBox.addItems([x['name_ru'] or x['name_en'] or x['area_name_ru'] + '-' + x['well_number'] for x in self.addwellattrdlg.wells_view_list])
            #                 self.addwellattrdlg.wellAttrWellComboBox.setCurrentIndex([x['well_id'] for x in self.addwellattrdlg.wells_view_list].index(self.addwellattrdlg.selected_well['well_id']))
            #     except:
            #         self.iface.messageBar().pushMessage('Ошибка', 'Не удалось загрузить данные о скважинах из базы ' + sql, level=Qgis.Critical,
            #                                             duration=3)

            def reload_well_attr_types():
                self.addwellattrdlg.wellAttrTypeComboBox.clear()
                filter_str = self.addwellattrdlg.wellAttrTypeFilterLineEdit.text().strip().lower().replace("'", "''")
                sql = f"select * from {self.well_attribute_names}"
                if filter_str:
                    sql += f" where (LOWER(well_attribute_name_ru) like '%{filter_str}%'" \
                           f" or LOWER(well_attribute_name_en) like '%{filter_str}%'" \
                           f")"
                sql += ';'
                try:
                    with psycopg2.connect(self.dsn, cursor_factory=DictCursor) as pgconn:
                        with pgconn.cursor() as cur:
                            cur.execute(sql)
                            self.addwellattrdlg.well_attr_types_list = list(cur.fetchall())
                            self.addwellattrdlg.wellAttrTypeComboBox.addItem('--Выберите тип--')
                            self.addwellattrdlg.wellAttrTypeComboBox.addItems([x['well_attribute_name_ru'] for x in self.addwellattrdlg.well_attr_types_list])
                except:
                    self.iface.messageBar().pushMessage('Ошибка',
                                                        'Не удалось загрузить данные о типах атрибутов скважин из базы ' + sql,
                                                        level=Qgis.Critical,
                                                        duration=3)

            def reload_links():
                self.addwellattrdlg.wellAttrLinkComboBox.clear()
                filter_str = self.addwellattrdlg.wellAttrLinkLineEdit.text().strip().lower().replace("'", "''")
                sql = f"select * from {self.links}"
                if filter_str:
                    sql += f" where LOWER(link) like '%{filter_str}%'"
                sql += ';'
                try:
                    with psycopg2.connect(self.dsn, cursor_factory=DictCursor) as pgconn:
                        with pgconn.cursor() as cur:
                            cur.execute(sql)
                            self.addwellattrdlg.links_list = list(cur.fetchall())
                            self.addwellattrdlg.wellAttrLinkComboBox.addItem('--Выберите ссылку--')
                            self.addwellattrdlg.wellAttrLinkComboBox.addItems([x['link'] for x in self.addwellattrdlg.links_list])
                except:
                    self.iface.messageBar().pushMessage('Ошибка',
                                                        'Не удалось загрузить данные о ссылках из базы ' + sql,
                                                        level=Qgis.Critical,
                                                        duration=3)

            def reload_data_quality():
                self.addwellattrdlg.wellAttrDataQualityComboBox.clear()
                sql = f"select * from {self.data_quality} order by quality_range DESC"
                sql += ';'
                try:
                    with psycopg2.connect(self.dsn, cursor_factory=DictCursor) as pgconn:
                        with pgconn.cursor() as cur:
                            cur.execute(sql)
                            self.addwellattrdlg.data_quality_list = list(cur.fetchall())
                            self.addwellattrdlg.wellAttrDataQualityComboBox.addItem('--Выберите качество данных--')
                            self.addwellattrdlg.wellAttrDataQualityComboBox.addItems([x['name_ru'] for x in self.addwellattrdlg.data_quality_list])
                except:
                    self.iface.messageBar().pushMessage('Ошибка',
                                                        'Не удалось загрузить данные о качестве данных из базы ' + sql,
                                                        level=Qgis.Critical,
                                                        duration=3)

            def reload_nda():
                self.addwellattrdlg.wellAttrNdaComboBox.clear()
                sql = f"select * from {self.nda_view}"
                filter_str = self.addwellattrdlg.wellAttrNdaFilterLineEdit.text().strip().lower().replace("'", "''")
                if filter_str:
                    sql += f" where (LOWER(name) like '%{filter_str}%'" \
                           f" or LOWER(number) like '%{filter_str}%'" \
                           f" or LOWER(company_a_name) like '%{filter_str}%'" \
                           f" or LOWER(company_a_shortname) like '%{filter_str}%'" \
                           f" or LOWER(company_b_name) like '%{filter_str}%'" \
                           f" or LOWER(company_b_shortname) like '%{filter_str}%'" \
                           f" or LOWER(date_signed::text) like '%{filter_str}%'" \
                           f")"
                sql += ' order by date_signed DESC;'
                try:
                    with psycopg2.connect(self.dsn, cursor_factory=DictCursor) as pgconn:
                        with pgconn.cursor() as cur:
                            cur.execute(sql)
                            self.addwellattrdlg.nda_view_list = list(cur.fetchall())
                            self.addwellattrdlg.wellAttrNdaComboBox.addItem('--Выберите NDA--')
                            nda_combo_values = []
                            for nda in self.addwellattrdlg.nda_view_list:
                                nda_str = ''
                                if nda['company_a_shortname']:
                                    nda_str += nda['company_a_shortname']
                                if nda['company_b_shortname']:
                                    if nda['company_a_shortname']:
                                        nda_str += ' - '
                                    nda_str += nda['company_b_shortname']
                                if nda['date_signed']:
                                    nda_str += f" от {str(nda['date_signed'])}"
                                nda_combo_values.append(nda_str)
                            self.addwellattrdlg.wellAttrNdaComboBox.addItems(nda_combo_values)
                except:
                    self.iface.messageBar().pushMessage('Ошибка',
                                                        'Не удалось загрузить данные о качестве данных из базы ' + sql,
                                                        level=Qgis.Critical,
                                                        duration=3)

            def generate_and_execute_sql():
                selected_well_rows = list(set([x.row() for x in self.wind.wellsTableWidget.selectedItems()]))
                # selected_well_index = self.addwellattrdlg.wellAttrWellComboBox.currentIndex()
                # selected_well_id = self.addwellattrdlg.wells_view_list[selected_well_index]['well_id']
                selected_well_ids = [str(self.wells_view_list[x]['well_id']) for x in selected_well_rows]
                selected_well_attr_name_index = self.addwellattrdlg.wellAttrTypeComboBox.currentIndex() - 1
                new_well_attr_value = self.addwellattrdlg.wellAttrValuePlainTextEdit.toPlainText().strip().replace("'", "''")
                selected_link_index = self.addwellattrdlg.wellAttrLinkComboBox.currentIndex() - 1
                new_source = self.addwellattrdlg.wellAttrSourcePlainTextEdit.toPlainText().strip().replace("'", "''")
                new_datestamp = self.addwellattrdlg.wellAttrDateCalendarWidget.selectedDate().toString('yyyy-MM-dd')
                selected_data_quality_index = self.addwellattrdlg.wellAttrDataQualityComboBox.currentIndex() - 1
                selected_nda_index = self.addwellattrdlg.wellAttrNdaComboBox.currentIndex() - 1
                new_comments = self.addwellattrdlg.wellAttrCommentsPlainTextEdit.toPlainText().strip().replace("'", "''")
                if selected_well_attr_name_index >= 0 and new_well_attr_value:
                    selected_well_attr_name_id = self.addwellattrdlg.well_attr_types_list[selected_well_attr_name_index]['well_attribute_name_id']
                    # fields_to_update = ['well_id', 'well_attribute_name_id', 'well_attribute_value']
                    fields_to_update = ['well_attribute_name_id', 'well_attribute_value']
                    # values_to_insert = [str(selected_well_id), str(selected_well_attr_name_id), new_well_attr_value]
                    values_to_insert = [str(selected_well_attr_name_id), f"'{new_well_attr_value}'"]
                    if selected_link_index >= 0:
                        selected_link_id = self.addwellattrdlg.links_list[selected_link_index]['link_id']
                        fields_to_update.append('link_id')
                        values_to_insert.append(str(selected_link_id))
                    if new_source:
                        fields_to_update.append('source')
                        values_to_insert.append(f"'{new_source}'")
                    if new_datestamp != '1970-01-01':
                        fields_to_update.append('datestamp')
                        values_to_insert.append(f"'{new_datestamp}'")
                    if selected_data_quality_index >= 0:
                        selected_data_quality_id = self.addwellattrdlg.data_quality_list[selected_data_quality_index]['data_quality_id']
                        fields_to_update.append('data_quality_id')
                        values_to_insert.append(str(selected_data_quality_id))
                    if selected_nda_index >= 0:
                        selected_nda_id = self.addwellattrdlg.nda_view_list[selected_nda_index]['nda_id']
                        fields_to_update.append('nda_id')
                        values_to_insert.append(str(selected_nda_id))
                    if new_comments:
                        fields_to_update.append('comments')
                        values_to_insert.append(f"'{new_comments}'")
                    # sql = f"insert into {self.well_attributes}({', '.join(fields_to_update)}) values({', '.join(values_to_insert)});"
                    sql = f"insert into {self.well_attributes}(well_id, {', '.join(fields_to_update)}) values{', '.join(['(' + x + ', ' + ', '.join([y for y in values_to_insert]) + ')' for x in selected_well_ids])};"
                    self.sql = sql
                    # mwidget = self.iface.messageBar().createMessage(f"Добавить в базу атрибут "
                    #                                                 f"{self.addwellattrdlg.well_attr_types_list[selected_well_attr_name_index]['well_attribute_name_ru']}"
                    #                                                 f" для скважины {self.addwellattrdlg.wells_view_list[selected_well_index]['name_ru']}?")
                    mwidget = self.iface.messageBar().createMessage(f"Добавить в базу атрибут "
                                                                    f"{self.addwellattrdlg.well_attr_types_list[selected_well_attr_name_index]['well_attribute_name_ru']}"
                                                                    f" для {str(len(selected_well_ids))} выбранных скважин?")
                    mbutton = QPushButton(mwidget)
                    mbutton.setText('Подтвердить')
                    mbutton.pressed.connect(self.execute_sql)
                    self.addwellattrdlg.accept()
                    mwidget.layout().addWidget(mbutton)
                    self.iface.messageBar().pushWidget(mwidget, Qgis.Warning, duration=5)
                else:
                    self.iface.messageBar().pushMessage('Ошибка',
                                                        'Укажите тип и значение атрибута',
                                                        level=Qgis.Critical,
                                                        duration=3)

            # reload_wells()
            reload_well_attr_types()
            reload_links()
            reload_data_quality()
            reload_nda()

            # self.addwellattrdlg.wellAttrWellFilterLineEdit.textEdited.connect(reload_wells)
            self.addwellattrdlg.wellAttrTypeFilterLineEdit.textEdited.connect(reload_well_attr_types)
            self.addwellattrdlg.wellAttrRefreshAttrTypesButton.clicked.connect(reload_well_attr_types)
            self.addwellattrdlg.wellAttrNewAttrTypeButton.clicked.connect(self.add_well_attr_name)
            self.addwellattrdlg.wellAttrLinkLineEdit.textEdited.connect(reload_links)
            self.addwellattrdlg.wellAttrRefreshLinksButton.clicked.connect(reload_links)
            self.addwellattrdlg.wellAttrNewLinkButton.clicked.connect(self.add_link)
            self.addwellattrdlg.wellAttrNdaFilterLineEdit.textEdited.connect(reload_nda)
            self.addwellattrdlg.wellAttrRefreshNdaButton.clicked.connect(reload_nda)
            self.addwellattrdlg.insertWellAttrButton.clicked.connect(generate_and_execute_sql)
            self.addwellattrdlg.wellAttrNewNdaButton.clicked.connect(self.add_nda)

            self.addwellattrdlg.show()
        else:
            self.iface.messageBar().pushMessage('Ошибка', 'Нужно выбрать хотя бы одну скважину', level=Qgis.Warning, duration=3)



    def refresh_datasets(self):
        self.wind.datasetTableWidget.clear()
        self.wind.datasetTableWidget.setRowCount(0)
        self.wind.datasetTableWidget.setColumnCount(3)
        self.wind.datasetTableWidget.setHorizontalHeaderLabels(['Название', 'Тип', 'формат'])
        header = self.wind.datasetTableWidget.horizontalHeader()
        header.resizeSection(0, 100)
        header.resizeSection(1, 200)
        header.resizeSection(2, 50)
        if self.get_datasets_from_postgres():
            for i, dataset_row in enumerate(self.seismic_datasets_view_list):
                self.wind.datasetTableWidget.insertRow(i)
                citem = QTableWidgetItem(dataset_row['shortname'])
                citem.setToolTip(str(dataset_row['name']))
                citem.setFlags(Qt.ItemIsSelectable | Qt.ItemIsEnabled)
                self.wind.datasetTableWidget.setItem(i, 0, citem)
                citem = QTableWidgetItem(dataset_row['seismic_type'])
                citem.setToolTip(str(dataset_row['seismic_type']))
                citem.setFlags(Qt.ItemIsSelectable | Qt.ItemIsEnabled)
                self.wind.datasetTableWidget.setItem(i, 1, citem)
                citem = QTableWidgetItem(dataset_row['format'])
                citem.setToolTip(str(dataset_row['format']))
                citem.setFlags(Qt.ItemIsSelectable | Qt.ItemIsEnabled)
                self.wind.datasetTableWidget.setItem(i, 2, citem)
        else:
            self.wind.datasetTableWidget.clear()


    def select_datasets_by_geometry(self):
        selected_features_ids_list = None
        if self.mode == 'proc':
            if self.selectedProcLayer != None and len(self.selectedProcFeaturesList) > 0:
                if 'proc_id' in [f.name() for f in self.selectedProcLayer.fields()]:
                    if 'pol_id' in [f.name() for f in self.selectedProcLayer.fields()]:
                        selected_features_ids_list = list(set([f.attribute('pol_id') for f in self.selectedProcFeaturesList]))
                    elif 'line_id' in [f.name() for f in self.selectedProcLayer.fields()]:
                        selected_features_ids_list = list(set([f.attribute('line_id') for f in self.selectedProcFeaturesList]))
                    else:
                        selected_features_ids_list = []
        elif self.mode == 'field':
            if self.selectedFieldLayer and self.selectedFieldFeaturesList:
                if 'survey_id' in [f.name() for f in self.selectedFieldLayer.fields()]:
                    if 'pol_id' in [f.name() for f in self.selectedFieldLayer.fields()]:
                        selected_features_ids_list = list(set([f.attribute('pol_id') for f in self.selectedFieldFeaturesList]))
                    elif 'field_line_id' in [f.name() for f in self.selectedFieldLayer.fields()]:
                        selected_features_ids_list = list(set([f.attribute('field_line_id') for f in self.selectedFieldFeaturesList]))
                    else:
                        selected_features_ids_list = []
        if self.datasets_to_geometries_list and self.seismic_datasets_view_list and selected_features_ids_list:
            selected_features_dataset_ids = [y['dataset_id'] for y in self.datasets_to_geometries_list if y['geometry_id'] in selected_features_ids_list]
            [x.setSelected(False) for x in self.wind.datasetTableWidget.selectedItems()]
            self.wind.datasetTableWidget.clear()
            self.wind.datasetTableWidget.setRowCount(0)
            self.wind.datasetTableWidget.setColumnCount(3)
            self.wind.datasetTableWidget.setHorizontalHeaderLabels(['Название', 'Тип', 'формат'])
            header = self.wind.datasetTableWidget.horizontalHeader()
            header.resizeSection(0, 100)
            header.resizeSection(1, 200)
            header.resizeSection(2, 50)
            if selected_features_dataset_ids:
                self.dataset_id_filter = selected_features_dataset_ids
            else:
                self.dataset_id_filter = [-1]
            self.refresh_datasets()
            self.dataset_id_filter = None
        else:
            self.iface.messageBar().pushMessage('Ошибка', f"Нужно выбрать Проект по обработке, содержащий наборы данных",
                                                level=Qgis.Warning,
                                                duration=5)
        # else:
        #     self.iface.messageBar().pushMessage('Ошибка', f"Нужно выбрать слой и объекты в нем", level=Qgis.Warning,
        #                                         duration=5)


    def select_geometry_by_datasets(self):
        if self.mode == 'proc':
            geom_layer = self.selectedProcLayer
            line_id_fname = 'line_id'
            pol_id_fname = 'pol_id'
            message1 = f"Нужно выбрать наборы данных и слой с геометрией обработанной сейсмики"
            message2 = f"Нужно выбрать Обработку, содержащую наборы данных"
        elif self.mode == 'field':
            geom_layer = self.selectedFieldLayer
            line_id_fname = 'field_line_id'
            pol_id_fname = 'pol_id'
            message1 = f"Нужно выбрать наборы данных и слой с геометрией полевой сейсмики"
            message2 = f"Нужно выбрать Съемку, содержащую наборы данных"
        else:
            geom_layer = None
            line_id_fname = None
            pol_id_fname = None
            message1 = None
            message2 = None
        if self.datasets_to_geometries_list and self.seismic_datasets_view_list:
            selected_dataset_rows = list(set([x.row() for x in self.wind.datasetTableWidget.selectedItems()]))
            selected_dataset_ids = [self.seismic_datasets_view_list[i]['dataset_id'] for i in selected_dataset_rows]
            if selected_dataset_ids and geom_layer and \
                any([line_id_fname in [f.name() for f in geom_layer.fields()],
                     pol_id_fname in [f.name() for f in geom_layer.fields()]]):
                geom_string = ', '.join([str(x['geometry_id']) for x in self.datasets_to_geometries_list if x['dataset_id'] in selected_dataset_ids])
                geom_layer.removeSelection()
                if line_id_fname in [f.name() for f in geom_layer.fields()]:
                    gfield = line_id_fname
                else:
                    gfield = pol_id_fname
                query = f'"{gfield}" in ({geom_string})'
                geom_layer.selectByExpression(query)
                if geom_layer.selectedFeatures():
                    project_crs = QgsCoordinateReferenceSystem(QgsProject.instance().crs())
                    layer_crs = geom_layer.crs()
                    lyr2proj = QgsCoordinateTransform(layer_crs, project_crs, QgsProject.instance())
                    box = lyr2proj.transformBoundingBox(geom_layer.boundingBoxOfSelected())
                    self.iface.mapCanvas().setExtent(box)
                    self.iface.mapCanvas().refresh()
            else:
                self.iface.messageBar().pushMessage('Ошибка', message1, level=Qgis.Warning, duration=5)
        else:
            self.iface.messageBar().pushMessage('Ошибка', message2, level=Qgis.Warning, duration=5)


    def link_selected_datasets_to_geometry(self):
        if self.mode == 'proc':
            geom_layer = self.selectedProcLayer
            selected_features_list = self.selectedProcFeaturesList
            table_2d = self.seismic_lines_processed_2d
            table_3d = self.seismic_pols_processed_3d
            line_id_fname = 'line_id'
            pol_id_fname = 'pol_id'
            message1 = 'Нужно выбрать хотя бы один Набор данных'
            message2 = f"Нужно выбрать хотя бы одну Обработку и хотя бы один Набор данных"
        elif self.mode == 'field':
            geom_layer = self.selectedFieldLayer
            selected_features_list = self.selectedFieldFeaturesList
            table_2d = self.seismic_lines_field_2d
            table_3d = self.seismic_pols_field_3d
            line_id_fname = 'field_line_id'
            pol_id_fname = 'pol_id'
            message1 = 'Нужно выбрать хотя бы один Набор данных'
            message2 = f"Нужно выбрать хотя бы одну Съемку и хотя бы один Набор данных"
        else:
            geom_layer = None
            selected_features_list = None
            table_2d = None
            table_3d = None
            line_id_fname = None
            pol_id_fname = None
            message1 = None
            message2 = None
        if self.datasets_to_geometries_list and self.seismic_datasets_view_list:
            selected_cells = self.wind.datasetTableWidget.selectedItems()
            selected_rows = list(set([x.row() for x in selected_cells]))
            if selected_rows:
                dataset_ids = [self.seismic_datasets_view_list[i]['dataset_id'] for i in selected_rows]
                if geom_layer and selected_features_list and \
                        any([line_id_fname in[f.name() for f in geom_layer.fields()],
                             pol_id_fname in[f.name() for f in geom_layer.fields()]]):
                    if line_id_fname in [f.name() for f in geom_layer.fields()]:
                        gfield = line_id_fname
                        table = table_2d
                    else:
                        gfield = pol_id_fname
                        table = table_3d
                    geom_ids = [x[gfield] for x in selected_features_list]
                    sql = f"insert into {self.datasets_to_geometries}(dataset_id, geometry_id) values"
                    values_to_insert = []
                    for geom_id in geom_ids:
                        for dataset_id in dataset_ids:
                            values_to_insert.append(f"({str(dataset_id)}, {str(geom_id)})")
                    sql += ', '.join(values_to_insert)
                    self.sql = sql
                    mwidget = self.iface.messageBar().createMessage(
                        f"Связать {str(len(dataset_ids))} наборов данных с {str(len(geom_ids))} объектами в активном слое?")
                    mbutton = QPushButton(mwidget)
                    mbutton.setText('Подтвердить')
                    mbutton.pressed.connect(self.execute_sql)
                    mwidget.layout().addWidget(mbutton)
                    self.iface.messageBar().pushWidget(mwidget, Qgis.Warning, duration=5)
            else:
                self.iface.messageBar().pushMessage('Ошибка', message1, level=Qgis.Warning, duration=3)
        else:
            self.iface.messageBar().pushMessage('Ошибка', message2, level=Qgis.Warning, duration=5)


    def unlink_selected_datasets_from_geometry(self):
        if self.mode == 'proc':
            geom_layer = self.selectedProcLayer
            selected_features_list = self.selectedProcFeaturesList
            table_2d = self.seismic_lines_processed_2d
            table_3d = self.seismic_pols_processed_3d
            line_id_fname = 'line_id'
            pol_id_fname = 'pol_id'
        elif self.mode == 'field':
            geom_layer = self.selectedFieldLayer
            selected_features_list = self.selectedFieldFeaturesList
            table_2d = self.seismic_lines_field_2d
            table_3d = self.seismic_pols_field_3d
            line_id_fname = 'field_line_id'
            pol_id_fname = 'pol_id'
        else:
            geom_layer = None
            selected_features_list = None
            table_2d = None
            table_3d = None
            line_id_fname = None
            pol_id_fname = None
        selected_cells = self.wind.datasetTableWidget.selectedItems()
        selected_rows = list(set([x.row() for x in selected_cells]))
        if selected_rows:
            dataset_ids = [self.seismic_datasets_view_list[i]['dataset_id'] for i in selected_rows]
            if geom_layer and selected_features_list and \
                any([line_id_fname in [f.name() for f in geom_layer.fields()],
                     pol_id_fname in [f.name() for f in geom_layer.fields()]]):
                if line_id_fname in [f.name() for f in geom_layer.fields()]:
                    gfield = line_id_fname
                    table = table_2d
                else:
                    gfield = pol_id_fname
                    table = table_3d
                geom_ids = [x[gfield] for x in selected_features_list]
                sql = f"delete from {self.datasets_to_geometries} where "
                values_to_delete = []
                for geom_id in geom_ids:
                    for dataset_id in dataset_ids:
                        values_to_delete.append(f"(geometry_id = {str(geom_id)} and dataset_id = {str(dataset_id)})")
                sql += ' or '.join(values_to_delete)
                self.sql = sql
                mwidget = self.iface.messageBar().createMessage(
                    f"Удалить связь {str(len(dataset_ids))} наборов данных и {str(len(geom_ids))} объектов в активном слое?")
                mbutton = QPushButton(mwidget)
                mbutton.setText('Подтвердить')
                mbutton.pressed.connect(self.execute_sql)
                mwidget.layout().addWidget(mbutton)
                self.iface.messageBar().pushWidget(mwidget, Qgis.Warning, duration=5)
            else:
                self.iface.messageBar().pushMessage('Ошибка', 'Нужно выбрать хотя бы одну геометрию',
                                                    level=Qgis.Warning,
                                                    duration=3)
        else:
            self.iface.messageBar().pushMessage('Ошибка', 'Нужно выбрать хотя бы один набор данных', level=Qgis.Warning,
                                                duration=3)


    def check_show_datasets_for_all_proc(self):
        self.show_datasets_for_selected_proc = False
        self.refresh_datasets()

    def check_show_datasets_for_selected_proc(self):
        self.show_datasets_for_selected_proc = True
        self.refresh_datasets()

    def check_show_datasets_for_all_surveys(self):
        self.show_datasets_for_selected_surveys = False
        self.refresh_datasets()

    def check_show_datasets_for_selected_surveys(self):
        self.show_datasets_for_selected_surveys = True
        self.refresh_datasets()


    def add_dataset(self):
        self.adddatasetdlg = AddDatasetDialog()
        self.adddatasetdlg.datasetRefreshLinksButton.setIcon(QIcon(':/plugins/geo_dm/refresh.png'))
        self.adddatasetdlg.datasetRefreshDrivesButton.setIcon(QIcon(':/plugins/geo_dm/refresh.png'))
        self.adddatasetdlg.datasetRefreshTransmittalsButton.setIcon(QIcon(':/plugins/geo_dm/refresh.png'))

        if self.mode == 'proc':
            geom_layer = self.selectedProcLayer
            selected_features_list = self.selectedProcFeaturesList
            table_2d = self.seismic_lines_processed_2d
            table_3d = self.seismic_pols_processed_3d
            line_id_fname = 'line_id'
            pol_id_fname = 'pol_id'
            message1 = 'Нужно указать все обязательные поля и выбрать геометрию обработанной сейсмики'
            message2 = 'Нужно выбрать слой и геометрию обработанной сейсмики'
        elif self.mode == 'field':
            geom_layer = self.selectedFieldLayer
            selected_features_list = self.selectedFieldFeaturesList
            table_2d = self.seismic_lines_field_2d
            table_3d = self.seismic_pols_field_3d
            line_id_fname = 'field_line_id'
            pol_id_fname = 'pol_id'
            message1 = 'Нужно указать все обязательные поля и выбрать геометрию полевой сейсмики'
            message2 = 'Нужно выбрать слой и геометрию полевой сейсмики'
        else:
            geom_layer = None
            selected_features_list = None
            table_2d = None
            table_3d = None
            line_id_fname = None
            pol_id_fname = None
            message1 = None
            message2 = None
            
        self.adddatasetdlg.new_dataset_id = None
        self.adddatasetdlg.datasource_types_list = None
        self.adddatasetdlg.drives_view_list = None
        self.adddatasetdlg.links_list = None
        self.adddatasetdlg.transmittals_list = None

        self.adddatasetdlg.drives_to_link = []
        self.adddatasetdlg.links_to_link = []
        self.adddatasetdlg.transmittals_to_link = []


        def reload_datasource_types():
            self.adddatasetdlg.datasetDataSourceTypeComboBoxInput.clear()
            with psycopg2.connect(self.dsn, cursor_factory=DictCursor) as pgconn:
                with pgconn.cursor() as cur:
                    sql = f"select * from {self.datasource_types}"
                    cur.execute(sql)
                    self.adddatasetdlg.datasource_types_list = cur.fetchall()
                    self.adddatasetdlg.datasetDataSourceTypeComboBoxInput.addItems([row['name'] for row in self.adddatasetdlg.datasource_types_list])

        def reload_seismic_types():
            self.adddatasetdlg.datasetTypeComboBoxInput.clear()
            with psycopg2.connect(self.dsn, cursor_factory=DictCursor) as pgconn:
                with pgconn.cursor() as cur:
                    sql = f"select * from {self.seismic_types}"
                    cur.execute(sql)
                    self.adddatasetdlg.seismic_types_list = cur.fetchall()
                    self.adddatasetdlg.datasetTypeComboBoxInput.addItems(
                        [row['name'] for row in self.adddatasetdlg.seismic_types_list])

        def reload_formats():
            self.adddatasetdlg.datasetFormatComboBoxInput.clear()
            with psycopg2.connect(self.dsn, cursor_factory=DictCursor) as pgconn:
                with pgconn.cursor() as cur:
                    sql = f"select * from {self.formats}"
                    cur.execute(sql)
                    self.adddatasetdlg.formats_list = cur.fetchall()
                    self.adddatasetdlg.datasetFormatComboBoxInput.addItems(
                        [row['name'] for row in self.adddatasetdlg.formats_list])

        def reload_data_quality():
            self.adddatasetdlg.datasetQualityComboBoxInput.clear()
            with psycopg2.connect(self.dsn, cursor_factory=DictCursor) as pgconn:
                with pgconn.cursor() as cur:
                    sql = f"select * from {self.data_quality} order by quality_range DESC"
                    cur.execute(sql)
                    self.adddatasetdlg.data_quality_list = cur.fetchall()
                    self.adddatasetdlg.datasetQualityComboBoxInput.addItem('Выберите качество')
                    self.adddatasetdlg.datasetQualityComboBoxInput.addItems(
                        [row['name_ru'] for row in self.adddatasetdlg.data_quality_list])

        def get_drives_from_postgres():
            sql = f"select * from {self.drives_view}"
            filter_str = self.adddatasetdlg.datasetAllDrivesFilterLineEditInput.text().lower().strip()
            if filter_str:
                sql += f" where (LOWER(drive_number) like '%{filter_str}%' or LOWER(drive_type) like '%{filter_str}%' " \
                       f"or LOWER(label) like '%{filter_str}%' or LOWER(conf_name) like '%{filter_str}%' " \
                       f"or LOWER(conf_name_short) like '%{filter_str}%' or LOWER(conf_limit) like '%{filter_str}%')"
            sql += ' order by drive_number'
            try:
                with psycopg2.connect(self.dsn, cursor_factory=DictCursor) as pgconn:
                    if pgconn:
                        with pgconn.cursor() as cur:
                            cur.execute(sql)
                            self.adddatasetdlg.drives_view_list = cur.fetchall()
                            return True
                    else:
                        self.iface.messageBar().pushMessage('Ошибка', 'Не удалось загрузить данные о физических носителях из базы',
                                                level=Qgis.Critical, duration=5)
                        return False
            except:
                self.iface.messageBar().pushMessage('Ошибка', 'Не удалось загрузить данные о физических носителях из базы ' + sql,
                                                    level=Qgis.Critical, duration=5)
                return False

        def reload_drives():
            self.adddatasetdlg.datasetAllDrivesTableWidget.clear()
            self.adddatasetdlg.datasetAllDrivesTableWidget.setRowCount(0)
            self.adddatasetdlg.datasetAllDrivesTableWidget.setColumnCount(2)
            self.adddatasetdlg.datasetAllDrivesTableWidget.setHorizontalHeaderLabels(['Номер', 'Тип'])
            header = self.adddatasetdlg.datasetAllDrivesTableWidget.horizontalHeader()
            header.resizeSection(0, 148)
            header.resizeSection(1, 50)
            if get_drives_from_postgres():
                for i, drive_row in enumerate(self.adddatasetdlg.drives_view_list):
                    self.adddatasetdlg.datasetAllDrivesTableWidget.insertRow(i)
                    citem = QTableWidgetItem(drive_row['drive_number'])
                    # print(drive_row['drive_number'])
                    citem.setToolTip(str(drive_row['drive_number']))
                    citem.setFlags(Qt.ItemIsSelectable | Qt.ItemIsEnabled)
                    self.adddatasetdlg.datasetAllDrivesTableWidget.setItem(i, 0, citem)
                    citem = QTableWidgetItem(drive_row['drive_type'])
                    citem.setToolTip(str(drive_row['drive_type']))
                    citem.setFlags(Qt.ItemIsSelectable | Qt.ItemIsEnabled)
                    self.adddatasetdlg.datasetAllDrivesTableWidget.setItem(i, 1, citem)

        def reload_links():
            filter_string = self.adddatasetdlg.datasetLinksFilterLineEditInput.text().strip().lower().replace("'", "''").replace('\\', '\\\\')
            self.adddatasetdlg.datasetLinkComboBoxInput.clear()
            sql = f"select * from {self.links}"
            if filter_string:
                sql += f" where LOWER(link) like'%{filter_string}%'"
            sql += " order by link"
            with psycopg2.connect(self.dsn, cursor_factory=DictCursor) as pgconn:
                with pgconn.cursor() as cur:
                    cur.execute(sql)
                    self.adddatasetdlg.links_list = list(cur.fetchall())
                    self.adddatasetdlg.datasetLinkComboBoxInput.addItem('Выберите ссылку')
                    self.adddatasetdlg.datasetLinkComboBoxInput.addItems([row['link'] for row in self.adddatasetdlg.links_list])

        def reload_transmittals():
            filter_string = self.adddatasetdlg.datasetTransmittalsFilterLineEditInput.text().strip().lower().replace("'", "''")
            self.adddatasetdlg.datasetTransmittalComboBoxInput.clear()
            sql = f"select * from {self.transmittals_view}"
            if filter_string:
                sql += f" where LOWER(transmittal_type) like'%{filter_string}%'" \
                       f" or LOWER(number) like'%{filter_string}%'" \
                       f" or LOWER(name) like'%{filter_string}%'" \
                       f" or LOWER(from_company) like'%{filter_string}%'" \
                       f" or LOWER(to_company) like'%{filter_string}%'" \
                       f" or datestamp::text like'%{filter_string}%'" \
                       f" or LOWER(comments) like'%{filter_string}%'" \
                       f" or LOWER(from_company_short) like'%{filter_string}%'" \
                       f" or LOWER(to_company_short) like'%{filter_string}%'"
            sql += ' order by number'
            with psycopg2.connect(self.dsn, cursor_factory=DictCursor) as pgconn:
                with pgconn.cursor() as cur:
                    cur.execute(sql)
                    self.adddatasetdlg.transmittals_list = list(cur.fetchall())
                    self.adddatasetdlg.datasetTransmittalComboBoxInput.addItem('Выберите акт приема-передачи')
                    for row in self.adddatasetdlg.transmittals_list:
                        transm_item_str = ''
                        if row['number']:
                            transm_item_str += f"{row['number']} "
                        if row['datestamp']:
                            transm_item_str += f"от {row['datestamp']} "
                        if row['from_company_short']:
                            transm_item_str += f" {row['from_company_short']}"
                        if row['to_company_short']:
                            transm_item_str += f"->{row['to_company_short']}"
                        self.adddatasetdlg.datasetTransmittalComboBoxInput.addItem(transm_item_str)

        reload_datasource_types()
        reload_seismic_types()
        reload_formats()
        reload_data_quality()
        reload_drives()
        reload_links()
        reload_transmittals()

        def reload_linked_drives():
            self.adddatasetdlg.datasetLinkedDrivesTableWidget.clear()
            self.adddatasetdlg.datasetLinkedDrivesTableWidget.setRowCount(0)
            self.adddatasetdlg.datasetLinkedDrivesTableWidget.setColumnCount(2)
            self.adddatasetdlg.datasetLinkedDrivesTableWidget.setHorizontalHeaderLabels(['Номер', 'Тип'])
            header = self.adddatasetdlg.datasetLinkedDrivesTableWidget.horizontalHeader()
            header.resizeSection(0, 130)
            header.resizeSection(1, 50)
            if self.adddatasetdlg.drives_to_link:
                for i, drive_row in enumerate(self.adddatasetdlg.drives_to_link):
                    self.adddatasetdlg.datasetLinkedDrivesTableWidget.insertRow(i)
                    citem = QTableWidgetItem(drive_row['drive_number'])
                    # print(drive_row['drive_number'])
                    citem.setToolTip(str(drive_row['drive_number']))
                    citem.setFlags(Qt.ItemIsSelectable | Qt.ItemIsEnabled)
                    self.adddatasetdlg.datasetLinkedDrivesTableWidget.setItem(i, 0, citem)
                    citem = QTableWidgetItem(drive_row['drive_type'])
                    citem.setToolTip(str(drive_row['drive_type']))
                    citem.setFlags(Qt.ItemIsSelectable | Qt.ItemIsEnabled)
                    self.adddatasetdlg.datasetLinkedDrivesTableWidget.setItem(i, 1, citem)

        def link_drive():
            selected_drive_rows = list(set([x.row() for x in self.adddatasetdlg.datasetAllDrivesTableWidget.selectedItems()]))
            if selected_drive_rows:
                self.adddatasetdlg.drives_to_link.extend([self.adddatasetdlg.drives_view_list[x] for x in selected_drive_rows if self.adddatasetdlg.drives_view_list[x] not in self.adddatasetdlg.drives_to_link])
                reload_linked_drives()
            else:
                self.iface.messageBar().pushMessage('Ошибка', 'Нужно выбрать хотя бы один носитель', level=Qgis.Warning, duration=5)

        def unlink_drive():
            selected_drive_rows = list(set([x.row() for x in self.adddatasetdlg.datasetLinkedDrivesTableWidget.selectedItems()]))
            if selected_drive_rows:
                # [self.adddatasetdlg.drives_to_link.pop(x) for x in selected_drive_rows]
                self.adddatasetdlg.drives_to_link = [x for x in self.adddatasetdlg.drives_to_link if self.adddatasetdlg.drives_to_link.index(x) not in selected_drive_rows]
                reload_linked_drives()
            else:
                self.iface.messageBar().pushMessage('Ошибка', 'Нужно выбрать хотя бы один связанный носитель', level=Qgis.Warning,
                                                    duration=5)

        def reload_linked_links():
            self.adddatasetdlg.datasetLinksTableWidget.clear()
            self.adddatasetdlg.datasetLinksTableWidget.setRowCount(0)
            self.adddatasetdlg.datasetLinksTableWidget.setColumnCount(2)
            self.adddatasetdlg.datasetLinksTableWidget.setHorizontalHeaderLabels(['Адрес', 'id'])
            header = self.adddatasetdlg.datasetLinksTableWidget.horizontalHeader()
            header.resizeSection(0, 1000)
            header.resizeSection(1, 10)
            if self.adddatasetdlg.links_to_link:
                for i, link_row in enumerate(self.adddatasetdlg.links_to_link):
                    self.adddatasetdlg.datasetLinksTableWidget.insertRow(i)
                    citem = QTableWidgetItem(link_row['link'])
                    citem.setToolTip(str(link_row['link']))
                    citem.setFlags(Qt.ItemIsSelectable | Qt.ItemIsEnabled)
                    self.adddatasetdlg.datasetLinksTableWidget.setItem(i, 0, citem)
                    citem = QTableWidgetItem(link_row['link_id'])
                    citem.setToolTip(str(link_row['link_id']))
                    citem.setFlags(Qt.ItemIsSelectable | Qt.ItemIsEnabled)
                    self.adddatasetdlg.datasetLinksTableWidget.setItem(i, 1, citem)

        def link_link():
            selected_link_index = self.adddatasetdlg.datasetLinkComboBoxInput.currentIndex() - 1
            if selected_link_index >= 0:
                if self.adddatasetdlg.links_list[selected_link_index] not in self.adddatasetdlg.links_to_link:
                    self.adddatasetdlg.links_to_link.append(self.adddatasetdlg.links_list[selected_link_index])
                reload_linked_links()
                self.adddatasetdlg.datasetLinkComboBoxInput.setCurrentIndex(0)

        def unlink_link():
            selected_link_rows = list(set([x.row() for x in self.adddatasetdlg.datasetLinksTableWidget.selectedItems()]))
            if selected_link_rows:
                self.adddatasetdlg.links_to_link = [x for x in self.adddatasetdlg.links_to_link if self.adddatasetdlg.links_to_link.index(x) not in selected_link_rows]
                reload_linked_links()

            else:
                self.iface.messageBar().pushMessage('Ошибка', 'Нужно выбрать хотя бы одну связанную ссылку', level=Qgis.Warning,
                                                    duration=5)

        def reload_linked_transmittals():
            self.adddatasetdlg.datasetTransmittalsTableWidget.clear()
            self.adddatasetdlg.datasetTransmittalsTableWidget.setRowCount(0)
            self.adddatasetdlg.datasetTransmittalsTableWidget.setColumnCount(4)
            self.adddatasetdlg.datasetTransmittalsTableWidget.setHorizontalHeaderLabels(['Номер', 'Дата', 'Отправитель', 'Получатель'])
            header = self.adddatasetdlg.datasetTransmittalsTableWidget.horizontalHeader()
            header.resizeSection(0, 70)
            header.resizeSection(1, 70)
            header.resizeSection(2, 100)
            header.resizeSection(3, 100)
            if self.adddatasetdlg.transmittals_to_link:
                for i, transmittal_row in enumerate(self.adddatasetdlg.transmittals_to_link):
                    self.adddatasetdlg.datasetTransmittalsTableWidget.insertRow(i)
                    citem = QTableWidgetItem(transmittal_row['number'])
                    citem.setToolTip(str(transmittal_row['number']))
                    citem.setFlags(Qt.ItemIsSelectable | Qt.ItemIsEnabled)
                    self.adddatasetdlg.datasetTransmittalsTableWidget.setItem(i, 0, citem)
                    citem = QTableWidgetItem(str(transmittal_row['datestamp']))
                    citem.setToolTip(str(transmittal_row['datestamp']))
                    citem.setFlags(Qt.ItemIsSelectable | Qt.ItemIsEnabled)
                    self.adddatasetdlg.datasetTransmittalsTableWidget.setItem(i, 1, citem)
                    citem = QTableWidgetItem(str(transmittal_row['from_company_short']))
                    citem.setToolTip(str(transmittal_row['from_company']))
                    citem.setFlags(Qt.ItemIsSelectable | Qt.ItemIsEnabled)
                    self.adddatasetdlg.datasetTransmittalsTableWidget.setItem(i, 2, citem)
                    citem = QTableWidgetItem(str(transmittal_row['to_company_short']))
                    citem.setToolTip(str(transmittal_row['to_company']))
                    citem.setFlags(Qt.ItemIsSelectable | Qt.ItemIsEnabled)
                    self.adddatasetdlg.datasetTransmittalsTableWidget.setItem(i, 3, citem)

        def link_transmittal():
            selected_transmittal_index = self.adddatasetdlg.datasetTransmittalComboBoxInput.currentIndex() - 1
            if selected_transmittal_index >= 0:
                if self.adddatasetdlg.transmittals_list[selected_transmittal_index] not in self.adddatasetdlg.transmittals_to_link:
                    self.adddatasetdlg.transmittals_to_link.append(self.adddatasetdlg.transmittals_list[selected_transmittal_index])
                reload_linked_transmittals()
                self.adddatasetdlg.datasetTransmittalComboBoxInput.setCurrentIndex(0)

        def unlink_transmittal():
            selected_transmittal_rows = list(set([x.row() for x in self.adddatasetdlg.datasetTransmittalsTableWidget.selectedItems()]))
            if selected_transmittal_rows:
                self.adddatasetdlg.transmittals_to_link = [x for x in self.adddatasetdlg.transmittals_to_link if self.adddatasetdlg.transmittals_to_link.index(x) not in selected_transmittal_rows]
                reload_linked_transmittals()
            else:
                self.iface.messageBar().pushMessage('Ошибка', 'Нужно выбрать хотя бы один связанный акт приема-передачи', level=Qgis.Warning,
                                                    duration=5)

        def refresh_datasets_and_select_new():
            self.wind.showAllProcDatasetsRadioButton.setChecked(True)
            self.check_show_datasets_for_all_proc()
            new_dataset_row = self.seismic_datasets_view_list.index([x for x in self.seismic_datasets_view_list if x['dataset_id'] == self.adddatasetdlg.new_dataset_id][0])
            self.wind.datasetTableWidget.selectRow(new_dataset_row)

        def generate_and_execute_sql():
            drive_ids_to_insert = None
            link_ids_to_insert = None
            transmittal_ids_to_insert = None

            selected_datasource_type_index = self.adddatasetdlg.datasetDataSourceTypeComboBoxInput.currentIndex()
            new_shortname = self.adddatasetdlg.datasetShortnameLineEditInput.text().strip().replace("'", "''")
            new_name = self.adddatasetdlg.datasetNameLineEditInput.text().strip().replace("'", "''")
            selected_type_index = self.adddatasetdlg.datasetTypeComboBoxInput.currentIndex()
            selected_format_index = self.adddatasetdlg.datasetFormatComboBoxInput.currentIndex()
            selected_quality_index = self.adddatasetdlg.datasetQualityComboBoxInput.currentIndex() - 1
            new_sizegb = self.adddatasetdlg.datasetSizeGbSpinBoxInput.value()
            if all([new_shortname, new_name, selected_features_list]):
                selected_datasource_type_id = self.adddatasetdlg.datasource_types_list[selected_datasource_type_index]['datasource_type_id']
                selected_type_id = self.adddatasetdlg.seismic_types_list[selected_type_index]['seismic_type_id']
                selected_format_id = self.adddatasetdlg.formats_list[selected_format_index]['format_id']
                selected_quality_id = None
                if selected_quality_index >= 0:
                    selected_quality_id = self.adddatasetdlg.data_quality_list[selected_quality_index]['data_quality_id']
                if self.adddatasetdlg.drives_to_link:
                    drive_ids_to_insert = [x['drive_id'] for x in self.adddatasetdlg.drives_to_link]
                if self.adddatasetdlg.links_to_link:
                    link_ids_to_insert = [x['link_id'] for x in self.adddatasetdlg.links_to_link]
                if self.adddatasetdlg.transmittals_to_link:
                    transmittal_ids_to_insert = [x['transmittal_id'] for x in self.adddatasetdlg.transmittals_to_link]
                if any(['proc_id' in [f.name() for f in geom_layer.fields()], 'survey_id' in [f.name() for f in geom_layer.fields()]]):


                    geom_field = ''
                    if pol_id_fname in [f.name() for f in geom_layer.fields()]:
                        geom_field = pol_id_fname
                    elif line_id_fname in [f.name() for f in geom_layer.fields()]:
                        geom_field = line_id_fname
                    geom_ids_to_link = [f.attribute(geom_field) for f in selected_features_list]
                else:
                    geom_ids_to_link = None
                with psycopg2.connect(self.dsn, cursor_factory=DictCursor) as pgconn:
                    with pgconn.cursor() as cur:
                        sql = f"select * from nextval('{self.seismic_datasets_dataset_id_seq}'::regclass)"
                        cur.execute(sql)
                        self.adddatasetdlg.new_dataset_id = cur.fetchall()[0][0]
                fields_to_update = ['dataset_id', 'datasource_type_id', 'shortname', 'name', 'seismic_type_id', 'format_id']
                values_to_insert = [str(self.adddatasetdlg.new_dataset_id), str(selected_datasource_type_id), f"'{new_shortname}'", f"'{new_name}'", str(selected_type_id), str(selected_format_id)]
                if selected_quality_id:
                    fields_to_update.append('data_quality_id')
                    values_to_insert.append(str(selected_quality_id))
                if new_sizegb > 0:
                    fields_to_update.append('size_gb')
                    values_to_insert.append(str(new_sizegb))
                sql = f"insert into {self.seismic_datasets}({', '.join(fields_to_update)}) values({', '.join(values_to_insert)});"
                if drive_ids_to_insert:
                    sql += f" insert into {self.drives_to_datasets}(drive_id, dataset_id) " \
                           f"values{', '.join(['(' + str(x) + ', ' + str(self.adddatasetdlg.new_dataset_id) + ')' for x in drive_ids_to_insert])}" \
                           f";"
                if link_ids_to_insert:
                    sql += f" insert into {self.links_to_datasets}(link_id, dataset_id) " \
                           f"values{', '.join(['(' + str(x) + ', ' + str(self.adddatasetdlg.new_dataset_id) + ')' for x in link_ids_to_insert])}" \
                           f";"
                if transmittal_ids_to_insert:
                    sql += f" insert into {self.seismic_datasets_to_transmittals}(transmittal_id, seismic_dataset_id) " \
                           f"values{', '.join(['(' + str(x) + ', ' + str(self.adddatasetdlg.new_dataset_id) + ')' for x in transmittal_ids_to_insert])}" \
                           f";"
                if geom_ids_to_link:
                    sql += f" insert into {self.datasets_to_geometries}(geometry_id, dataset_id) " \
                           f"values{', '.join(['(' + str(x) + ', ' + str(self.adddatasetdlg.new_dataset_id) + ')' for x in geom_ids_to_link])}" \
                           f";"
                # self.iface.messageBar().pushMessage('sql',
                #                                     sql,
                #                                     level=Qgis.Success,
                #                                     duration=5)
                self.sql = sql
                mwidget = self.iface.messageBar().createMessage(f"Добавить в базу набор данных {str(new_name)}?")
                mbutton = QPushButton(mwidget)
                mbutton.setText('Подтвердить')
                mbutton.pressed.connect(self.execute_sql)
                # mbutton.pressed.connect(refresh_datasets_and_select_new)
                mwidget.layout().addWidget(mbutton)
                self.iface.messageBar().pushWidget(mwidget, Qgis.Warning, duration=5)
                self.adddatasetdlg.accept()
            else:
                self.iface.messageBar().pushMessage('Ошибка', message1, level=Qgis.Warning, duration=5)

        self.adddatasetdlg.datasetRefreshDrivesButton.clicked.connect(reload_drives)
        self.adddatasetdlg.datasetAllDrivesFilterLineEditInput.textEdited.connect(reload_drives)
        self.adddatasetdlg.datasetNewDriveButton.clicked.connect(self.add_drive)
        self.adddatasetdlg.datasetLinkDriveButton.clicked.connect(link_drive)
        self.adddatasetdlg.datasetUnLinkDriveButton.clicked.connect(unlink_drive)
        self.adddatasetdlg.datasetRefreshLinksButton.clicked.connect(reload_links)
        self.adddatasetdlg.datasetLinksFilterLineEditInput.textEdited.connect(reload_links)
        self.adddatasetdlg.datasetLinkComboBoxInput.activated.connect(link_link)
        self.adddatasetdlg.unlinkSelectedLinksButton.clicked.connect(unlink_link)
        self.adddatasetdlg.datasetNewLinkButton.clicked.connect(self.add_link)
        self.adddatasetdlg.datasetRefreshTransmittalsButton.clicked.connect(reload_transmittals)
        self.adddatasetdlg.datasetTransmittalsFilterLineEditInput.textEdited.connect(reload_transmittals)
        self.adddatasetdlg.datasetTransmittalComboBoxInput.activated.connect(link_transmittal)
        self.adddatasetdlg.unlinkSelectedTransmittalsButton.clicked.connect(unlink_transmittal)
        self.adddatasetdlg.datasetNewTransmittalButton.clicked.connect(self.add_transmittal)
        self.adddatasetdlg.insertDatasetButton.clicked.connect(generate_and_execute_sql)

        if selected_features_list:
            self.adddatasetdlg.show()
        else:
            self.iface.messageBar().pushMessage('Ошибка', message2, level=Qgis.Warning, duration=5)


    def update_dataset(self):
        selected_dataset_rows = list(set([x.row() for x in self.wind.datasetTableWidget.selectedItems()]))
        if len(selected_dataset_rows) == 1:
            self.updatedatasetdlg = AddDatasetDialog()
            self.updatedatasetdlg.datasetRefreshLinksButton.setIcon(QIcon(':/plugins/geo_dm/refresh.png'))
            self.updatedatasetdlg.datasetRefreshDrivesButton.setIcon(QIcon(':/plugins/geo_dm/refresh.png'))
            self.updatedatasetdlg.datasetRefreshTransmittalsButton.setIcon(QIcon(':/plugins/geo_dm/refresh.png'))

            if self.mode == 'proc':
                geom_layer = self.selectedProcLayer
                selected_features_list = self.selectedProcFeaturesList
                table_2d = self.seismic_lines_processed_2d
                table_3d = self.seismic_pols_processed_3d
                line_id_fname = 'line_id'
                pol_id_fname = 'pol_id'
            elif self.mode == 'field':
                geom_layer = self.selectedFieldLayer
                selected_features_list = self.selectedFieldFeaturesList
                table_2d = self.seismic_lines_field_2d
                table_3d = self.seismic_pols_field_3d
                line_id_fname = 'field_line_id'
                pol_id_fname = 'pol_id'
            else:
                geom_layer = None
                selected_features_list = None
                table_2d = None
                table_3d = None
                line_id_fname = None
                pol_id_fname = None
            
            self.updatedatasetdlg.new_dataset_id = None
            self.updatedatasetdlg.datasource_types_list = None
            self.updatedatasetdlg.drives_view_list = None
            self.updatedatasetdlg.links_list = None
            self.updatedatasetdlg.transmittals_list = None

            self.updatedatasetdlg.drives_to_link = []
            self.updatedatasetdlg.links_to_link = []
            self.updatedatasetdlg.transmittals_to_link = []

            self.updatedatasetdlg.selected_dataset_row =  selected_dataset_rows[0]
            self.updatedatasetdlg.setWindowTitle('Изменить набор данных')
            self.updatedatasetdlg.insertDatasetButton.setText('Изменить набор данных')

            def reload_datasource_types():
                self.updatedatasetdlg.datasetDataSourceTypeComboBoxInput.clear()
                with psycopg2.connect(self.dsn, cursor_factory=DictCursor) as pgconn:
                    with pgconn.cursor() as cur:
                        sql = f"select * from {self.datasource_types}"
                        cur.execute(sql)
                        self.updatedatasetdlg.datasource_types_list = cur.fetchall()
                        self.updatedatasetdlg.datasetDataSourceTypeComboBoxInput.addItems([row['name'] for row in self.updatedatasetdlg.datasource_types_list])
                    selected_datasource_type = self.seismic_datasets_view_list[self.updatedatasetdlg.selected_dataset_row]['datasource_type']
                if selected_datasource_type:
                    self.updatedatasetdlg.datasetDataSourceTypeComboBoxInput.setCurrentText(selected_datasource_type)

            def reload_dataset_shortname():
                self.updatedatasetdlg.datasetShortnameLineEditInput.clear()
                self.updatedatasetdlg.datasetShortnameLineEditInput.setText(self.seismic_datasets_view_list[self.updatedatasetdlg.selected_dataset_row]['shortname'])
            
            def reload_dataset_name():
                self.updatedatasetdlg.datasetNameLineEditInput.clear()
                self.updatedatasetdlg.datasetNameLineEditInput.setText(self.seismic_datasets_view_list[self.updatedatasetdlg.selected_dataset_row]['name'])

            def reload_seismic_types():
                self.updatedatasetdlg.datasetTypeComboBoxInput.clear()
                with psycopg2.connect(self.dsn, cursor_factory=DictCursor) as pgconn:
                    with pgconn.cursor() as cur:
                        sql = f"select * from {self.seismic_types}"
                        cur.execute(sql)
                        self.updatedatasetdlg.seismic_types_list = cur.fetchall()
                        self.updatedatasetdlg.datasetTypeComboBoxInput.addItems([row['name'] for row in self.updatedatasetdlg.seismic_types_list])
                    selected_seismic_type = self.seismic_datasets_view_list[self.updatedatasetdlg.selected_dataset_row]['seismic_type']
                if selected_seismic_type:
                    self.updatedatasetdlg.datasetTypeComboBoxInput.setCurrentText(selected_seismic_type)

            def reload_formats():
                self.updatedatasetdlg.datasetFormatComboBoxInput.clear()
                with psycopg2.connect(self.dsn, cursor_factory=DictCursor) as pgconn:
                    with pgconn.cursor() as cur:
                        sql = f"select * from {self.formats}"
                        cur.execute(sql)
                        self.updatedatasetdlg.formats_list = cur.fetchall()
                        self.updatedatasetdlg.datasetFormatComboBoxInput.addItems([row['name'] for row in self.updatedatasetdlg.formats_list])
                    selected_format = self.seismic_datasets_view_list[self.updatedatasetdlg.selected_dataset_row]['format']
                if selected_format:
                    self.updatedatasetdlg.datasetFormatComboBoxInput.setCurrentText(selected_format)

            def reload_data_quality():
                self.updatedatasetdlg.datasetQualityComboBoxInput.clear()
                with psycopg2.connect(self.dsn, cursor_factory=DictCursor) as pgconn:
                    with pgconn.cursor() as cur:
                        sql = f"select * from {self.data_quality} order by quality_range DESC"
                        cur.execute(sql)
                        self.updatedatasetdlg.data_quality_list = cur.fetchall()
                        self.updatedatasetdlg.datasetQualityComboBoxInput.addItem('--Выбрать--')
                        self.updatedatasetdlg.datasetQualityComboBoxInput.addItems(
                            [row['name_ru'] for row in self.updatedatasetdlg.data_quality_list])
                    selected_quality = self.seismic_datasets_view_list[self.updatedatasetdlg.selected_dataset_row]['data_quality']
                if selected_quality:
                    self.updatedatasetdlg.datasetQualityComboBoxInput.setCurrentText(selected_quality)
                else:
                    self.updatedatasetdlg.datasetQualityComboBoxInput.setCurrentText('--Выбрать--')

            def reload_sizegb():
                size = self.seismic_datasets_view_list[self.updatedatasetdlg.selected_dataset_row]['size_gb']
                if size:
                    self.updatedatasetdlg.datasetSizeGbSpinBoxInput.setValue(size)

            def get_drives_from_postgres():
                sql = f"select * from {self.drives_view}"
                filter_str = self.updatedatasetdlg.datasetAllDrivesFilterLineEditInput.text().lower().strip()
                if filter_str:
                    sql += f" where (LOWER(drive_number) like '%{filter_str}%' or LOWER(drive_type) like '%{filter_str}%' " \
                           f"or LOWER(label) like '%{filter_str}%' or LOWER(conf_name) like '%{filter_str}%' " \
                           f"or LOWER(conf_name_short) like '%{filter_str}%' or LOWER(conf_limit) like '%{filter_str}%')"
                sql += ' order by drive_number'
                try:
                    with psycopg2.connect(self.dsn, cursor_factory=DictCursor) as pgconn:
                        if pgconn:
                            with pgconn.cursor() as cur:
                                cur.execute(sql)
                                self.updatedatasetdlg.drives_view_list = cur.fetchall()
                                return True
                        else:
                            self.iface.messageBar().pushMessage('Ошибка',
                                                                'Не удалось загрузить данные о физических носителях из базы',
                                                                level=Qgis.Critical, duration=5)
                            return False
                except:
                    self.iface.messageBar().pushMessage('Ошибка',
                                                        'Не удалось загрузить данные о физических носителях из базы ' + sql,
                                                        level=Qgis.Critical, duration=5)
                    return False
            
            def get_linked_drives_from_postgres():
                selected_dataset_id = self.seismic_datasets_view_list[self.updatedatasetdlg.selected_dataset_row]['dataset_id']
                sql = f"select drive_id from {self.drives_to_datasets} where dataset_id = {str(selected_dataset_id)}"
                try:
                    with psycopg2.connect(self.dsn, cursor_factory=DictCursor) as pgconn:
                        if pgconn:
                            with pgconn.cursor() as cur:
                                cur.execute(sql)
                                selected_drive_ids = [x['drive_id'] for x in cur.fetchall()]
                                for drive in self.updatedatasetdlg.drives_view_list:
                                    if drive['drive_id'] in selected_drive_ids and drive not in self.updatedatasetdlg.drives_to_link:
                                        self.updatedatasetdlg.drives_to_link.append(drive)
                                return True
                        else:
                            self.iface.messageBar().pushMessage('Ошибка', 'Не удалось загрузить данные о физических носителях из базы ' + sql, level=Qgis.Critical, duration=5)
                            return False
                except:
                    self.iface.messageBar().pushMessage('Ошибка', 'Не удалось загрузить данные о физических носителях из базы ' + sql, level=Qgis.Critical, duration=5)
                    return False

            def reload_linked_drives():
                self.updatedatasetdlg.datasetLinkedDrivesTableWidget.clear()
                self.updatedatasetdlg.datasetLinkedDrivesTableWidget.setRowCount(0)
                self.updatedatasetdlg.datasetLinkedDrivesTableWidget.setColumnCount(2)
                self.updatedatasetdlg.datasetLinkedDrivesTableWidget.setHorizontalHeaderLabels(['Номер', 'Тип'])
                header = self.updatedatasetdlg.datasetLinkedDrivesTableWidget.horizontalHeader()
                header.resizeSection(0, 130)
                header.resizeSection(1, 50)
                if self.updatedatasetdlg.drives_to_link:
                    for i, drive_row in enumerate(self.updatedatasetdlg.drives_to_link):
                        self.updatedatasetdlg.datasetLinkedDrivesTableWidget.insertRow(i)
                        citem = QTableWidgetItem(drive_row['drive_number'])
                        # print(drive_row['drive_number'])
                        citem.setToolTip(str(drive_row['drive_number']))
                        citem.setFlags(Qt.ItemIsSelectable | Qt.ItemIsEnabled)
                        self.updatedatasetdlg.datasetLinkedDrivesTableWidget.setItem(i, 0, citem)
                        citem = QTableWidgetItem(drive_row['drive_type'])
                        citem.setToolTip(str(drive_row['drive_type']))
                        citem.setFlags(Qt.ItemIsSelectable | Qt.ItemIsEnabled)
                        self.updatedatasetdlg.datasetLinkedDrivesTableWidget.setItem(i, 1, citem)
            
            def reload_drives():
                self.updatedatasetdlg.datasetAllDrivesTableWidget.clear()
                self.updatedatasetdlg.datasetAllDrivesTableWidget.setRowCount(0)
                self.updatedatasetdlg.datasetAllDrivesTableWidget.setColumnCount(2)
                self.updatedatasetdlg.datasetAllDrivesTableWidget.setHorizontalHeaderLabels(['Номер', 'Тип'])
                header = self.updatedatasetdlg.datasetAllDrivesTableWidget.horizontalHeader()
                header.resizeSection(0, 148)
                header.resizeSection(1, 50)
                if get_drives_from_postgres():
                    for i, drive_row in enumerate(self.updatedatasetdlg.drives_view_list):
                        self.updatedatasetdlg.datasetAllDrivesTableWidget.insertRow(i)
                        citem = QTableWidgetItem(drive_row['drive_number'])
                        # print(drive_row['drive_number'])
                        citem.setToolTip(str(drive_row['drive_number']))
                        citem.setFlags(Qt.ItemIsSelectable | Qt.ItemIsEnabled)
                        self.updatedatasetdlg.datasetAllDrivesTableWidget.setItem(i, 0, citem)
                        citem = QTableWidgetItem(drive_row['drive_type'])
                        citem.setToolTip(str(drive_row['drive_type']))
                        citem.setFlags(Qt.ItemIsSelectable | Qt.ItemIsEnabled)
                        self.updatedatasetdlg.datasetAllDrivesTableWidget.setItem(i, 1, citem)

            def reload_links():
                filter_string = self.updatedatasetdlg.datasetLinksFilterLineEditInput.text().strip().lower().replace("'", "''").replace('\\', '\\\\')
                self.updatedatasetdlg.datasetLinkComboBoxInput.clear()
                sql = f"select * from {self.links}"
                if filter_string:
                    sql += f" where LOWER(link) like'%{filter_string}%'"
                sql += " order by link"
                with psycopg2.connect(self.dsn, cursor_factory=DictCursor) as pgconn:
                    with pgconn.cursor() as cur:
                        cur.execute(sql)
                        self.updatedatasetdlg.links_list = list(cur.fetchall())
                        self.updatedatasetdlg.datasetLinkComboBoxInput.addItem('Выберите ссылку')
                        self.updatedatasetdlg.datasetLinkComboBoxInput.addItems([row['link'] for row in self.updatedatasetdlg.links_list])

            def get_linked_links_from_postgres():
                selected_dataset_id = self.seismic_datasets_view_list[self.updatedatasetdlg.selected_dataset_row]['dataset_id']
                sql = f"select link_id from {self.links_to_datasets} where dataset_id = {str(selected_dataset_id)}"
                try:
                    with psycopg2.connect(self.dsn, cursor_factory=DictCursor) as pgconn:
                        if pgconn:
                            with pgconn.cursor() as cur:
                                cur.execute(sql)
                                selected_link_ids = [x['link_id'] for x in cur.fetchall()]
                                for link in self.updatedatasetdlg.links_list:
                                    if link['link_id'] in selected_link_ids and link not in self.updatedatasetdlg.links_to_link:
                                        self.updatedatasetdlg.links_to_link.append(link)
                                return True
                        else:
                            self.iface.messageBar().pushMessage('Ошибка',
                                                                'Не удалось загрузить данные о ссылках из базы ' + sql,
                                                                level=Qgis.Critical, duration=5)
                            return False
                except:
                    self.iface.messageBar().pushMessage('Ошибка',
                                                        'Не удалось загрузить данные о ссылках из базы ' + sql,
                                                        level=Qgis.Critical, duration=5)
                    return False
            
            def reload_linked_links():
                self.updatedatasetdlg.datasetLinksTableWidget.clear()
                self.updatedatasetdlg.datasetLinksTableWidget.setRowCount(0)
                self.updatedatasetdlg.datasetLinksTableWidget.setColumnCount(2)
                self.updatedatasetdlg.datasetLinksTableWidget.setHorizontalHeaderLabels(['Адрес', 'id'])
                header = self.updatedatasetdlg.datasetLinksTableWidget.horizontalHeader()
                header.resizeSection(0, 1000)
                header.resizeSection(1, 10)
                if self.updatedatasetdlg.links_to_link:
                    for i, link_row in enumerate(self.updatedatasetdlg.links_to_link):
                        self.updatedatasetdlg.datasetLinksTableWidget.insertRow(i)
                        citem = QTableWidgetItem(link_row['link'])
                        citem.setToolTip(str(link_row['link']))
                        citem.setFlags(Qt.ItemIsSelectable | Qt.ItemIsEnabled)
                        self.updatedatasetdlg.datasetLinksTableWidget.setItem(i, 0, citem)
                        citem = QTableWidgetItem(link_row['link_id'])
                        citem.setToolTip(str(link_row['link_id']))
                        citem.setFlags(Qt.ItemIsSelectable | Qt.ItemIsEnabled)
                        self.updatedatasetdlg.datasetLinksTableWidget.setItem(i, 1, citem)

            def reload_transmittals():
                filter_string = self.updatedatasetdlg.datasetTransmittalsFilterLineEditInput.text().strip().lower().replace("'", "''")
                self.updatedatasetdlg.datasetTransmittalComboBoxInput.clear()
                sql = f"select * from {self.transmittals_view}"
                if filter_string:
                    sql += f" where LOWER(transmittal_type) like'%{filter_string}%'" \
                           f" or LOWER(number) like'%{filter_string}%'" \
                           f" or LOWER(name) like'%{filter_string}%'" \
                           f" or LOWER(from_company) like'%{filter_string}%'" \
                           f" or LOWER(to_company) like'%{filter_string}%'" \
                           f" or datestamp::text like'%{filter_string}%'" \
                           f" or LOWER(comments) like'%{filter_string}%'" \
                           f" or LOWER(from_company_short) like'%{filter_string}%'" \
                           f" or LOWER(to_company_short) like'%{filter_string}%'"
                sql += ' order by number'
                with psycopg2.connect(self.dsn, cursor_factory=DictCursor) as pgconn:
                    with pgconn.cursor() as cur:
                        cur.execute(sql)
                        self.updatedatasetdlg.transmittals_list = list(cur.fetchall())
                        self.updatedatasetdlg.datasetTransmittalComboBoxInput.addItem('Выберите акт приема-передачи')
                        for row in self.updatedatasetdlg.transmittals_list:
                            transm_item_str = ''
                            if row['number']:
                                transm_item_str += f"{row['number']} "
                            if row['datestamp']:
                                transm_item_str += f"от {row['datestamp']} "
                            if row['from_company_short']:
                                transm_item_str += f" {row['from_company_short']}"
                            if row['to_company_short']:
                                transm_item_str += f"->{row['to_company_short']}"
                            self.updatedatasetdlg.datasetTransmittalComboBoxInput.addItem(transm_item_str)

            def get_linked_transmittals_from_postgres():
                selected_dataset_id = self.seismic_datasets_view_list[self.updatedatasetdlg.selected_dataset_row]['dataset_id']
                sql = f"select transmittal_id from {self.seismic_datasets_to_transmittals} where seismic_dataset_id = {str(selected_dataset_id)}"
                try:
                    with psycopg2.connect(self.dsn, cursor_factory=DictCursor) as pgconn:
                        if pgconn:
                            with pgconn.cursor() as cur:
                                cur.execute(sql)
                                selected_transmittal_ids = [x['transmittal_id'] for x in cur.fetchall()]
                                for transm in self.updatedatasetdlg.transmittals_list:
                                    if transm['transmittal_id'] in selected_transmittal_ids and transm not in self.updatedatasetdlg.transmittals_to_link:
                                        self.updatedatasetdlg.transmittals_to_link.append(transm)
                                return True
                        else:
                            self.iface.messageBar().pushMessage('Ошибка',
                                                                'Не удалось загрузить данные об актах из базы ' + sql,
                                                                level=Qgis.Critical, duration=5)
                            return False
                except:
                    self.iface.messageBar().pushMessage('Ошибка',
                                                        'Не удалось загрузить данные об актах из базы ' + sql,
                                                        level=Qgis.Critical, duration=5)
                    return False

            def reload_linked_transmittals():
                self.updatedatasetdlg.datasetTransmittalsTableWidget.clear()
                self.updatedatasetdlg.datasetTransmittalsTableWidget.setRowCount(0)
                self.updatedatasetdlg.datasetTransmittalsTableWidget.setColumnCount(4)
                self.updatedatasetdlg.datasetTransmittalsTableWidget.setHorizontalHeaderLabels(
                    ['Номер', 'Дата', 'Отправитель', 'Получатель'])
                header = self.updatedatasetdlg.datasetTransmittalsTableWidget.horizontalHeader()
                header.resizeSection(0, 70)
                header.resizeSection(1, 70)
                header.resizeSection(2, 100)
                header.resizeSection(3, 100)
                if self.updatedatasetdlg.transmittals_to_link:
                    for i, transmittal_row in enumerate(self.updatedatasetdlg.transmittals_to_link):
                        self.updatedatasetdlg.datasetTransmittalsTableWidget.insertRow(i)
                        citem = QTableWidgetItem(transmittal_row['number'])
                        citem.setToolTip(str(transmittal_row['number']))
                        citem.setFlags(Qt.ItemIsSelectable | Qt.ItemIsEnabled)
                        self.updatedatasetdlg.datasetTransmittalsTableWidget.setItem(i, 0, citem)
                        citem = QTableWidgetItem(str(transmittal_row['datestamp']))
                        citem.setToolTip(str(transmittal_row['datestamp']))
                        citem.setFlags(Qt.ItemIsSelectable | Qt.ItemIsEnabled)
                        self.updatedatasetdlg.datasetTransmittalsTableWidget.setItem(i, 1, citem)
                        citem = QTableWidgetItem(str(transmittal_row['from_company_short']))
                        citem.setToolTip(str(transmittal_row['from_company']))
                        citem.setFlags(Qt.ItemIsSelectable | Qt.ItemIsEnabled)
                        self.updatedatasetdlg.datasetTransmittalsTableWidget.setItem(i, 2, citem)
                        citem = QTableWidgetItem(str(transmittal_row['to_company_short']))
                        citem.setToolTip(str(transmittal_row['to_company']))
                        citem.setFlags(Qt.ItemIsSelectable | Qt.ItemIsEnabled)
                        self.updatedatasetdlg.datasetTransmittalsTableWidget.setItem(i, 3, citem)

            def link_drive():
                selected_drive_rows = list(set([x.row() for x in self.updatedatasetdlg.datasetAllDrivesTableWidget.selectedItems()]))
                if selected_drive_rows:
                    self.updatedatasetdlg.drives_to_link.extend(
                        [self.updatedatasetdlg.drives_view_list[x] for x in selected_drive_rows if
                         self.updatedatasetdlg.drives_view_list[x] not in self.updatedatasetdlg.drives_to_link])
                    reload_linked_drives()
                else:
                    self.iface.messageBar().pushMessage('Ошибка', 'Нужно выбрать хотя бы один носитель',
                                                        level=Qgis.Warning, duration=5)

            def unlink_drive():
                selected_drive_rows = list(set([x.row() for x in self.updatedatasetdlg.datasetLinkedDrivesTableWidget.selectedItems()]))
                if selected_drive_rows:
                    # [self.updatedatasetdlg.drives_to_link.pop(x) for x in selected_drive_rows]
                    self.updatedatasetdlg.drives_to_link = [x for x in self.updatedatasetdlg.drives_to_link if self.updatedatasetdlg.drives_to_link.index(x) not in selected_drive_rows]
                    reload_linked_drives()
                else:
                    self.iface.messageBar().pushMessage('Ошибка', 'Нужно выбрать хотя бы один связанный носитель',
                                                        level=Qgis.Warning,
                                                        duration=5)

            def link_link():
                selected_link_index = self.updatedatasetdlg.datasetLinkComboBoxInput.currentIndex() - 1
                if selected_link_index >= 0:
                    if self.updatedatasetdlg.links_list[selected_link_index] not in self.updatedatasetdlg.links_to_link:
                        self.updatedatasetdlg.links_to_link.append(self.updatedatasetdlg.links_list[selected_link_index])
                    reload_linked_links()
                    self.updatedatasetdlg.datasetLinkComboBoxInput.setCurrentIndex(0)

            def unlink_link():
                selected_link_rows = list(set([x.row() for x in self.updatedatasetdlg.datasetLinksTableWidget.selectedItems()]))
                if selected_link_rows:
                    self.updatedatasetdlg.links_to_link = [x for x in self.updatedatasetdlg.links_to_link if self.updatedatasetdlg.links_to_link.index(x) not in selected_link_rows]
                    reload_linked_links()
                else:
                    self.iface.messageBar().pushMessage('Ошибка', 'Нужно выбрать хотя бы одну связанную ссылку',
                                                        level=Qgis.Warning,
                                                        duration=5)

            def link_transmittal():
                selected_transmittal_index = self.updatedatasetdlg.datasetTransmittalComboBoxInput.currentIndex() - 1
                if selected_transmittal_index >= 0:
                    if self.updatedatasetdlg.transmittals_list[selected_transmittal_index] not in self.updatedatasetdlg.transmittals_to_link:
                        self.updatedatasetdlg.transmittals_to_link.append(self.updatedatasetdlg.transmittals_list[selected_transmittal_index])
                    reload_linked_transmittals()
                    self.updatedatasetdlg.datasetTransmittalComboBoxInput.setCurrentIndex(0)

            def unlink_transmittal():
                selected_transmittal_rows = list(set([x.row() for x in self.updatedatasetdlg.datasetTransmittalsTableWidget.selectedItems()]))
                if selected_transmittal_rows:
                    self.updatedatasetdlg.transmittals_to_link = [x for x in self.updatedatasetdlg.transmittals_to_link if self.updatedatasetdlg.transmittals_to_link.index(x) not in selected_transmittal_rows]
                    reload_linked_transmittals()
                else:
                    self.iface.messageBar().pushMessage('Ошибка',
                                                        'Нужно выбрать хотя бы один связанный акт приема-передачи',
                                                        level=Qgis.Warning,
                                                        duration=5)
            
            def generate_and_execute_sql():
                drive_ids_to_insert = None
                link_ids_to_insert = None
                transmittal_ids_to_insert = None
                selected_dataset_id = self.seismic_datasets_view_list[self.updatedatasetdlg.selected_dataset_row]['dataset_id']
                selected_datasource_type_index = self.updatedatasetdlg.datasetDataSourceTypeComboBoxInput.currentIndex()
                new_shortname = self.updatedatasetdlg.datasetShortnameLineEditInput.text().strip().replace("'", "''")
                new_name = self.updatedatasetdlg.datasetNameLineEditInput.text().strip().replace("'", "''")
                selected_type_index = self.updatedatasetdlg.datasetTypeComboBoxInput.currentIndex()
                selected_format_index = self.updatedatasetdlg.datasetFormatComboBoxInput.currentIndex()
                selected_quality_index = self.updatedatasetdlg.datasetQualityComboBoxInput.currentIndex() - 1
                new_sizegb = self.updatedatasetdlg.datasetSizeGbSpinBoxInput.value()
                if all([new_shortname, new_name, selected_features_list]):
                    selected_datasource_type_id = \
                    self.updatedatasetdlg.datasource_types_list[selected_datasource_type_index]['datasource_type_id']
                    selected_type_id = self.updatedatasetdlg.seismic_types_list[selected_type_index]['seismic_type_id']
                    selected_format_id = self.updatedatasetdlg.formats_list[selected_format_index]['format_id']
                    selected_quality_id = None
                    if selected_quality_index >= 0:
                        selected_quality_id = self.updatedatasetdlg.data_quality_list[selected_quality_index][
                        'data_quality_id']
                    if self.updatedatasetdlg.drives_to_link:
                        drive_ids_to_insert = [x['drive_id'] for x in self.updatedatasetdlg.drives_to_link]
                    if self.updatedatasetdlg.links_to_link:
                        link_ids_to_insert = [x['link_id'] for x in self.updatedatasetdlg.links_to_link]
                    if self.updatedatasetdlg.transmittals_to_link:
                        transmittal_ids_to_insert = [x['transmittal_id'] for x in
                                                     self.updatedatasetdlg.transmittals_to_link]
                    if any(['proc_id' in [f.name() for f in geom_layer.fields()], 'survey_id' in [f.name() for f in geom_layer.fields()]]):
                        geom_field = ''
                        if pol_id_fname in [f.name() for f in geom_layer.fields()]:
                            geom_field = pol_id_fname
                        elif line_id_fname in [f.name() for f in geom_layer.fields()]:
                            geom_field = line_id_fname
                        geom_ids_to_link = [f.attribute(geom_field) for f in selected_features_list]
                    else:
                        geom_ids_to_link = None

                    fields_to_update = ['datasource_type_id', 'shortname', 'name', 'seismic_type_id',
                                        'format_id']
                    values_to_insert = [str(selected_datasource_type_id),
                                        f"'{new_shortname}'", f"'{new_name}'", str(selected_type_id),
                                        str(selected_format_id)]
                    if selected_quality_id:
                        fields_to_update.append('data_quality_id')
                        values_to_insert.append(str(selected_quality_id))
                    if new_sizegb > 0:
                        fields_to_update.append('size_gb')
                        values_to_insert.append(str(new_sizegb))
                    sql = f"update {self.seismic_datasets} set {', '.join([x[0] + ' = ' + x[1] for x in zip(fields_to_update, values_to_insert)])} where dataset_id = {str(selected_dataset_id)};"
                    if drive_ids_to_insert:
                        sql += f" delete from {self.drives_to_datasets} where dataset_id = {str(selected_dataset_id)};"
                        sql += f" insert into {self.drives_to_datasets}(drive_id, dataset_id) " \
                               f"values{', '.join(['(' + str(x) + ', ' + str(selected_dataset_id) + ')' for x in drive_ids_to_insert])}" \
                               f";"
                    if link_ids_to_insert:
                        sql += f" delete from {self.links_to_datasets} where dataset_id = {str(selected_dataset_id)};"
                        sql += f" insert into {self.links_to_datasets}(link_id, dataset_id) " \
                               f"values{', '.join(['(' + str(x) + ', ' + str(selected_dataset_id) + ')' for x in link_ids_to_insert])}" \
                               f";"
                    if transmittal_ids_to_insert:
                        sql += f" delete from {self.seismic_datasets_to_transmittals} where seismic_dataset_id = {str(selected_dataset_id)};"
                        sql += f" insert into {self.seismic_datasets_to_transmittals}(transmittal_id, seismic_dataset_id) " \
                               f"values{', '.join(['(' + str(x) + ', ' + str(selected_dataset_id) + ')' for x in transmittal_ids_to_insert])}" \
                               f";"
                    self.sql = sql
                    mwidget = self.iface.messageBar().createMessage(f"Изменить набор данных {str(new_name)}?")
                    mbutton = QPushButton(mwidget)
                    mbutton.setText('Подтвердить')
                    mbutton.pressed.connect(self.execute_sql)
                    mwidget.layout().addWidget(mbutton)
                    self.iface.messageBar().pushWidget(mwidget, Qgis.Warning, duration=5)
                    self.updatedatasetdlg.accept()
                else:
                    self.iface.messageBar().pushMessage('Ошибка',
                                                        'Нужно указать все обязательные поля',
                                                        level=Qgis.Warning,
                                                        duration=5)
            reload_datasource_types()
            reload_dataset_shortname()
            reload_dataset_name()
            reload_seismic_types()
            reload_formats()
            reload_data_quality()
            reload_sizegb()
            reload_drives()
            get_linked_drives_from_postgres()
            reload_linked_drives()
            reload_links()
            get_linked_links_from_postgres()
            reload_linked_links()
            reload_transmittals()
            get_linked_transmittals_from_postgres()
            reload_linked_transmittals()
            self.updatedatasetdlg.datasetRefreshDrivesButton.clicked.connect(reload_drives)
            self.updatedatasetdlg.datasetAllDrivesFilterLineEditInput.textEdited.connect(reload_drives)
            self.updatedatasetdlg.datasetNewDriveButton.clicked.connect(self.add_drive)
            self.updatedatasetdlg.datasetLinkDriveButton.clicked.connect(link_drive)
            self.updatedatasetdlg.datasetUnLinkDriveButton.clicked.connect(unlink_drive)
            self.updatedatasetdlg.datasetRefreshLinksButton.clicked.connect(reload_links)
            self.updatedatasetdlg.datasetLinksFilterLineEditInput.textEdited.connect(reload_links)
            self.updatedatasetdlg.datasetLinkComboBoxInput.activated.connect(link_link)
            self.updatedatasetdlg.unlinkSelectedLinksButton.clicked.connect(unlink_link)
            self.updatedatasetdlg.datasetNewLinkButton.clicked.connect(self.add_link)
            self.updatedatasetdlg.datasetRefreshTransmittalsButton.clicked.connect(reload_transmittals)
            self.updatedatasetdlg.datasetTransmittalsFilterLineEditInput.textEdited.connect(reload_transmittals)
            self.updatedatasetdlg.datasetTransmittalComboBoxInput.activated.connect(link_transmittal)
            self.updatedatasetdlg.unlinkSelectedTransmittalsButton.clicked.connect(unlink_transmittal)
            self.updatedatasetdlg.datasetNewTransmittalButton.clicked.connect(self.add_transmittal)
            self.updatedatasetdlg.insertDatasetButton.clicked.connect(generate_and_execute_sql)
            self.updatedatasetdlg.show()
        else:
            self.iface.messageBar().pushMessage('Ошибка', 'Нужно выбрать один набор данных', level=Qgis.Warning, duration=3)


    def delete_dataset(self):
        selected_cells = self.wind.datasetTableWidget.selectedItems()
        selected_rows = list(set([x.row() for x in selected_cells]))
        if selected_rows:
            selected_dataset_ids_list = [self.seismic_datasets_view_list[i]['dataset_id'] for i in selected_rows]
            self.sql = f"delete from {self.seismic_datasets} where dataset_id in ({', '.join([str(x) for x in selected_dataset_ids_list])});" \
                       f" delete from {self.datasets_to_geometries} where dataset_id in ({', '.join([str(x) for x in selected_dataset_ids_list])});" \
                       f" delete from {self.drives_to_datasets} where dataset_id in ({', '.join([str(x) for x in selected_dataset_ids_list])});" \
                       f" delete from {self.links_to_datasets} where dataset_id in ({', '.join([str(x) for x in selected_dataset_ids_list])});" \
                       f" delete from {self.seismic_datasets_to_transmittals} where seismic_dataset_id in ({', '.join([str(x) for x in selected_dataset_ids_list])});"
            mwidget = self.iface.messageBar().createMessage(f"Удалить из базы наборы данных {', '.join(['[' + x['shortname'] + ']' for x in [self.seismic_datasets_view_list[i] for i in selected_rows]])}? "
                                                            f"Это приведет к удалению их связей со всеми профилями, площадками, носителями, актами и другими связанными объектами.")
            mbutton = QPushButton(mwidget)
            mbutton.setText('Подтвердить')
            mbutton.pressed.connect(self.execute_sql)
            # mbutton.pressed.connect(self.refresh_datasets)
            mwidget.layout().addWidget(mbutton)
            self.iface.messageBar().pushWidget(mwidget, Qgis.Warning, duration=5)


    def add_drive(self):
        self.adddrivedlg = AddDriveDialog()
        self.adddrivedlg.drive_types_list = None
        self.adddrivedlg.conf_list = None

        def reload_drive_types():
            self.adddrivedlg.driveTypeComboBox.clear()
            with psycopg2.connect(self.dsn, cursor_factory=DictCursor) as pgconn:
                with pgconn.cursor() as cur:
                    sql = f"select * from {self.drive_types}"
                    cur.execute(sql)
                    self.adddrivedlg.drive_types_list = list(cur.fetchall())
                    self.adddrivedlg.driveTypeComboBox.addItems([row['name'] for row in self.adddrivedlg.drive_types_list])

        def reload_conf():
            self.adddrivedlg.driveConfComboBox.clear()
            with psycopg2.connect(self.dsn, cursor_factory=DictCursor) as pgconn:
                with pgconn.cursor() as cur:
                    sql = f"select * from {self.conf}"
                    cur.execute(sql)
                    self.adddrivedlg.conf_list = list(cur.fetchall())
                    self.adddrivedlg.driveConfComboBox.addItem('Выберите тип конфиденциальности')
                    self.adddrivedlg.driveConfComboBox.addItems([row['conf_name'] for row in self.adddrivedlg.conf_list])

        reload_drive_types()
        reload_conf()

        def generate_and_execute_sql():
            new_drive_number = self.adddrivedlg.driveNumberLineEdit.text().strip().replace("'", "''")
            if new_drive_number:
                selected_drive_type_index = self.adddrivedlg.driveTypeComboBox.currentIndex()
                selected_drive_type_id = self.adddrivedlg.drive_types_list[selected_drive_type_index]['drive_type_id']
                selected_drive_type_name = self.adddrivedlg.drive_types_list[selected_drive_type_index]['name']
                new_drive_label = self.adddrivedlg.driveLabelTextEdit.toPlainText().strip().replace("'", "''")
                new_drive_sizegb = self.adddrivedlg.driveSizeGbSpinBox.value()
                selected_conf_index = self.adddrivedlg.driveConfComboBox.currentIndex() - 1
                new_drive_conf_limit = self.adddrivedlg.driveConfLimitLineEdit.text().strip().replace("'", "''")
                fields_to_update = 'drive_number, type_id'
                values_to_insert = f"'{new_drive_number}', {str(selected_drive_type_id)}"
                if new_drive_label:
                    fields_to_update += ', label'
                    values_to_insert += f", '{new_drive_label}'"
                if new_drive_sizegb > 0:
                    fields_to_update += ', volume_gb'
                    values_to_insert += f", {str(new_drive_sizegb)}"
                if selected_conf_index >= 0:
                    fields_to_update += ', conf_id'
                    selected_conf_id = self.adddrivedlg.conf_list[selected_conf_index]['conf_id']
                    values_to_insert += f", {str(selected_conf_id)}"
                if new_drive_conf_limit:
                    fields_to_update += ', conf_limit'
                    values_to_insert += f", '{new_drive_conf_limit}'"
                self.sql = f"insert into {self.drives}({fields_to_update}) values({values_to_insert})"
                mwidget = self.iface.messageBar().createMessage(f"Добавить в базу {selected_drive_type_name} {str(new_drive_number)}?")
                mbutton = QPushButton(mwidget)
                mbutton.setText('Подтвердить')
                mbutton.pressed.connect(self.execute_sql)
                mwidget.layout().addWidget(mbutton)
                self.iface.messageBar().pushWidget(mwidget, Qgis.Warning, duration=5)
                self.adddrivedlg.accept()
            else:
                self.iface.messageBar().pushMessage('Ошибка', 'Введите номер и тип нового физ.носителя',
                                                    level=Qgis.Warning, duration=5)
        self.adddrivedlg.insertDriveButton.clicked.connect(generate_and_execute_sql)
        self.adddrivedlg.show()

    def add_link(self):
        self.addlinkdlg = AddLinkDialog()
        def generate_and_execute_sql():
            new_link = self.addlinkdlg.linkPlainTextEdit.toPlainText().strip().replace("'", "''") #.replace('\\', '\\\\')
            if new_link:
                sql = f"select * from {self.links}"
                with psycopg2.connect(self.dsn, cursor_factory=DictCursor) as pgconn:
                    with pgconn.cursor() as cur:
                        cur.execute(sql)
                        all_links_list = list(cur.fetchall())
                        if new_link not in [x['link'] for x in all_links_list]:
                            self.sql = f"insert into {self.links}(link) values('{new_link}');"
                            mwidget = self.iface.messageBar().createMessage(
                                f"Добавить в базу новую ссылку {new_link}?")
                            mbutton = QPushButton(mwidget)
                            mbutton.setText('Подтвердить')
                            mbutton.pressed.connect(self.execute_sql)
                            mwidget.layout().addWidget(mbutton)
                            self.iface.messageBar().pushWidget(mwidget, Qgis.Warning, duration=5)
                            self.addlinkdlg.accept()
                        else:
                            self.iface.messageBar().pushMessage('Ошибка', 'Такая ссылка уже есть в базе',
                                                                level=Qgis.Warning, duration=5)
        self.addlinkdlg.insertLinkButton.clicked.connect(generate_and_execute_sql)
        self.addlinkdlg.show()


    def add_transmittal(self):
        self.addtransmittaldlg = AddTransmittalDialog()
        self.addtransmittaldlg.transmittalRefreshCompaniesPushButton.setIcon(QIcon(':/plugins/geo_dm/refresh.png'))
        self.addtransmittaldlg.transmittal_types_list = None
        self.addtransmittaldlg.from_companies_list = None
        self.addtransmittaldlg.to_companies_list = None

        def reload_transmittal_types():
            self.addtransmittaldlg.transmittalTypeComboBox.clear()
            with psycopg2.connect(self.dsn, cursor_factory=DictCursor) as pgconn:
                with pgconn.cursor() as cur:
                    sql = f"select * from {self.transmittal_types}"
                    cur.execute(sql)
                    self.addtransmittaldlg.transmittal_types_list = cur.fetchall()
                    self.addtransmittaldlg.transmittalTypeComboBox.addItems(
                        [row['name'] for row in self.addtransmittaldlg.transmittal_types_list])

        def reload_from_companies():
            self.addtransmittaldlg.transmittalFromCompanyComboBox.clear()
            with psycopg2.connect(self.dsn, cursor_factory=DictCursor) as pgconn:
                with pgconn.cursor() as cur:
                    sql = f"select * from {self.companies}"
                    filter_str = self.addtransmittaldlg.transmittalFromCompanyFilterLineEdit.text().lower().strip().replace("'", "''")
                    if filter_str:
                        sql += f" where LOWER(name) like '%{filter_str}%' " \
                               f"or LOWER(shortname) like '%{filter_str}%'"
                    sql += ' order by name'
                    cur.execute(sql)
                    self.addtransmittaldlg.from_companies_list = cur.fetchall()
                    self.addtransmittaldlg.transmittalFromCompanyComboBox.addItem('--Выберите отправителя--')
                    self.addtransmittaldlg.transmittalFromCompanyComboBox.addItems(
                        [row['name'] for row in self.addtransmittaldlg.from_companies_list])

        def reload_to_companies():
            self.addtransmittaldlg.transmittalToCompanyComboBox.clear()
            with psycopg2.connect(self.dsn, cursor_factory=DictCursor) as pgconn:
                with pgconn.cursor() as cur:
                    sql = f"select * from {self.companies}"
                    filter_str = self.addtransmittaldlg.transmittalToCompanyFilterLineEdit.text().lower().strip().replace("'", "''")
                    if filter_str:
                        sql += f" where LOWER(name) like '%{filter_str}%' " \
                               f"or LOWER(shortname) like '%{filter_str}%'"
                    sql += ' order by name'
                    cur.execute(sql)
                    self.addtransmittaldlg.to_companies_list = cur.fetchall()
                    self.addtransmittaldlg.transmittalToCompanyComboBox.addItem('--Выберите получателя--')
                    self.addtransmittaldlg.transmittalToCompanyComboBox.addItems(
                        [row['name'] for row in self.addtransmittaldlg.to_companies_list])

        reload_transmittal_types()
        reload_from_companies()
        reload_to_companies()

        def generate_and_execute_sql():
            selected_transmittal_type_index = self.addtransmittaldlg.transmittalTypeComboBox.currentIndex()
            new_transmittal_number = self.addtransmittaldlg.transmittalNumberLineEdit.text().strip().replace("'", "''")
            # new_transmittal_date = self.addtransmittaldlg.transmittalDateEdit.dateTime()
            new_transmittal_date = self.addtransmittaldlg.transmittalCalendarWidget.selectedDate()
            # selected_contract_date.toString('yyyy-MM-dd')
            selected_transmittal_from_company_index = self.addtransmittaldlg.transmittalFromCompanyComboBox.currentIndex() - 1
            selected_transmittal_to_company_index = self.addtransmittaldlg.transmittalToCompanyComboBox.currentIndex() - 1
            if all([new_transmittal_number,
                    selected_transmittal_from_company_index >= 0,
                    selected_transmittal_to_company_index >= 0]):
                selected_transmittal_type_id = self.addtransmittaldlg.transmittal_types_list[selected_transmittal_type_index]['transmittal_type_id']
                selected_transmittal_from_company_id = self.addtransmittaldlg.from_companies_list[selected_transmittal_from_company_index]['company_id']
                selected_transmittal_to_company_id = self.addtransmittaldlg.to_companies_list[selected_transmittal_to_company_index]['company_id']
                new_transmittal_name = self.addtransmittaldlg.transmittalNameLineEdit.text().strip().lower().replace("'", "''")
                new_transmittal_desc = self.addtransmittaldlg.transmittalDescPlainTextEdit.toPlainText().strip().lower().replace("'", "''")
                new_transmittal_comments = self.addtransmittaldlg.transmittalCommentsPlainTextEdit.toPlainText().strip().lower().replace("'", "''")
                new_transmittal_scan_link = self.addtransmittaldlg.transmittalScanLinkLineEdit.text().strip().lower().replace("'", "''")
                fields_to_update = 'transmittal_type_id, number, datestamp, from_company_id, to_company_id'
                values_to_insert = f"{str(selected_transmittal_type_id)}, " \
                                   f"'{new_transmittal_number}', " \
                                   f"'{new_transmittal_date.toString('yyyy-MM-dd')}', " \
                                   f"{str(selected_transmittal_from_company_id)}, " \
                                   f"{str(selected_transmittal_to_company_id)}"
                if new_transmittal_name:
                    fields_to_update += ', name'
                    values_to_insert += f", '{new_transmittal_name}'"
                if new_transmittal_desc:
                    fields_to_update += ', description'
                    values_to_insert += f", '{new_transmittal_desc}'"
                if new_transmittal_comments:
                    fields_to_update += ', comments'
                    values_to_insert += f", '{new_transmittal_comments}'"
                if new_transmittal_scan_link:
                    fields_to_update += ', scan_link'
                    values_to_insert += f", '{new_transmittal_scan_link}'"
                self.sql = f"insert into {self.transmittals}({fields_to_update}) values({values_to_insert});"
                mwidget = self.iface.messageBar().createMessage(f"Добавить в базу акт {str(new_transmittal_number)}?")
                mbutton = QPushButton(mwidget)
                mbutton.setText('Подтвердить')
                mbutton.pressed.connect(self.execute_sql)
                mwidget.layout().addWidget(mbutton)
                self.iface.messageBar().pushWidget(mwidget, Qgis.Warning, duration=5)
                self.addtransmittaldlg.accept()
            else:
                self.iface.messageBar().pushMessage('Ошибка', 'Нужно указать Тип, Номер, Дату, Отправителя и Получателя акта', level=Qgis.Warning,
                                                    duration=3)
        self.addtransmittaldlg.transmittalFromCompanyFilterLineEdit.textEdited.connect(reload_from_companies)
        self.addtransmittaldlg.transmittalToCompanyFilterLineEdit.textEdited.connect(reload_to_companies)
        self.addtransmittaldlg.transmittalNewCompanyPushButton.clicked.connect(self.add_company)
        self.addtransmittaldlg.transmittalRefreshCompaniesPushButton.clicked.connect(reload_from_companies)
        self.addtransmittaldlg.transmittalRefreshCompaniesPushButton.clicked.connect(reload_to_companies)
        self.addtransmittaldlg.insertTransmittalPushButton.clicked.connect(generate_and_execute_sql)
        self.addtransmittaldlg.show()


    def refresh_aux_doc_types(self):
        self.doc_types = {
            'Компании': 0
            , 'Договоры': 1
            , 'Конфиденциальность': 2
            , 'Качество данных': 3
            , 'Физические носители': 4
            , 'Форматы': 5
            , 'Ссылки': 6
            , 'NDA': 7
            , 'Проекты': 8
            , 'Отчеты': 9
            , 'Акты приема-передачи': 10
                     }
        self.wind.auxDocTypeComboBox.addItem('--Выберите тип документа--')
        self.wind.auxDocTypeComboBox.addItems(self.doc_types.keys())


    def reload_aux_docs(self):
        selected_doc_type_index = self.wind.auxDocTypeComboBox.currentIndex() - 1
        if selected_doc_type_index >= 0:
            filter_str = self.wind.auxFilterLineEdit.text().lower().strip().replace("'", "''")
            selected_doc_type = self.doc_types[self.wind.auxDocTypeComboBox.currentText()]
            if selected_doc_type == 0:
                sql = f"select * from {self.companies}"
                if filter_str:
                    sql += f" where (LOWER(name) like '%{filter_str}%'" \
                           f" or LOWER(shortname) like '%{filter_str}%'" \
                           f")"
                sql += ' order by name;'
                try:
                    with psycopg2.connect(self.dsn, cursor_factory=DictCursor) as pgconn:
                        with pgconn.cursor() as cur:
                            cur.execute(sql)
                            self.aux_docs_dict = {}
                            self.aux_docs_dict['doc_type'] = 'companies'
                            self.aux_docs_dict['docs_list'] = list(cur.fetchall())
                    self.wind.auxDocsTableWidget.clear()
                    self.wind.auxDocsTableWidget.setRowCount(0)
                    self.wind.auxDocsTableWidget.setColumnCount(2)
                    self.wind.auxDocsTableWidget.setHorizontalHeaderLabels(['Название', 'Короткое имя'])
                    header = self.wind.auxDocsTableWidget.horizontalHeader()
                    header.resizeSection(0, 325)
                    header.resizeSection(1, 150)
                    for i, company_row in enumerate(self.aux_docs_dict['docs_list']):
                        self.wind.auxDocsTableWidget.insertRow(i)
                        citem = QTableWidgetItem(company_row['name'])
                        citem.setToolTip(str(company_row['name']))
                        citem.setFlags(Qt.ItemIsSelectable | Qt.ItemIsEnabled)
                        self.wind.auxDocsTableWidget.setItem(i, 0, citem)
                        citem = QTableWidgetItem(company_row['shortname'])
                        citem.setToolTip(str(company_row['shortname']))
                        citem.setFlags(Qt.ItemIsSelectable | Qt.ItemIsEnabled)
                        self.wind.auxDocsTableWidget.setItem(i, 1, citem)
                except:
                    self.iface.messageBar().pushMessage('Ошибка',
                                                        'Не удалось загрузить список компаний из базы ' + sql,
                                                        level=Qgis.Critical, duration=3)
            elif selected_doc_type == 1:
                sql = f"select * from {self.contracts_view}"
                if filter_str:
                    sql += f" where (LOWER(number) like '%{filter_str}%'" \
                           f" or LOWER(date::text) like '%{filter_str}%'" \
                           f" or LOWER(name) like '%{filter_str}%'" \
                           f" or LOWER(customer) like '%{filter_str}%'" \
                           f" or LOWER(customer_short) like '%{filter_str}%'" \
                           f" or LOWER(contractor) like '%{filter_str}%'" \
                           f" or LOWER(contractor_short) like '%{filter_str}%'" \
                           f" or LOWER(contract_type) like '%{filter_str}%'" \
                           f" or LOWER(link) like '%{filter_str}%'" \
                           f")"
                sql += ' order by date DESC;'
                try:
                    with psycopg2.connect(self.dsn, cursor_factory=DictCursor) as pgconn:
                        with pgconn.cursor() as cur:
                            cur.execute(sql)
                            self.aux_docs_dict = {}
                            self.aux_docs_dict['doc_type'] = 'contracts'
                            self.aux_docs_dict['docs_list'] = list(cur.fetchall())
                    self.wind.auxDocsTableWidget.clear()
                    self.wind.auxDocsTableWidget.setRowCount(0)
                    self.wind.auxDocsTableWidget.setColumnCount(4)
                    self.wind.auxDocsTableWidget.setHorizontalHeaderLabels(['Номер', 'Дата', 'Заказчик', 'Подрядчик'])
                    header = self.wind.auxDocsTableWidget.horizontalHeader()
                    header.resizeSection(0, 200)
                    header.resizeSection(1, 95)
                    header.resizeSection(2, 100)
                    header.resizeSection(3, 100)
                    for i, contract_row in enumerate(self.aux_docs_dict['docs_list']):
                        self.wind.auxDocsTableWidget.insertRow(i)
                        citem = QTableWidgetItem(contract_row['number'])
                        citem.setToolTip(str(f"{contract_row['number']} {contract_row['name']}"))
                        citem.setFlags(Qt.ItemIsSelectable | Qt.ItemIsEnabled)
                        self.wind.auxDocsTableWidget.setItem(i, 0, citem)
                        citem = QTableWidgetItem(str(contract_row['date']))
                        citem.setToolTip(str(contract_row['date']))
                        citem.setFlags(Qt.ItemIsSelectable | Qt.ItemIsEnabled)
                        self.wind.auxDocsTableWidget.setItem(i, 1, citem)
                        citem = QTableWidgetItem(str(contract_row['customer_short']))
                        citem.setToolTip(str(contract_row['customer']))
                        citem.setFlags(Qt.ItemIsSelectable | Qt.ItemIsEnabled)
                        self.wind.auxDocsTableWidget.setItem(i, 2, citem)
                        citem = QTableWidgetItem(str(contract_row['contractor_short']))
                        citem.setToolTip(str(contract_row['contractor']))
                        citem.setFlags(Qt.ItemIsSelectable | Qt.ItemIsEnabled)
                        self.wind.auxDocsTableWidget.setItem(i, 3, citem)
                except:
                    self.iface.messageBar().pushMessage('Ошибка',
                                                        'Не удалось загрузить список договоров из базы ' + sql,
                                                        level=Qgis.Critical, duration=3)
            elif selected_doc_type == 2:
                sql = f"select * from {self.conf}"
                if filter_str:
                    sql += f" where (LOWER(conf_name) like '%{filter_str}%'" \
                           f" or LOWER(conf_name_short) like '%{filter_str}%'" \
                           f")"
                sql += ' order by conf_name;'
                try:
                    with psycopg2.connect(self.dsn, cursor_factory=DictCursor) as pgconn:
                        with pgconn.cursor() as cur:
                            cur.execute(sql)
                            self.aux_docs_dict = {}
                            self.aux_docs_dict['doc_type'] = 'conf'
                            self.aux_docs_dict['docs_list'] = list(cur.fetchall())
                    self.wind.auxDocsTableWidget.clear()
                    self.wind.auxDocsTableWidget.setRowCount(0)
                    self.wind.auxDocsTableWidget.setColumnCount(2)
                    self.wind.auxDocsTableWidget.setHorizontalHeaderLabels(['Конфиденциальность'])
                    header = self.wind.auxDocsTableWidget.horizontalHeader()
                    header.resizeSection(0, 395)
                    header.resizeSection(1, 100)
                    for i, contract_row in enumerate(self.aux_docs_dict['docs_list']):
                        self.wind.auxDocsTableWidget.insertRow(i)
                        citem = QTableWidgetItem(contract_row['conf_name'])
                        citem.setToolTip(contract_row['conf_name'])
                        citem.setFlags(Qt.ItemIsSelectable | Qt.ItemIsEnabled)
                        self.wind.auxDocsTableWidget.setItem(i, 0, citem)
                        citem = QTableWidgetItem(contract_row['conf_name_short'])
                        citem.setToolTip(contract_row['conf_name_short'])
                        citem.setFlags(Qt.ItemIsSelectable | Qt.ItemIsEnabled)
                        self.wind.auxDocsTableWidget.setItem(i, 1, citem)
                except:
                    self.iface.messageBar().pushMessage('Ошибка',
                                                        'Не удалось загрузить список уровней конфиденциальности из базы ' + sql,
                                                        level=Qgis.Critical, duration=3)
            elif selected_doc_type == 3:
                sql = f"select * from {self.data_quality}"
                if filter_str:
                    sql += f" where (LOWER(name_ru) like '%{filter_str}%'" \
                           f" or LOWER(name_en) like '%{filter_str}%'" \
                           f")"
                sql += ' order by quality_range DESC;'
                try:
                    with psycopg2.connect(self.dsn, cursor_factory=DictCursor) as pgconn:
                        with pgconn.cursor() as cur:
                            cur.execute(sql)
                            self.aux_docs_dict = {}
                            self.aux_docs_dict['doc_type'] = 'data_quality'
                            self.aux_docs_dict['docs_list'] = list(cur.fetchall())
                    self.wind.auxDocsTableWidget.clear()
                    self.wind.auxDocsTableWidget.setRowCount(0)
                    self.wind.auxDocsTableWidget.setColumnCount(2)
                    self.wind.auxDocsTableWidget.setHorizontalHeaderLabels(['Качество данных'])
                    header = self.wind.auxDocsTableWidget.horizontalHeader()
                    header.resizeSection(0, 390)
                    header.resizeSection(1, 90)
                    for i, row in enumerate(self.aux_docs_dict['docs_list']):
                        self.wind.auxDocsTableWidget.insertRow(i)
                        citem = QTableWidgetItem(row['name_ru'])
                        citem.setToolTip(row['name_ru'])
                        citem.setFlags(Qt.ItemIsSelectable | Qt.ItemIsEnabled)
                        self.wind.auxDocsTableWidget.setItem(i, 0, citem)
                        citem = QTableWidgetItem(str(row['quality_range']))
                        citem.setToolTip(str(row['quality_range']))
                        citem.setFlags(Qt.ItemIsSelectable | Qt.ItemIsEnabled)
                        self.wind.auxDocsTableWidget.setItem(i, 1, citem)
                except:
                    self.iface.messageBar().pushMessage('Ошибка',
                                                        'Не удалось загрузить список качества данных из базы ' + sql,
                                                        level=Qgis.Critical, duration=3)
            elif selected_doc_type == 4:
                sql = f"select * from {self.drives_view}"
                if filter_str:
                    sql += f" where (LOWER(drive_number) like '%{filter_str}%'" \
                           f" or LOWER(drive_type) like '%{filter_str}%'" \
                           f" or LOWER(label) like '%{filter_str}%'" \
                           f" or LOWER(conf_name) like '%{filter_str}%'" \
                           f" or LOWER(conf_name_short) like '%{filter_str}%'" \
                           f" or LOWER(conf_limit) like '%{filter_str}%'" \
                           f")"
                sql += ' order by drive_number;'
                try:
                    with psycopg2.connect(self.dsn, cursor_factory=DictCursor) as pgconn:
                        with pgconn.cursor() as cur:
                            cur.execute(sql)
                            self.aux_docs_dict = {}
                            self.aux_docs_dict['doc_type'] = 'drives'
                            self.aux_docs_dict['docs_list'] = list(cur.fetchall())
                    self.wind.auxDocsTableWidget.clear()
                    self.wind.auxDocsTableWidget.setRowCount(0)
                    self.wind.auxDocsTableWidget.setColumnCount(2)
                    self.wind.auxDocsTableWidget.setHorizontalHeaderLabels(['Номер', 'Тип'])
                    header = self.wind.auxDocsTableWidget.horizontalHeader()
                    header.resizeSection(0, 300)
                    header.resizeSection(1, 195)
                    for i, drive_row in enumerate(self.aux_docs_dict['docs_list']):
                        self.wind.auxDocsTableWidget.insertRow(i)
                        citem = QTableWidgetItem(drive_row['drive_number'])
                        citem.setToolTip(f"{drive_row['drive_number']} {drive_row['label']}")
                        citem.setFlags(Qt.ItemIsSelectable | Qt.ItemIsEnabled)
                        self.wind.auxDocsTableWidget.setItem(i, 0, citem)
                        citem = QTableWidgetItem(drive_row['drive_type'])
                        citem.setFlags(Qt.ItemIsSelectable | Qt.ItemIsEnabled)
                        self.wind.auxDocsTableWidget.setItem(i, 1, citem)
                except:
                    self.iface.messageBar().pushMessage('Ошибка',
                                                        'Не удалось загрузить список физ.носителей из базы ' + sql,
                                                        level=Qgis.Critical, duration=3)
            elif selected_doc_type == 5:
                sql = f"select * from {self.formats}"
                if filter_str:
                    sql += f" where (LOWER(name) like '%{filter_str}%')"
                sql += ' order by name;'
                try:
                    with psycopg2.connect(self.dsn, cursor_factory=DictCursor) as pgconn:
                        with pgconn.cursor() as cur:
                            cur.execute(sql)
                            self.aux_docs_dict = {}
                            self.aux_docs_dict['doc_type'] = 'formats'
                            self.aux_docs_dict['docs_list'] = list(cur.fetchall())
                    self.wind.auxDocsTableWidget.clear()
                    self.wind.auxDocsTableWidget.setRowCount(0)
                    self.wind.auxDocsTableWidget.setColumnCount(1)
                    self.wind.auxDocsTableWidget.setHorizontalHeaderLabels(['Формат'])
                    header = self.wind.auxDocsTableWidget.horizontalHeader()
                    header.resizeSection(0, 495)
                    for i, row in enumerate(self.aux_docs_dict['docs_list']):
                        self.wind.auxDocsTableWidget.insertRow(i)
                        citem = QTableWidgetItem(row['name'])
                        citem.setToolTip(row['name'])
                        citem.setFlags(Qt.ItemIsSelectable | Qt.ItemIsEnabled)
                        self.wind.auxDocsTableWidget.setItem(i, 0, citem)
                except:
                    self.iface.messageBar().pushMessage('Ошибка',
                                                        'Не удалось загрузить список форматов из базы ' + sql,
                                                        level=Qgis.Critical, duration=3)
            elif selected_doc_type == 6:
                sql = f"select * from {self.links}"
                if filter_str:
                    sql += f" where (LOWER(link) like '%{filter_str}%')"
                sql += ' order by link;'
                try:
                    with psycopg2.connect(self.dsn, cursor_factory=DictCursor) as pgconn:
                        with pgconn.cursor() as cur:
                            cur.execute(sql)
                            self.aux_docs_dict = {}
                            self.aux_docs_dict['doc_type'] = 'links'
                            self.aux_docs_dict['docs_list'] = list(cur.fetchall())
                    self.wind.auxDocsTableWidget.clear()
                    self.wind.auxDocsTableWidget.setRowCount(0)
                    self.wind.auxDocsTableWidget.setColumnCount(1)
                    self.wind.auxDocsTableWidget.setHorizontalHeaderLabels(['Ссылка'])
                    header = self.wind.auxDocsTableWidget.horizontalHeader()
                    header.resizeSection(0, 1000)
                    for i, row in enumerate(self.aux_docs_dict['docs_list']):
                        self.wind.auxDocsTableWidget.insertRow(i)
                        citem = QTableWidgetItem(row['link'])
                        citem.setToolTip(row['link'])
                        citem.setFlags(Qt.ItemIsSelectable | Qt.ItemIsEnabled)
                        self.wind.auxDocsTableWidget.setItem(i, 0, citem)
                except:
                    self.iface.messageBar().pushMessage('Ошибка',
                                                        'Не удалось загрузить список ссылок из базы ' + sql,
                                                        level=Qgis.Critical, duration=3)
            elif selected_doc_type == 7:
                sql = f"select * from {self.nda_view}"
                if filter_str:
                    sql += f" where (LOWER(name) like '%{filter_str}%'" \
                           f" or LOWER(company_a_name) like '%{filter_str}%'" \
                           f" or LOWER(company_a_shortname) like '%{filter_str}%'" \
                           f" or LOWER(company_b_name) like '%{filter_str}%'" \
                           f" or LOWER(company_b_shortname) like '%{filter_str}%'" \
                           f" or LOWER(date_signed::text) like '%{filter_str}%'" \
                           f")"
                sql += ' order by date_signed DESC;'
                try:
                    with psycopg2.connect(self.dsn, cursor_factory=DictCursor) as pgconn:
                        with pgconn.cursor() as cur:
                            cur.execute(sql)
                            self.aux_docs_dict = {}
                            self.aux_docs_dict['doc_type'] = 'nda'
                            self.aux_docs_dict['docs_list'] = list(cur.fetchall())
                    self.wind.auxDocsTableWidget.clear()
                    self.wind.auxDocsTableWidget.setRowCount(0)
                    self.wind.auxDocsTableWidget.setColumnCount(3)
                    self.wind.auxDocsTableWidget.setHorizontalHeaderLabels(['Компания A', 'Компания B', 'Дата'])
                    header = self.wind.auxDocsTableWidget.horizontalHeader()
                    header.resizeSection(0, 190)
                    header.resizeSection(1, 190)
                    header.resizeSection(2, 95)
                    for i, row in enumerate(self.aux_docs_dict['docs_list']):
                        self.wind.auxDocsTableWidget.insertRow(i)
                        citem = QTableWidgetItem(row['company_a_shortname'])
                        citem.setToolTip(row['company_a_name'])
                        citem.setFlags(Qt.ItemIsSelectable | Qt.ItemIsEnabled)
                        self.wind.auxDocsTableWidget.setItem(i, 0, citem)
                        citem = QTableWidgetItem(row['company_b_shortname'])
                        citem.setToolTip(row['company_b_name'])
                        citem.setFlags(Qt.ItemIsSelectable | Qt.ItemIsEnabled)
                        self.wind.auxDocsTableWidget.setItem(i, 1, citem)
                        citem = QTableWidgetItem(str(row['date_signed']))
                        citem.setToolTip(str(row['date_signed']))
                        citem.setFlags(Qt.ItemIsSelectable | Qt.ItemIsEnabled)
                        self.wind.auxDocsTableWidget.setItem(i, 2, citem)
                except:
                    self.iface.messageBar().pushMessage('Ошибка',
                                                        'Не удалось загрузить список nda из базы ' + sql,
                                                        level=Qgis.Critical, duration=3)
            elif selected_doc_type == 8:
                sql = f"select * from {self.projects}"
                if filter_str:
                    sql += f" where (LOWER(name_ru) like '%{filter_str}%'" \
                           f" or LOWER(name_en) like '%{filter_str}%'" \
                           f")"
                sql += ' order by name_ru;'
                try:
                    with psycopg2.connect(self.dsn, cursor_factory=DictCursor) as pgconn:
                        with pgconn.cursor() as cur:
                            cur.execute(sql)
                            self.aux_docs_dict = {}
                            self.aux_docs_dict['doc_type'] = 'projects'
                            self.aux_docs_dict['docs_list'] = list(cur.fetchall())
                    self.wind.auxDocsTableWidget.clear()
                    self.wind.auxDocsTableWidget.setRowCount(0)
                    self.wind.auxDocsTableWidget.setColumnCount(1)
                    self.wind.auxDocsTableWidget.setHorizontalHeaderLabels(['Проект'])
                    header = self.wind.auxDocsTableWidget.horizontalHeader()
                    header.resizeSection(0, 495)
                    for i, row in enumerate(self.aux_docs_dict['docs_list']):
                        self.wind.auxDocsTableWidget.insertRow(i)
                        citem = QTableWidgetItem(row['name_ru'])
                        citem.setToolTip(f"{row['name_ru']} - {row['name_en']}")
                        citem.setFlags(Qt.ItemIsSelectable | Qt.ItemIsEnabled)
                        self.wind.auxDocsTableWidget.setItem(i, 0, citem)
                except:
                    self.iface.messageBar().pushMessage('Ошибка',
                                                        'Не удалось загрузить список проектов из базы ' + sql,
                                                        level=Qgis.Critical, duration=3)
            elif selected_doc_type == 9:
                sql = f"select * from {self.reports_view}"
                if filter_str:
                    sql += f" where (LOWER(name) like '%{filter_str}%'" \
                           f" or LOWER(shortname) like '%{filter_str}%'" \
                           f" or LOWER(company_name) like '%{filter_str}%'" \
                           f" or LOWER(company_shortname) like '%{filter_str}%'" \
                           f" or LOWER(contract_number) like '%{filter_str}%'" \
                           f" or LOWER(contract_name) like '%{filter_str}%'" \
                           f" or LOWER(year::text) like '%{filter_str}%'" \
                           f" or LOWER(report_type) like '%{filter_str}%'" \
                           f")"
                sql += ' order by shortname;'
                try:
                    with psycopg2.connect(self.dsn, cursor_factory=DictCursor) as pgconn:
                        with pgconn.cursor() as cur:
                            cur.execute(sql)
                            self.aux_docs_dict = {}
                            self.aux_docs_dict['doc_type'] = 'reports'
                            self.aux_docs_dict['docs_list'] = list(cur.fetchall())
                    self.wind.auxDocsTableWidget.clear()
                    self.wind.auxDocsTableWidget.setRowCount(0)
                    self.wind.auxDocsTableWidget.setColumnCount(4)
                    self.wind.auxDocsTableWidget.setHorizontalHeaderLabels(['Отчет', 'Тип', 'Исполнитель', 'Год'])
                    header = self.wind.auxDocsTableWidget.horizontalHeader()
                    header.resizeSection(0, 250)
                    header.resizeSection(1, 100)
                    header.resizeSection(2, 80)
                    header.resizeSection(3, 50)
                    for i, row in enumerate(self.aux_docs_dict['docs_list']):
                        self.wind.auxDocsTableWidget.insertRow(i)
                        citem = QTableWidgetItem(row['shortname'])
                        citem.setToolTip(row['name'])
                        citem.setFlags(Qt.ItemIsSelectable | Qt.ItemIsEnabled)
                        self.wind.auxDocsTableWidget.setItem(i, 0, citem)
                        citem = QTableWidgetItem(row['report_type'])
                        citem.setToolTip(row['report_type'])
                        citem.setFlags(Qt.ItemIsSelectable | Qt.ItemIsEnabled)
                        self.wind.auxDocsTableWidget.setItem(i, 1, citem)
                        citem = QTableWidgetItem(row['company_shortname'])
                        citem.setToolTip(row['company_name'])
                        citem.setFlags(Qt.ItemIsSelectable | Qt.ItemIsEnabled)
                        self.wind.auxDocsTableWidget.setItem(i, 2, citem)
                        citem = QTableWidgetItem(str(row['year']))
                        citem.setFlags(Qt.ItemIsSelectable | Qt.ItemIsEnabled)
                        self.wind.auxDocsTableWidget.setItem(i, 3, citem)
                except:
                    self.iface.messageBar().pushMessage('Ошибка',
                                                        'Не удалось загрузить список отчетов из базы ' + sql,
                                                        level=Qgis.Critical, duration=3)
            elif selected_doc_type == 10:
                sql = f"select * from {self.transmittals_view}"
                if filter_str:
                    sql += f" where (LOWER(number) like '%{filter_str}%'" \
                           f" or LOWER(name) like '%{filter_str}%'" \
                           f" or LOWER(transmittal_type) like '%{filter_str}%'" \
                           f" or LOWER(from_company) like '%{filter_str}%'" \
                           f" or LOWER(to_company) like '%{filter_str}%'" \
                           f" or LOWER(datestamp::text) like '%{filter_str}%'" \
                           f" or LOWER(from_company_short) like '%{filter_str}%'" \
                           f" or LOWER(to_company_short) like '%{filter_str}%'" \
                           f")"
                sql += ' order by datestamp DESC;'
                try:
                    with psycopg2.connect(self.dsn, cursor_factory=DictCursor) as pgconn:
                        with pgconn.cursor() as cur:
                            cur.execute(sql)
                            self.aux_docs_dict = {}
                            self.aux_docs_dict['doc_type'] = 'transmittals'
                            self.aux_docs_dict['docs_list'] = list(cur.fetchall())
                    self.wind.auxDocsTableWidget.clear()
                    self.wind.auxDocsTableWidget.setRowCount(0)
                    self.wind.auxDocsTableWidget.setColumnCount(4)
                    self.wind.auxDocsTableWidget.setHorizontalHeaderLabels(['Номер', 'Дата', 'Отправитель', 'Получатель'])
                    header = self.wind.auxDocsTableWidget.horizontalHeader()
                    header.resizeSection(0, 125)
                    header.resizeSection(1, 100)
                    header.resizeSection(2, 125)
                    header.resizeSection(3, 125)
                    for i, row in enumerate(self.aux_docs_dict['docs_list']):
                        self.wind.auxDocsTableWidget.insertRow(i)
                        citem = QTableWidgetItem(row['number'])
                        citem.setToolTip(row['number'])
                        citem.setFlags(Qt.ItemIsSelectable | Qt.ItemIsEnabled)
                        self.wind.auxDocsTableWidget.setItem(i, 0, citem)
                        citem = QTableWidgetItem(str(row['datestamp']))
                        citem.setToolTip(str(row['datestamp']))
                        citem.setFlags(Qt.ItemIsSelectable | Qt.ItemIsEnabled)
                        self.wind.auxDocsTableWidget.setItem(i, 1, citem)
                        citem = QTableWidgetItem(row['from_company_short'])
                        citem.setToolTip(row['from_company'])
                        citem.setFlags(Qt.ItemIsSelectable | Qt.ItemIsEnabled)
                        self.wind.auxDocsTableWidget.setItem(i, 2, citem)
                        citem = QTableWidgetItem(row['to_company_short'])
                        citem.setToolTip(row['to_company'])
                        citem.setFlags(Qt.ItemIsSelectable | Qt.ItemIsEnabled)
                        self.wind.auxDocsTableWidget.setItem(i, 3, citem)

                except:
                    self.iface.messageBar().pushMessage('Ошибка',
                                                        'Не удалось загрузить список актов из базы ' + sql,
                                                        level=Qgis.Critical, duration=3)
            self.dockwindaux.auxAddDocButton.clicked.connect(self.add_aux_doc)
            self.dockwindaux.auxUpdateDocButton.clicked.connect(self.update_aux_doc)
            self.dockwindaux.auxDeleteDocButton.clicked.connect(self.delete_aux_doc)
        else:
            self.aux_docs_dict = {}
            self.wind.auxDocsTableWidget.setRowCount(0)
            self.wind.auxDocsTableWidget.setColumnCount(0)
            self.wind.auxDocsTableWidget.clear()


    def add_conf(self):
        self.addconfdlg = AddConfDialog()
        def generate_and_execute_sql():
            new_conf_name = self.addconfdlg.confNameLineEdit.text().strip().replace("'", "''")
            new_conf_shortname = self.addconfdlg.confShortnameLineEdit.text().strip().replace("'", "''")
            if new_conf_name and new_conf_shortname:
                sql = f"insert into {self.conf}(conf_name, conf_name_short) values('{new_conf_name}', '{new_conf_shortname}');"
                self.sql = sql
                mwidget = self.iface.messageBar().createMessage(f"Добавить в базу новую конфиденциальность '{new_conf_name}'?")
                mbutton = QPushButton(mwidget)
                mbutton.setText('Подтвердить')
                mbutton.pressed.connect(self.execute_sql)
                mwidget.layout().addWidget(mbutton)
                self.iface.messageBar().pushWidget(mwidget, Qgis.Warning, duration=3)
                self.addconfdlg.accept()
            else:
                self.iface.messageBar().pushMessage('Ошибка', 'Укажите название и краткое название конфиденциальности',
                                                    level=Qgis.Warning, duration=3)
        self.addconfdlg.insertConfButton.clicked.connect(generate_and_execute_sql)
        self.addconfdlg.show()


    def add_quality(self):
        self.addqualitydlg = AddQualityDialog()
        def generate_and_execute_sql():
            new_quality_name_ru = self.addqualitydlg.qualityNameRuLineEdit.text().strip().replace("'", "''")
            new_quality_name_en = self.addqualitydlg.qualityNameEnLineEdit.text().strip().replace("'", "''")
            new_quality_range = self.addqualitydlg.qualityRangeSpinBox.value()
            if all([new_quality_name_ru, new_quality_name_en, new_quality_range]):
                sql = f"insert into {self.data_quality}(name_ru, name_en, quality_range) values('{new_quality_name_ru}', '{new_quality_name_en}', {str(new_quality_range)});"
                self.sql = sql
                mwidget = self.iface.messageBar().createMessage(
                    f"Добавить в базу новое качество данных '{new_quality_name_ru}'?")
                mbutton = QPushButton(mwidget)
                mbutton.setText('Подтвердить')
                mbutton.pressed.connect(self.execute_sql)
                mwidget.layout().addWidget(mbutton)
                self.iface.messageBar().pushWidget(mwidget, Qgis.Warning, duration=3)
                self.addqualitydlg.accept()
            else:
                self.iface.messageBar().pushMessage('Ошибка', 'Укажите названия на обоих языках и ранг качества',
                                                    level=Qgis.Warning, duration=3)

        self.addqualitydlg.insertQualityButton.clicked.connect(generate_and_execute_sql)
        self.addqualitydlg.show()


    def add_format(self):
        self.addformatdlg = AddFormatDialog()
        def generate_and_execute_sql():
            new_format_name = self.addformatdlg.formatNameLineEdit.text().strip().replace("'", "''")
            if new_format_name:
                sql = f"insert into {self.formats}(name) values('{new_format_name}');"
                self.sql = sql
                mwidget = self.iface.messageBar().createMessage(
                    f"Добавить в базу новый формат '{new_format_name}'?")
                mbutton = QPushButton(mwidget)
                mbutton.setText('Подтвердить')
                mbutton.pressed.connect(self.execute_sql)
                mwidget.layout().addWidget(mbutton)
                self.iface.messageBar().pushWidget(mwidget, Qgis.Warning, duration=3)
                self.addformatdlg.accept()
            else:
                self.iface.messageBar().pushMessage('Ошибка', 'Укажите название формата',
                                                    level=Qgis.Warning, duration=3)

        self.addformatdlg.insertFormatButton.clicked.connect(generate_and_execute_sql)
        self.addformatdlg.show()


    def add_aux_doc(self):
        if self.aux_docs_dict:
            if self.aux_docs_dict['doc_type'] == 'companies':
                self.add_company()
            if self.aux_docs_dict['doc_type'] == 'contracts':
                self.add_contract()
            if self.aux_docs_dict['doc_type'] == 'conf':
                self.add_conf()
            if self.aux_docs_dict['doc_type'] == 'data_quality':
                self.add_quality()
            if self.aux_docs_dict['doc_type'] == 'drives':
                self.add_drive()
            if self.aux_docs_dict['doc_type'] == 'formats':
                self.add_format()
            if self.aux_docs_dict['doc_type'] == 'links':
                self.add_link()
            if self.aux_docs_dict['doc_type'] == 'nda':
                self.add_nda()
            if self.aux_docs_dict['doc_type'] == 'projects':
                self.add_project()
            if self.aux_docs_dict['doc_type'] == 'reports':
                self.add_report()
            if self.aux_docs_dict['doc_type'] == 'transmittals':
                self.add_transmittal()


    def update_aux_doc(self):
        if self.aux_docs_dict:
            if self.aux_docs_dict['doc_type'] == 'companies':
                self.update_company()
            elif self.aux_docs_dict['doc_type'] == 'contracts':
                self.update_contract()


    def delete_aux_doc(self):
        pass


    def run_mps(self):
        """Run method that performs all the real work"""
        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        try:
            self.wind.close()
        except:
            pass
        if self.first_start == True:
            self.first_start = False
            # self.dlg = GeoDMDialogProc()
            self.dockwind = GeoDMDockWidgetProc()
        else:
            # self.dlg = GeoDMDialogProc()
            self.dockwind = GeoDMDockWidgetProc()

        self.mode = 'proc'
        self.wind = self.dockwind

        self.dockwind.selectProcForSelectedGeometryButton.setIcon(QIcon(':/plugins/geo_dm/spreadsheet.png'))
        self.dockwind.selectGeometryForSelectedProcButton.setIcon(QIcon(':/plugins/geo_dm/geometry.png'))
        self.dockwind.refreshProcButton.setIcon(QIcon(':/plugins/geo_dm/refresh.png'))
        self.dockwind.refreshSurveyButton.setIcon(QIcon(':/plugins/geo_dm/refresh.png'))
        self.dockwind.selectSurveyForSelectedGeometryButton.setIcon(QIcon(':/plugins/geo_dm/spreadsheet.png'))
        self.dockwind.selectGeometryForSelectedSurveyButton.setIcon(QIcon(':/plugins/geo_dm/geometry.png'))
        self.dockwind.refreshDatasetButton.setIcon(QIcon(':/plugins/geo_dm/refresh.png'))
        self.dockwind.selectDatasetForSelectedGeometryButton.setIcon(QIcon(':/plugins/geo_dm/spreadsheet.png'))
        self.dockwind.selectGeometryForSelectedDatasetButton.setIcon(QIcon(':/plugins/geo_dm/geometry.png'))
        ltreenode = QgsProject.instance().layerTreeRoot().children()
        layers = list(filter(lambda x: x.type() == QgsMapLayerType.VectorLayer and x.isSpatial(), QgsLayerTreeUtils().collectMapLayersRecursive(ltreenode)))
        if layers:
            self.set_selected_proc_features_list()
            self.display_selected_geometry_count()
            self.iface.mapCanvas().selectionChanged.connect(self.set_selected_proc_features_list)
            self.iface.layerTreeView().currentLayerChanged.connect(self.set_selected_proc_features_list)

            self.refresh_processings()
            self.dockwind.selectProcForSelectedGeometryButton.clicked.connect(self.select_proc_by_geometry)
            self.dockwind.selectGeometryForSelectedProcButton.clicked.connect(self.select_geometry_by_proc)
            self.dockwind.refreshProcButton.clicked.connect(self.refresh_processings)
            self.dockwind.procFilterLineEdit.textEdited.connect(self.refresh_processings)
            self.dockwind.addProcPushButton.clicked.connect(self.add_proc)
            self.dockwind.changeProcPushButton.clicked.connect(self.update_proc_for_selected_features)
            self.dockwind.unlinkProcFromGeometryButton.clicked.connect(self.clear_proc_for_selected_geometry)
            self.dockwind.updateProcPushButton.clicked.connect(self.update_proc)
            self.dockwind.deleteProcPushButton.clicked.connect(self.delete_proc)

            self.refresh_surveys()
            self.dockwind.refreshSurveyButton.clicked.connect(self.refresh_surveys)
            self.dockwind.surveyFilterLineEdit.textEdited.connect(self.refresh_surveys)
            self.dockwind.selectSurveyForSelectedGeometryButton.clicked.connect(self.select_surveys_by_geometry)
            self.dockwind.selectGeometryForSelectedSurveyButton.clicked.connect(self.select_geometry_by_surveys)
            self.dockwind.linkSurveyToGeometryButton.clicked.connect(self.link_selected_surveys_to_geometry)
            self.dockwind.unlinkSurveyFromGeometryButton.clicked.connect(self.unlink_selected_surveys_from_geometry)
            self.dockwind.addSurveyPushButton.clicked.connect(self.add_survey)
            self.dockwind.updateSurveyPushButton.clicked.connect(self.update_survey)
            self.dockwind.deleteSurveyPushButton.clicked.connect(self.delete_survey)

            self.dockwind.showSelectedProcDatasetsRadioButton.clicked.connect(self.check_show_datasets_for_selected_proc)
            self.dockwind.showAllProcDatasetsRadioButton.clicked.connect(self.check_show_datasets_for_all_proc)
            self.dockwind.procTableWidget.itemSelectionChanged.connect(self.refresh_datasets)
            self.dockwind.datasetFilterLineEdit.textEdited.connect(self.refresh_datasets)
            self.dockwind.refreshDatasetButton.clicked.connect(self.refresh_datasets)
            self.dockwind.selectDatasetForSelectedGeometryButton.clicked.connect(self.select_datasets_by_geometry)
            self.dockwind.selectGeometryForSelectedDatasetButton.clicked.connect(self.select_geometry_by_datasets)
            self.dockwind.linkDatasetToGeometryButton.clicked.connect(self.link_selected_datasets_to_geometry)
            self.dockwind.unlinkDatasetFromGeometryButton.clicked.connect(self.unlink_selected_datasets_from_geometry)
            self.dockwind.addDatasetPushButton.clicked.connect(self.add_dataset)
            self.dockwind.updateDatasetPushButton.clicked.connect(self.update_dataset)
            self.dockwind.deleteDatasetPushButton.clicked.connect(self.delete_dataset)

            self.iface.addDockWidget(Qt.LeftDockWidgetArea, self.dockwind)
            self.dockwind.adjustSize()
        else:
            self.iface.messageBar().pushMessage('Ошибка', 'Необходимо добавить в проекте слой с геометрией сейсмики', level=Qgis.Warning, duration=3)


    def run_mfs(self):
        """Run method that performs all the real work"""
        try:
            self.wind.close()
        except:
            pass
        if self.first_start == True:
            self.first_start = False
            self.dockwindfield = GeoDMDockWidgetField()
        else:
            self.dockwindfield = GeoDMDockWidgetField()

        self.mode = 'field'
        self.wind = self.dockwindfield

        self.dockwindfield.selectSurveyForSelectedGeometryButton.setIcon(QIcon(':/plugins/geo_dm/spreadsheet.png'))
        self.dockwindfield.selectGeometryForSelectedSurveyButton.setIcon(QIcon(':/plugins/geo_dm/geometry.png'))
        self.dockwindfield.refreshSurveyButton.setIcon(QIcon(':/plugins/geo_dm/refresh.png'))
        self.dockwindfield.refreshDatasetButton.setIcon(QIcon(':/plugins/geo_dm/refresh.png'))
        self.dockwindfield.selectDatasetForSelectedGeometryButton.setIcon(QIcon(':/plugins/geo_dm/spreadsheet.png'))
        self.dockwindfield.selectGeometryForSelectedDatasetButton.setIcon(QIcon(':/plugins/geo_dm/geometry.png'))

        ltreenode = QgsProject.instance().layerTreeRoot().children()
        layers = list(filter(lambda x: x.type() == QgsMapLayerType.VectorLayer and x.isSpatial(),
                             QgsLayerTreeUtils().collectMapLayersRecursive(ltreenode)))
        if layers:
            self.set_selected_field_features_list()
            self.display_selected_field_geometry_count()
            self.iface.mapCanvas().selectionChanged.connect(self.set_selected_field_features_list)
            self.iface.layerTreeView().currentLayerChanged.connect(self.set_selected_field_features_list)

            self.refresh_surveys()
            self.dockwindfield.refreshSurveyButton.clicked.connect(self.refresh_surveys)
            self.dockwindfield.surveyFilterLineEdit.textEdited.connect(self.refresh_surveys)
            self.dockwindfield.selectSurveyForSelectedGeometryButton.clicked.connect(self.select_surveys_by_geometry)
            self.dockwindfield.selectGeometryForSelectedSurveyButton.clicked.connect(self.select_geometry_by_surveys)
            self.dockwindfield.linkSurveyToGeometryButton.clicked.connect(self.link_selected_surveys_to_geometry)
            self.dockwindfield.unlinkSurveyFromGeometryButton.clicked.connect(self.unlink_selected_surveys_from_geometry)
            self.dockwindfield.addSurveyPushButton.clicked.connect(self.add_survey)
            self.dockwindfield.updateSurveyPushButton.clicked.connect(self.update_survey)
            self.dockwindfield.deleteSurveyPushButton.clicked.connect(self.delete_survey)

            self.dockwindfield.showSelectedSurveyDatasetsRadioButton.clicked.connect(self.check_show_datasets_for_selected_surveys)
            self.dockwindfield.showAllSurveyDatasetsRadioButton.clicked.connect(self.check_show_datasets_for_all_surveys)
            self.dockwindfield.surveyTableWidget.itemSelectionChanged.connect(self.refresh_datasets)
            self.dockwindfield.datasetFilterLineEdit.textEdited.connect(self.refresh_datasets)
            self.dockwindfield.refreshDatasetButton.clicked.connect(self.refresh_datasets)
            self.dockwindfield.selectDatasetForSelectedGeometryButton.clicked.connect(self.select_datasets_by_geometry)
            self.dockwindfield.selectGeometryForSelectedDatasetButton.clicked.connect(self.select_geometry_by_datasets)
            self.dockwindfield.linkDatasetToGeometryButton.clicked.connect(self.link_selected_datasets_to_geometry)
            self.dockwindfield.unlinkDatasetFromGeometryButton.clicked.connect(self.unlink_selected_datasets_from_geometry)
            self.dockwindfield.addDatasetPushButton.clicked.connect(self.add_dataset)
            self.dockwindfield.updateDatasetPushButton.clicked.connect(self.update_dataset)
            self.dockwindfield.deleteDatasetPushButton.clicked.connect(self.delete_dataset)

            self.iface.addDockWidget(Qt.LeftDockWidgetArea, self.dockwindfield)
            self.dockwindfield.adjustSize()
        else:
            self.iface.messageBar().pushMessage('Ошибка', 'Необходимо добавить в проект слой с геометрией сейсмики',
                                                level=Qgis.Warning, duration=3)


    def run_mwd(self):
        """Run method that performs all the real work"""
        try:
            self.wind.close()
        except:
            pass
        if self.first_start == True:
            self.first_start = False
            self.dockwindwells = GeoDMDockWidgetWells()
        else:
            self.dockwindwells = GeoDMDockWidgetWells()

        self.mode = 'wells'
        self.wind = self.dockwindwells

        self.dockwindwells.selectWellsForSelectedGeometryButton.setIcon(QIcon(':/plugins/geo_dm/spreadsheet.png'))
        self.dockwindwells.selectGeometryForSelectedWellsButton.setIcon(QIcon(':/plugins/geo_dm/geometry.png'))
        self.dockwindwells.refreshWellsButton.setIcon(QIcon(':/plugins/geo_dm/refresh.png'))
        self.dockwindwells.refreshWellAttrsButton.setIcon(QIcon(':/plugins/geo_dm/refresh.png'))

        ltreenode = QgsProject.instance().layerTreeRoot().children()
        layers = list(filter(lambda x: x.type() == QgsMapLayerType.VectorLayer and x.isSpatial(),
                             QgsLayerTreeUtils().collectMapLayersRecursive(ltreenode)))
        if layers:
            self.set_selected_well_features_list()
            self.display_selected_wells_geometry_count()
            self.iface.mapCanvas().selectionChanged.connect(self.set_selected_well_features_list)
            self.iface.layerTreeView().currentLayerChanged.connect(self.set_selected_well_features_list)

            self.refresh_wells()
            self.dockwindwells.refreshWellsButton.clicked.connect(self.refresh_wells)
            self.dockwindwells.wellsFilterLineEdit.textEdited.connect(self.refresh_wells)
            self.dockwindwells.selectWellsForSelectedGeometryButton.clicked.connect(self.select_wells_by_geometry)
            self.dockwindwells.selectWellsForSelectedGeometryButton.clicked.connect(self.refresh_well_attrs)
            self.dockwindwells.selectGeometryForSelectedWellsButton.clicked.connect(self.select_geometry_by_wells)
            self.dockwindwells.updateWellPushButton.clicked.connect(self.update_well)
            self.dockwindwells.wellsTableWidget.itemSelectionChanged.connect(self.refresh_well_attrs)
            self.dockwindwells.wellAttrsFilterLineEdit.textEdited.connect(self.refresh_well_attrs)
            self.dockwindwells.refreshWellAttrsButton.clicked.connect(self.refresh_well_attrs)
            self.dockwindwells.addWellAttrPushButton.clicked.connect(self.add_well_attr)
            self.dockwindwells.updateWellAttrPushButton.clicked.connect(self.update_well_attr)
            self.dockwindwells.deleteWellAttrPushButton.clicked.connect(self.delete_well_attrs)

            self.iface.addDockWidget(Qt.LeftDockWidgetArea, self.dockwindwells)
            self.dockwindwells.adjustSize()
        else:
            self.iface.messageBar().pushMessage('Ошибка', 'Необходимо добавить в проект слой с точками скважин',
                                                level=Qgis.Warning, duration=3)


    def run_aux(self):
        """Run method that performs all the real work"""
        try:
            self.wind.close()
        except:
            pass
        if self.first_start == True:
            self.first_start = False
            self.dockwindaux = GeoDMDockWidgetAux()
        else:
            self.dockwindaux = GeoDMDockWidgetAux()

        self.mode = 'aux'
        self.wind = self.dockwindaux

        self.wind.auxRefreshButton.setIcon(QIcon(':/plugins/geo_dm/refresh.png'))

        self.refresh_aux_doc_types()

        self.wind.auxDocTypeComboBox.activated.connect(self.reload_aux_docs)
        self.wind.auxFilterLineEdit.textEdited.connect(self.reload_aux_docs)
        self.wind.auxRefreshButton.clicked.connect(self.reload_aux_docs)
        self.wind.auxUpdateDocButton.clicked.connect(self.update_aux_doc)

        self.iface.addDockWidget(Qt.LeftDockWidgetArea, self.wind)
        self.wind.adjustSize()


